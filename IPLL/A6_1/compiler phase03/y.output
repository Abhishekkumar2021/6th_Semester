Terminals unused in grammar

    STRUCT
    TYPEDEF
    UNION
    HASH
    INVALID_TOKEN


Grammar

    0 $accept: translation_unit $end

    1 primary_expression: IDENTIFIER
    2                   | INTEGER_CONSTANT
    3                   | CHARACTER_CONSTANT
    4                   | STRING_LITERAL
    5                   | LEFT_PARENTHESES expression RIGHT_PARENTHESES

    6 postfix_expression: primary_expression
    7                   | postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | postfix_expression DOT IDENTIFIER
   10                   | postfix_expression ARROW IDENTIFIER
   11                   | postfix_expression INCREMENT
   12                   | postfix_expression DECREMENT
   13                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET

   15 argument_expression_list_opt: argument_expression_list
   16                             | ε

   17 argument_expression_list: assignment_expression
   18                         | argument_expression_list COMMA assignment_expression

   19 unary_expression: postfix_expression
   20                 | INCREMENT unary_expression
   21                 | DECREMENT unary_expression
   22                 | unary_operator cast_expression
   23                 | SIZEOF unary_expression
   24                 | SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES

   25 unary_operator: BITWISE_AND
   26               | ASTERISK
   27               | PLUS
   28               | MINUS
   29               | TILDE
   30               | EXCLAMATION

   31 cast_expression: unary_expression
   32                | LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression

   33 multiplicative_expression: cast_expression
   34                          | multiplicative_expression ASTERISK cast_expression
   35                          | multiplicative_expression SLASH cast_expression
   36                          | multiplicative_expression MODULO cast_expression

   37 additive_expression: multiplicative_expression
   38                    | additive_expression PLUS multiplicative_expression
   39                    | additive_expression MINUS multiplicative_expression

   40 shift_expression: additive_expression
   41                 | shift_expression LEFT_SHIFT additive_expression
   42                 | shift_expression RIGHT_SHIFT additive_expression

   43 relational_expression: shift_expression
   44                      | relational_expression LESS_THAN shift_expression
   45                      | relational_expression GREATER_THAN shift_expression
   46                      | relational_expression LESS_EQUAL_THAN shift_expression
   47                      | relational_expression GREATER_EQUAL_THAN shift_expression

   48 equality_expression: relational_expression
   49                    | equality_expression EQUALS relational_expression
   50                    | equality_expression NOT_EQUALS relational_expression

   51 AND_expression: equality_expression
   52               | AND_expression BITWISE_AND equality_expression

   53 exclusive_OR_expression: AND_expression
   54                        | exclusive_OR_expression BITWISE_XOR AND_expression

   55 inclusive_OR_expression: exclusive_OR_expression
   56                        | inclusive_OR_expression BITWISE_OR exclusive_OR_expression

   57 M: ε

   58 N: ε

   59 logical_AND_expression: inclusive_OR_expression
   60                       | logical_AND_expression LOGICAL_AND M inclusive_OR_expression

   61 logical_OR_expression: logical_AND_expression
   62                      | logical_OR_expression LOGICAL_OR M logical_AND_expression

   63 conditional_expression: logical_OR_expression
   64                       | logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression

   65 assignment_expression: conditional_expression
   66                      | unary_expression assignment_operator assignment_expression

   67 assignment_operator: ASSIGNMENT
   68                    | ASTERISK_ASSIGNMENT
   69                    | SLASH_ASSIGNMENT
   70                    | MODULO_ASSIGNMENT
   71                    | PLUS_ASSIGNMENT
   72                    | MINUS_ASSIGNMENT
   73                    | LEFT_SHIFT_ASSIGNMENT
   74                    | RIGHT_SHIFT_ASSIGNMENT
   75                    | BITWISE_AND_ASSIGNMENT
   76                    | BITWISE_XOR_ASSIGNMENT
   77                    | BITWISE_OR_ASSIGNMENT

   78 expression: assignment_expression
   79           | expression COMMA assignment_expression

   80 constant_expression: conditional_expression

   81 declaration: declaration_specifiers init_declarator_list_opt SEMI_COLON

   82 init_declarator_list_opt: init_declarator_list
   83                         | ε

   84 declaration_specifiers: storage_class_specifier declaration_specifiers_opt
   85                       | type_specifier declaration_specifiers_opt
   86                       | type_qualifier declaration_specifiers_opt
   87                       | function_specifier declaration_specifiers_opt

   88 declaration_specifiers_opt: declaration_specifiers
   89                           | ε

   90 init_declarator_list: init_declarator
   91                     | init_declarator_list COMMA init_declarator

   92 init_declarator: declarator
   93                | declarator ASSIGNMENT initialiser

   94 storage_class_specifier: EXTERN
   95                        | STATIC
   96                        | AUTO
   97                        | REGISTER

   98 type_specifier: VOIDTYPE
   99               | CHARTYPE
  100               | SHORT
  101               | INTTYPE
  102               | LONG
  103               | DOUBLE
  104               | SIGNED
  105               | UNSIGNED
  106               | BOOL
  107               | COMPLEX
  108               | IMAGINARY
  109               | enum_specifier

  110 specifier_qualifier_list: type_specifier specifier_qualifier_list_opt
  111                         | type_qualifier specifier_qualifier_list_opt

  112 specifier_qualifier_list_opt: specifier_qualifier_list
  113                             | ε

  114 enum_specifier: ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  115               | ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  116               | ENUM IDENTIFIER

  117 identifier_opt: IDENTIFIER
  118               | ε

  119 enumerator_list: enumerator
  120                | enumerator_list COMMA enumerator

  121 enumerator: IDENTIFIER
  122           | IDENTIFIER ASSIGNMENT constant_expression

  123 type_qualifier: CONST
  124               | RESTRICT
  125               | VOLATILE

  126 function_specifier: INLINE

  127 declarator: pointer direct_declarator
  128           | direct_declarator

  129 change_scope: ε

  130 direct_declarator: IDENTIFIER
  131                  | LEFT_PARENTHESES declarator RIGHT_PARENTHESES
  132                  | direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  133                  | direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
  134                  | direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
  135                  | direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
  136                  | direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  137                  | direct_declarator LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET
  138                  | direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  139                  | direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  140                  | direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
  141                  | direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
  142                  | direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
  143                  | direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES

  144 type_qualifier_list_opt: type_qualifier_list
  145                        | ε

  146 pointer: ASTERISK type_qualifier_list_opt
  147        | ASTERISK type_qualifier_list_opt pointer

  148 type_qualifier_list: type_qualifier
  149                    | type_qualifier_list type_qualifier

  150 parameter_type_list: parameter_list
  151                    | parameter_list COMMA ELLIPSIS

  152 parameter_list: parameter_declaration
  153               | parameter_list COMMA parameter_declaration

  154 parameter_declaration: declaration_specifiers declarator
  155                      | declaration_specifiers

  156 identifier_list: IDENTIFIER
  157                | identifier_list COMMA IDENTIFIER

  158 type_name: specifier_qualifier_list

  159 initialiser: assignment_expression
  160            | LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
  161            | LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET

  162 initialiser_list: designation_opt initialiser
  163                 | initialiser_list COMMA designation_opt initialiser

  164 designation_opt: designation
  165                | ε

  166 designation: designator_list ASSIGNMENT

  167 designator_list: designator
  168                | designator_list designator

  169 designator: LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET
  170           | DOT IDENTIFIER

  171 statement: labeled_statement
  172          | compound_statement
  173          | expression_statement
  174          | selection_statement
  175          | iteration_statement
  176          | jump_statement

  177 labeled_statement: IDENTIFIER COLON statement
  178                  | CASE constant_expression COLON statement
  179                  | DEFAULT COLON statement

  180 change_block: ε

  181 compound_statement: LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET

  182 block_item_list_opt: block_item_list
  183                    | ε

  184 block_item_list: block_item
  185                | block_item_list M block_item

  186 block_item: declaration
  187           | statement

  188 expression_statement: expression_opt SEMI_COLON

  189 expression_opt: expression
  190               | ε

  191 selection_statement: IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  192                    | IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  193                    | SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement

  194 iteration_statement: WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  195                    | DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  196                    | FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  197                    | FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement

  198 jump_statement: GOTO IDENTIFIER SEMI_COLON
  199               | CONTINUE SEMI_COLON
  200               | BREAK SEMI_COLON
  201               | RETURN expression_opt SEMI_COLON

  202 translation_unit: external_declaration
  203                 | translation_unit external_declaration

  204 external_declaration: function_definition
  205                     | declaration

  206 function_definition: declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

  207 declaration_list_opt: declaration_list
  208                     | ε

  209 declaration_list: declaration
  210                 | declaration_list declaration


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    AUTO (258) 96
    BREAK (259) 200
    CASE (260) 178
    CHARTYPE (261) 99
    CONST (262) 123
    CONTINUE (263) 199
    DEFAULT (264) 179
    DO (265) 195
    DOUBLE (266) 103
    ELSE (267) 192
    ENUM (268) 114 115 116
    EXTERN (269) 94
    FOR (270) 196 197
    GOTO (271) 198
    IF (272) 191 192
    INLINE (273) 126
    INTTYPE (274) 101
    LONG (275) 102
    REGISTER (276) 97
    RESTRICT (277) 124
    RETURN (278) 201
    SHORT (279) 100
    SIGNED (280) 104
    SIZEOF (281) 23 24
    STATIC (282) 95 136 137 138
    STRUCT (283)
    SWITCH (284) 193
    TYPEDEF (285)
    UNION (286)
    UNSIGNED (287) 105
    VOIDTYPE (288) 98
    VOLATILE (289) 125
    WHILE (290) 194 195
    BOOL (291) 106
    COMPLEX (292) 107
    IMAGINARY (293) 108
    IDENTIFIER <symbol> (294) 1 9 10 116 117 121 122 130 156 157 170 177 198
    INTEGER_CONSTANT <intVal> (295) 2
    CHARACTER_CONSTANT <charVal> (296) 3
    STRING_LITERAL <stringVal> (297) 4
    LEFT_SQUARE_BRACKET (298) 7 132 133 134 135 136 137 138 139 140 169
    INCREMENT (299) 11 20
    SLASH (300) 35
    QUESTION_MARK (301) 64
    ASSIGNMENT (302) 67 93 122 166
    COMMA (303) 14 18 79 91 115 120 151 153 157 161 163
    RIGHT_SQUARE_BRACKET (304) 7 132 133 134 135 136 137 138 139 140 169
    LEFT_PARENTHESES (305) 5 8 13 14 24 32 131 141 142 143 191 192 193 194 195 196 197
    LEFT_CURLY_BRACKET (306) 13 14 114 115 160 161 181 206
    RIGHT_CURLY_BRACKET (307) 13 14 114 115 160 161 181 206
    DOT (308) 9 170
    ARROW (309) 10
    ASTERISK (310) 26 34 139 140 146 147
    PLUS (311) 27 38
    MINUS (312) 28 39
    TILDE (313) 29
    EXCLAMATION (314) 30
    MODULO (315) 36
    LEFT_SHIFT (316) 41
    RIGHT_SHIFT (317) 42
    LESS_THAN (318) 44
    GREATER_THAN (319) 45
    LESS_EQUAL_THAN (320) 46
    GREATER_EQUAL_THAN (321) 47
    COLON (322) 64 177 178 179
    SEMI_COLON (323) 81 188 195 196 197 198 199 200 201
    ELLIPSIS (324) 151
    ASTERISK_ASSIGNMENT (325) 68
    SLASH_ASSIGNMENT (326) 69
    MODULO_ASSIGNMENT (327) 70
    PLUS_ASSIGNMENT (328) 71
    MINUS_ASSIGNMENT (329) 72
    LEFT_SHIFT_ASSIGNMENT (330) 73
    HASH (331)
    DECREMENT (332) 12 21
    RIGHT_PARENTHESES (333) 5 8 13 14 24 32 131 141 142 143 191 192 193 194 195 196 197
    BITWISE_AND (334) 25 52
    EQUALS (335) 49
    BITWISE_XOR (336) 54
    BITWISE_OR (337) 56
    LOGICAL_AND (338) 60
    LOGICAL_OR (339) 62
    RIGHT_SHIFT_ASSIGNMENT (340) 74
    NOT_EQUALS (341) 50
    BITWISE_AND_ASSIGNMENT (342) 75
    BITWISE_OR_ASSIGNMENT (343) 77
    BITWISE_XOR_ASSIGNMENT (344) 76
    INVALID_TOKEN (345)
    THEN (346)


Nonterminals, with rules where they appear

    $accept (92)
        on left: 0
    primary_expression <expression> (93)
        on left: 1 2 3 4 5
        on right: 6
    postfix_expression <array> (94)
        on left: 6 7 8 9 10 11 12 13 14
        on right: 7 8 9 10 11 12 19
    argument_expression_list_opt <parameterCount> (95)
        on left: 15 16
        on right: 8
    argument_expression_list <parameterCount> (96)
        on left: 17 18
        on right: 15 18
    unary_expression <array> (97)
        on left: 19 20 21 22 23 24
        on right: 20 21 23 31 66
    unary_operator <unaryOperator> (98)
        on left: 25 26 27 28 29 30
        on right: 22
    cast_expression <array> (99)
        on left: 31 32
        on right: 22 32 33 34 35 36
    multiplicative_expression <expression> (100)
        on left: 33 34 35 36
        on right: 34 35 36 37 38 39
    additive_expression <expression> (101)
        on left: 37 38 39
        on right: 38 39 40 41 42
    shift_expression <expression> (102)
        on left: 40 41 42
        on right: 41 42 43 44 45 46 47
    relational_expression <expression> (103)
        on left: 43 44 45 46 47
        on right: 44 45 46 47 48 49 50
    equality_expression <expression> (104)
        on left: 48 49 50
        on right: 49 50 51 52
    AND_expression <expression> (105)
        on left: 51 52
        on right: 52 53 54
    exclusive_OR_expression <expression> (106)
        on left: 53 54
        on right: 54 55 56
    inclusive_OR_expression <expression> (107)
        on left: 55 56
        on right: 56 59 60
    M <instructionNumber> (108)
        on left: 57
        on right: 60 62 64 185 191 192 194 195 196
    N <statement> (109)
        on left: 58
        on right: 64 191 192 196
    logical_AND_expression <expression> (110)
        on left: 59 60
        on right: 60 61 62
    logical_OR_expression <expression> (111)
        on left: 61 62
        on right: 62 63 64
    conditional_expression <expression> (112)
        on left: 63 64
        on right: 64 65 80
    assignment_expression <expression> (113)
        on left: 65 66
        on right: 17 18 66 78 79 132 134 136 137 138 159
    assignment_operator (114)
        on left: 67 68 69 70 71 72 73 74 75 76 77
        on right: 66
    expression <expression> (115)
        on left: 78 79
        on right: 5 7 64 79 189 191 192 193 194 195
    constant_expression (116)
        on left: 80
        on right: 122 169 178
    declaration (117)
        on left: 81
        on right: 186 197 205 209 210
    init_declarator_list_opt (118)
        on left: 82 83
        on right: 81
    declaration_specifiers (119)
        on left: 84 85 86 87
        on right: 81 88 154 155 206
    declaration_specifiers_opt (120)
        on left: 88 89
        on right: 84 85 86 87
    init_declarator_list (121)
        on left: 90 91
        on right: 82 91
    init_declarator <symbol> (122)
        on left: 92 93
        on right: 90 91
    storage_class_specifier (123)
        on left: 94 95 96 97
        on right: 84
    type_specifier (124)
        on left: 98 99 100 101 102 103 104 105 106 107 108 109
        on right: 85 110
    specifier_qualifier_list (125)
        on left: 110 111
        on right: 112 158
    specifier_qualifier_list_opt (126)
        on left: 112 113
        on right: 110 111
    enum_specifier (127)
        on left: 114 115 116
        on right: 109
    identifier_opt (128)
        on left: 117 118
        on right: 114 115
    enumerator_list (129)
        on left: 119 120
        on right: 114 115 120
    enumerator (130)
        on left: 121 122
        on right: 119 120
    type_qualifier (131)
        on left: 123 124 125
        on right: 86 111 148 149
    function_specifier (132)
        on left: 126
        on right: 87
    declarator <symbol> (133)
        on left: 127 128
        on right: 92 93 131 154 206
    change_scope (134)
        on left: 129
        on right: 141 143 181 206
    direct_declarator <symbol> (135)
        on left: 130 131 132 133 134 135 136 137 138 139 140 141 142 143
        on right: 127 128 132 133 134 135 136 137 138 139 140 141 142 143
    type_qualifier_list_opt (136)
        on left: 144 145
        on right: 146 147
    pointer <symbolType> (137)
        on left: 146 147
        on right: 127 147
    type_qualifier_list (138)
        on left: 148 149
        on right: 132 133 136 138 139 144 149
    parameter_type_list (139)
        on left: 150 151
        on right: 141
    parameter_list (140)
        on left: 152 153
        on right: 150 151 153
    parameter_declaration (141)
        on left: 154 155
        on right: 152 153
    identifier_list (142)
        on left: 156 157
        on right: 142 157
    type_name (143)
        on left: 158
        on right: 13 14 24 32
    initialiser <symbol> (144)
        on left: 159 160 161
        on right: 93 162 163
    initialiser_list (145)
        on left: 162 163
        on right: 13 14 160 161 163
    designation_opt (146)
        on left: 164 165
        on right: 162 163
    designation (147)
        on left: 166
        on right: 164
    designator_list (148)
        on left: 167 168
        on right: 166 168
    designator (149)
        on left: 169 170
        on right: 167 168
    statement <statement> (150)
        on left: 171 172 173 174 175 176
        on right: 177 178 179 187 191 192 193 194 195 196 197
    labeled_statement <statement> (151)
        on left: 177 178 179
        on right: 171
    change_block (152)
        on left: 180
        on right: 181
    compound_statement <statement> (153)
        on left: 181
        on right: 172
    block_item_list_opt <statement> (154)
        on left: 182 183
        on right: 181 206
    block_item_list <statement> (155)
        on left: 184 185
        on right: 182 185
    block_item <statement> (156)
        on left: 186 187
        on right: 184 185
    expression_statement <expression> (157)
        on left: 188
        on right: 173
    expression_opt <expression> (158)
        on left: 189 190
        on right: 188 196 197 201
    selection_statement <statement> (159)
        on left: 191 192 193
        on right: 174
    iteration_statement <statement> (160)
        on left: 194 195 196 197
        on right: 175
    jump_statement <statement> (161)
        on left: 198 199 200 201
        on right: 176
    translation_unit (162)
        on left: 202 203
        on right: 0 203
    external_declaration (163)
        on left: 204 205
        on right: 202 203
    function_definition (164)
        on left: 206
        on right: 204
    declaration_list_opt (165)
        on left: 207 208
        on right: 206
    declaration_list (166)
        on left: 209 210
        on right: 207 210


State 0

    0 $accept: • translation_unit $end
   81 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   84 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   85                       | • type_specifier declaration_specifiers_opt
   86                       | • type_qualifier declaration_specifiers_opt
   87                       | • function_specifier declaration_specifiers_opt
   94 storage_class_specifier: • EXTERN
   95                        | • STATIC
   96                        | • AUTO
   97                        | • REGISTER
   98 type_specifier: • VOIDTYPE
   99               | • CHARTYPE
  100               | • SHORT
  101               | • INTTYPE
  102               | • LONG
  103               | • DOUBLE
  104               | • SIGNED
  105               | • UNSIGNED
  106               | • BOOL
  107               | • COMPLEX
  108               | • IMAGINARY
  109               | • enum_specifier
  114 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  115               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  116               | • ENUM IDENTIFIER
  123 type_qualifier: • CONST
  124               | • RESTRICT
  125               | • VOLATILE
  126 function_specifier: • INLINE
  202 translation_unit: • external_declaration
  203                 | • translation_unit external_declaration
  204 external_declaration: • function_definition
  205                     | • declaration
  206 function_definition: • declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

    AUTO       shift, and go to state 1
    CHARTYPE   shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    INLINE     shift, and go to state 7
    INTTYPE    shift, and go to state 8
    LONG       shift, and go to state 9
    REGISTER   shift, and go to state 10
    RESTRICT   shift, and go to state 11
    SHORT      shift, and go to state 12
    SIGNED     shift, and go to state 13
    STATIC     shift, and go to state 14
    UNSIGNED   shift, and go to state 15
    VOIDTYPE   shift, and go to state 16
    VOLATILE   shift, and go to state 17
    BOOL       shift, and go to state 18
    COMPLEX    shift, and go to state 19
    IMAGINARY  shift, and go to state 20

    declaration              go to state 21
    declaration_specifiers   go to state 22
    storage_class_specifier  go to state 23
    type_specifier           go to state 24
    enum_specifier           go to state 25
    type_qualifier           go to state 26
    function_specifier       go to state 27
    translation_unit         go to state 28
    external_declaration     go to state 29
    function_definition      go to state 30


State 1

   96 storage_class_specifier: AUTO •

    $default  reduce using rule 96 (storage_class_specifier)


State 2

   99 type_specifier: CHARTYPE •

    $default  reduce using rule 99 (type_specifier)


State 3

  123 type_qualifier: CONST •

    $default  reduce using rule 123 (type_qualifier)


State 4

  103 type_specifier: DOUBLE •

    $default  reduce using rule 103 (type_specifier)


State 5

  114 enum_specifier: ENUM • identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  115               | ENUM • identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  116               | ENUM • IDENTIFIER
  117 identifier_opt: • IDENTIFIER
  118               | ε •  [LEFT_CURLY_BRACKET]

    IDENTIFIER  shift, and go to state 31

    $default  reduce using rule 118 (identifier_opt)

    identifier_opt  go to state 32


State 6

   94 storage_class_specifier: EXTERN •

    $default  reduce using rule 94 (storage_class_specifier)


State 7

  126 function_specifier: INLINE •

    $default  reduce using rule 126 (function_specifier)


State 8

  101 type_specifier: INTTYPE •

    $default  reduce using rule 101 (type_specifier)


State 9

  102 type_specifier: LONG •

    $default  reduce using rule 102 (type_specifier)


State 10

   97 storage_class_specifier: REGISTER •

    $default  reduce using rule 97 (storage_class_specifier)


State 11

  124 type_qualifier: RESTRICT •

    $default  reduce using rule 124 (type_qualifier)


State 12

  100 type_specifier: SHORT •

    $default  reduce using rule 100 (type_specifier)


State 13

  104 type_specifier: SIGNED •

    $default  reduce using rule 104 (type_specifier)


State 14

   95 storage_class_specifier: STATIC •

    $default  reduce using rule 95 (storage_class_specifier)


State 15

  105 type_specifier: UNSIGNED •

    $default  reduce using rule 105 (type_specifier)


State 16

   98 type_specifier: VOIDTYPE •

    $default  reduce using rule 98 (type_specifier)


State 17

  125 type_qualifier: VOLATILE •

    $default  reduce using rule 125 (type_qualifier)


State 18

  106 type_specifier: BOOL •

    $default  reduce using rule 106 (type_specifier)


State 19

  107 type_specifier: COMPLEX •

    $default  reduce using rule 107 (type_specifier)


State 20

  108 type_specifier: IMAGINARY •

    $default  reduce using rule 108 (type_specifier)


State 21

  205 external_declaration: declaration •

    $default  reduce using rule 205 (external_declaration)


State 22

   81 declaration: declaration_specifiers • init_declarator_list_opt SEMI_COLON
   82 init_declarator_list_opt: • init_declarator_list
   83                         | ε •  [SEMI_COLON]
   90 init_declarator_list: • init_declarator
   91                     | • init_declarator_list COMMA init_declarator
   92 init_declarator: • declarator
   93                | • declarator ASSIGNMENT initialiser
  127 declarator: • pointer direct_declarator
  128           | • direct_declarator
  130 direct_declarator: • IDENTIFIER
  131                  | • LEFT_PARENTHESES declarator RIGHT_PARENTHESES
  132                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  133                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
  134                  | • direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
  135                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
  136                  | • direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  137                  | • direct_declarator LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET
  138                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  139                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  140                  | • direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
  141                  | • direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
  142                  | • direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
  143                  | • direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES
  146 pointer: • ASTERISK type_qualifier_list_opt
  147        | • ASTERISK type_qualifier_list_opt pointer
  206 function_definition: declaration_specifiers • declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

    IDENTIFIER        shift, and go to state 33
    LEFT_PARENTHESES  shift, and go to state 34
    ASTERISK          shift, and go to state 35

    $default  reduce using rule 83 (init_declarator_list_opt)

    init_declarator_list_opt  go to state 36
    init_declarator_list      go to state 37
    init_declarator           go to state 38
    declarator                go to state 39
    direct_declarator         go to state 40
    pointer                   go to state 41


State 23

   84 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   84                       | storage_class_specifier • declaration_specifiers_opt
   85                       | • type_specifier declaration_specifiers_opt
   86                       | • type_qualifier declaration_specifiers_opt
   87                       | • function_specifier declaration_specifiers_opt
   88 declaration_specifiers_opt: • declaration_specifiers
   89                           | ε •  [IDENTIFIER, COMMA, LEFT_PARENTHESES, ASTERISK, SEMI_COLON, RIGHT_PARENTHESES]
   94 storage_class_specifier: • EXTERN
   95                        | • STATIC
   96                        | • AUTO
   97                        | • REGISTER
   98 type_specifier: • VOIDTYPE
   99               | • CHARTYPE
  100               | • SHORT
  101               | • INTTYPE
  102               | • LONG
  103               | • DOUBLE
  104               | • SIGNED
  105               | • UNSIGNED
  106               | • BOOL
  107               | • COMPLEX
  108               | • IMAGINARY
  109               | • enum_specifier
  114 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  115               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  116               | • ENUM IDENTIFIER
  123 type_qualifier: • CONST
  124               | • RESTRICT
  125               | • VOLATILE
  126 function_specifier: • INLINE

    AUTO       shift, and go to state 1
    CHARTYPE   shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    INLINE     shift, and go to state 7
    INTTYPE    shift, and go to state 8
    LONG       shift, and go to state 9
    REGISTER   shift, and go to state 10
    RESTRICT   shift, and go to state 11
    SHORT      shift, and go to state 12
    SIGNED     shift, and go to state 13
    STATIC     shift, and go to state 14
    UNSIGNED   shift, and go to state 15
    VOIDTYPE   shift, and go to state 16
    VOLATILE   shift, and go to state 17
    BOOL       shift, and go to state 18
    COMPLEX    shift, and go to state 19
    IMAGINARY  shift, and go to state 20

    $default  reduce using rule 89 (declaration_specifiers_opt)

    declaration_specifiers      go to state 42
    declaration_specifiers_opt  go to state 43
    storage_class_specifier     go to state 23
    type_specifier              go to state 24
    enum_specifier              go to state 25
    type_qualifier              go to state 26
    function_specifier          go to state 27


State 24

   84 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   85                       | • type_specifier declaration_specifiers_opt
   85                       | type_specifier • declaration_specifiers_opt
   86                       | • type_qualifier declaration_specifiers_opt
   87                       | • function_specifier declaration_specifiers_opt
   88 declaration_specifiers_opt: • declaration_specifiers
   89                           | ε •  [IDENTIFIER, COMMA, LEFT_PARENTHESES, ASTERISK, SEMI_COLON, RIGHT_PARENTHESES]
   94 storage_class_specifier: • EXTERN
   95                        | • STATIC
   96                        | • AUTO
   97                        | • REGISTER
   98 type_specifier: • VOIDTYPE
   99               | • CHARTYPE
  100               | • SHORT
  101               | • INTTYPE
  102               | • LONG
  103               | • DOUBLE
  104               | • SIGNED
  105               | • UNSIGNED
  106               | • BOOL
  107               | • COMPLEX
  108               | • IMAGINARY
  109               | • enum_specifier
  114 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  115               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  116               | • ENUM IDENTIFIER
  123 type_qualifier: • CONST
  124               | • RESTRICT
  125               | • VOLATILE
  126 function_specifier: • INLINE

    AUTO       shift, and go to state 1
    CHARTYPE   shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    INLINE     shift, and go to state 7
    INTTYPE    shift, and go to state 8
    LONG       shift, and go to state 9
    REGISTER   shift, and go to state 10
    RESTRICT   shift, and go to state 11
    SHORT      shift, and go to state 12
    SIGNED     shift, and go to state 13
    STATIC     shift, and go to state 14
    UNSIGNED   shift, and go to state 15
    VOIDTYPE   shift, and go to state 16
    VOLATILE   shift, and go to state 17
    BOOL       shift, and go to state 18
    COMPLEX    shift, and go to state 19
    IMAGINARY  shift, and go to state 20

    $default  reduce using rule 89 (declaration_specifiers_opt)

    declaration_specifiers      go to state 42
    declaration_specifiers_opt  go to state 44
    storage_class_specifier     go to state 23
    type_specifier              go to state 24
    enum_specifier              go to state 25
    type_qualifier              go to state 26
    function_specifier          go to state 27


State 25

  109 type_specifier: enum_specifier •

    $default  reduce using rule 109 (type_specifier)


State 26

   84 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   85                       | • type_specifier declaration_specifiers_opt
   86                       | • type_qualifier declaration_specifiers_opt
   86                       | type_qualifier • declaration_specifiers_opt
   87                       | • function_specifier declaration_specifiers_opt
   88 declaration_specifiers_opt: • declaration_specifiers
   89                           | ε •  [IDENTIFIER, COMMA, LEFT_PARENTHESES, ASTERISK, SEMI_COLON, RIGHT_PARENTHESES]
   94 storage_class_specifier: • EXTERN
   95                        | • STATIC
   96                        | • AUTO
   97                        | • REGISTER
   98 type_specifier: • VOIDTYPE
   99               | • CHARTYPE
  100               | • SHORT
  101               | • INTTYPE
  102               | • LONG
  103               | • DOUBLE
  104               | • SIGNED
  105               | • UNSIGNED
  106               | • BOOL
  107               | • COMPLEX
  108               | • IMAGINARY
  109               | • enum_specifier
  114 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  115               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  116               | • ENUM IDENTIFIER
  123 type_qualifier: • CONST
  124               | • RESTRICT
  125               | • VOLATILE
  126 function_specifier: • INLINE

    AUTO       shift, and go to state 1
    CHARTYPE   shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    INLINE     shift, and go to state 7
    INTTYPE    shift, and go to state 8
    LONG       shift, and go to state 9
    REGISTER   shift, and go to state 10
    RESTRICT   shift, and go to state 11
    SHORT      shift, and go to state 12
    SIGNED     shift, and go to state 13
    STATIC     shift, and go to state 14
    UNSIGNED   shift, and go to state 15
    VOIDTYPE   shift, and go to state 16
    VOLATILE   shift, and go to state 17
    BOOL       shift, and go to state 18
    COMPLEX    shift, and go to state 19
    IMAGINARY  shift, and go to state 20

    $default  reduce using rule 89 (declaration_specifiers_opt)

    declaration_specifiers      go to state 42
    declaration_specifiers_opt  go to state 45
    storage_class_specifier     go to state 23
    type_specifier              go to state 24
    enum_specifier              go to state 25
    type_qualifier              go to state 26
    function_specifier          go to state 27


State 27

   84 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   85                       | • type_specifier declaration_specifiers_opt
   86                       | • type_qualifier declaration_specifiers_opt
   87                       | • function_specifier declaration_specifiers_opt
   87                       | function_specifier • declaration_specifiers_opt
   88 declaration_specifiers_opt: • declaration_specifiers
   89                           | ε •  [IDENTIFIER, COMMA, LEFT_PARENTHESES, ASTERISK, SEMI_COLON, RIGHT_PARENTHESES]
   94 storage_class_specifier: • EXTERN
   95                        | • STATIC
   96                        | • AUTO
   97                        | • REGISTER
   98 type_specifier: • VOIDTYPE
   99               | • CHARTYPE
  100               | • SHORT
  101               | • INTTYPE
  102               | • LONG
  103               | • DOUBLE
  104               | • SIGNED
  105               | • UNSIGNED
  106               | • BOOL
  107               | • COMPLEX
  108               | • IMAGINARY
  109               | • enum_specifier
  114 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  115               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  116               | • ENUM IDENTIFIER
  123 type_qualifier: • CONST
  124               | • RESTRICT
  125               | • VOLATILE
  126 function_specifier: • INLINE

    AUTO       shift, and go to state 1
    CHARTYPE   shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    INLINE     shift, and go to state 7
    INTTYPE    shift, and go to state 8
    LONG       shift, and go to state 9
    REGISTER   shift, and go to state 10
    RESTRICT   shift, and go to state 11
    SHORT      shift, and go to state 12
    SIGNED     shift, and go to state 13
    STATIC     shift, and go to state 14
    UNSIGNED   shift, and go to state 15
    VOIDTYPE   shift, and go to state 16
    VOLATILE   shift, and go to state 17
    BOOL       shift, and go to state 18
    COMPLEX    shift, and go to state 19
    IMAGINARY  shift, and go to state 20

    $default  reduce using rule 89 (declaration_specifiers_opt)

    declaration_specifiers      go to state 42
    declaration_specifiers_opt  go to state 46
    storage_class_specifier     go to state 23
    type_specifier              go to state 24
    enum_specifier              go to state 25
    type_qualifier              go to state 26
    function_specifier          go to state 27


State 28

    0 $accept: translation_unit • $end
   81 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   84 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   85                       | • type_specifier declaration_specifiers_opt
   86                       | • type_qualifier declaration_specifiers_opt
   87                       | • function_specifier declaration_specifiers_opt
   94 storage_class_specifier: • EXTERN
   95                        | • STATIC
   96                        | • AUTO
   97                        | • REGISTER
   98 type_specifier: • VOIDTYPE
   99               | • CHARTYPE
  100               | • SHORT
  101               | • INTTYPE
  102               | • LONG
  103               | • DOUBLE
  104               | • SIGNED
  105               | • UNSIGNED
  106               | • BOOL
  107               | • COMPLEX
  108               | • IMAGINARY
  109               | • enum_specifier
  114 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  115               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  116               | • ENUM IDENTIFIER
  123 type_qualifier: • CONST
  124               | • RESTRICT
  125               | • VOLATILE
  126 function_specifier: • INLINE
  203 translation_unit: translation_unit • external_declaration
  204 external_declaration: • function_definition
  205                     | • declaration
  206 function_definition: • declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

    $end       shift, and go to state 47
    AUTO       shift, and go to state 1
    CHARTYPE   shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    INLINE     shift, and go to state 7
    INTTYPE    shift, and go to state 8
    LONG       shift, and go to state 9
    REGISTER   shift, and go to state 10
    RESTRICT   shift, and go to state 11
    SHORT      shift, and go to state 12
    SIGNED     shift, and go to state 13
    STATIC     shift, and go to state 14
    UNSIGNED   shift, and go to state 15
    VOIDTYPE   shift, and go to state 16
    VOLATILE   shift, and go to state 17
    BOOL       shift, and go to state 18
    COMPLEX    shift, and go to state 19
    IMAGINARY  shift, and go to state 20

    declaration              go to state 21
    declaration_specifiers   go to state 22
    storage_class_specifier  go to state 23
    type_specifier           go to state 24
    enum_specifier           go to state 25
    type_qualifier           go to state 26
    function_specifier       go to state 27
    external_declaration     go to state 48
    function_definition      go to state 30


State 29

  202 translation_unit: external_declaration •

    $default  reduce using rule 202 (translation_unit)


State 30

  204 external_declaration: function_definition •

    $default  reduce using rule 204 (external_declaration)


State 31

  116 enum_specifier: ENUM IDENTIFIER •  [AUTO, CHARTYPE, CONST, DOUBLE, ENUM, EXTERN, INLINE, INTTYPE, LONG, REGISTER, RESTRICT, SHORT, SIGNED, STATIC, UNSIGNED, VOIDTYPE, VOLATILE, BOOL, COMPLEX, IMAGINARY, IDENTIFIER, COMMA, LEFT_PARENTHESES, ASTERISK, SEMI_COLON, RIGHT_PARENTHESES]
  117 identifier_opt: IDENTIFIER •  [LEFT_CURLY_BRACKET]

    LEFT_CURLY_BRACKET  reduce using rule 117 (identifier_opt)
    $default            reduce using rule 116 (enum_specifier)


State 32

  114 enum_specifier: ENUM identifier_opt • LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  115               | ENUM identifier_opt • LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 49


State 33

  130 direct_declarator: IDENTIFIER •

    $default  reduce using rule 130 (direct_declarator)


State 34

  127 declarator: • pointer direct_declarator
  128           | • direct_declarator
  130 direct_declarator: • IDENTIFIER
  131                  | • LEFT_PARENTHESES declarator RIGHT_PARENTHESES
  131                  | LEFT_PARENTHESES • declarator RIGHT_PARENTHESES
  132                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  133                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
  134                  | • direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
  135                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
  136                  | • direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  137                  | • direct_declarator LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET
  138                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  139                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  140                  | • direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
  141                  | • direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
  142                  | • direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
  143                  | • direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES
  146 pointer: • ASTERISK type_qualifier_list_opt
  147        | • ASTERISK type_qualifier_list_opt pointer

    IDENTIFIER        shift, and go to state 33
    LEFT_PARENTHESES  shift, and go to state 34
    ASTERISK          shift, and go to state 35

    declarator         go to state 50
    direct_declarator  go to state 40
    pointer            go to state 41


State 35

  123 type_qualifier: • CONST
  124               | • RESTRICT
  125               | • VOLATILE
  144 type_qualifier_list_opt: • type_qualifier_list
  145                        | ε •  [IDENTIFIER, LEFT_PARENTHESES, ASTERISK]
  146 pointer: ASTERISK • type_qualifier_list_opt
  147        | ASTERISK • type_qualifier_list_opt pointer
  148 type_qualifier_list: • type_qualifier
  149                    | • type_qualifier_list type_qualifier

    CONST     shift, and go to state 3
    RESTRICT  shift, and go to state 11
    VOLATILE  shift, and go to state 17

    $default  reduce using rule 145 (type_qualifier_list_opt)

    type_qualifier           go to state 51
    type_qualifier_list_opt  go to state 52
    type_qualifier_list      go to state 53


State 36

   81 declaration: declaration_specifiers init_declarator_list_opt • SEMI_COLON

    SEMI_COLON  shift, and go to state 54


State 37

   82 init_declarator_list_opt: init_declarator_list •  [SEMI_COLON]
   91 init_declarator_list: init_declarator_list • COMMA init_declarator

    COMMA  shift, and go to state 55

    $default  reduce using rule 82 (init_declarator_list_opt)


State 38

   90 init_declarator_list: init_declarator •

    $default  reduce using rule 90 (init_declarator_list)


State 39

   81 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   84 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   85                       | • type_specifier declaration_specifiers_opt
   86                       | • type_qualifier declaration_specifiers_opt
   87                       | • function_specifier declaration_specifiers_opt
   92 init_declarator: declarator •  [COMMA, SEMI_COLON]
   93                | declarator • ASSIGNMENT initialiser
   94 storage_class_specifier: • EXTERN
   95                        | • STATIC
   96                        | • AUTO
   97                        | • REGISTER
   98 type_specifier: • VOIDTYPE
   99               | • CHARTYPE
  100               | • SHORT
  101               | • INTTYPE
  102               | • LONG
  103               | • DOUBLE
  104               | • SIGNED
  105               | • UNSIGNED
  106               | • BOOL
  107               | • COMPLEX
  108               | • IMAGINARY
  109               | • enum_specifier
  114 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  115               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  116               | • ENUM IDENTIFIER
  123 type_qualifier: • CONST
  124               | • RESTRICT
  125               | • VOLATILE
  126 function_specifier: • INLINE
  206 function_definition: declaration_specifiers declarator • declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET
  207 declaration_list_opt: • declaration_list
  208                     | ε •  [LEFT_CURLY_BRACKET]
  209 declaration_list: • declaration
  210                 | • declaration_list declaration

    AUTO        shift, and go to state 1
    CHARTYPE    shift, and go to state 2
    CONST       shift, and go to state 3
    DOUBLE      shift, and go to state 4
    ENUM        shift, and go to state 5
    EXTERN      shift, and go to state 6
    INLINE      shift, and go to state 7
    INTTYPE     shift, and go to state 8
    LONG        shift, and go to state 9
    REGISTER    shift, and go to state 10
    RESTRICT    shift, and go to state 11
    SHORT       shift, and go to state 12
    SIGNED      shift, and go to state 13
    STATIC      shift, and go to state 14
    UNSIGNED    shift, and go to state 15
    VOIDTYPE    shift, and go to state 16
    VOLATILE    shift, and go to state 17
    BOOL        shift, and go to state 18
    COMPLEX     shift, and go to state 19
    IMAGINARY   shift, and go to state 20
    ASSIGNMENT  shift, and go to state 56

    LEFT_CURLY_BRACKET  reduce using rule 208 (declaration_list_opt)
    $default            reduce using rule 92 (init_declarator)

    declaration              go to state 57
    declaration_specifiers   go to state 58
    storage_class_specifier  go to state 23
    type_specifier           go to state 24
    enum_specifier           go to state 25
    type_qualifier           go to state 26
    function_specifier       go to state 27
    declaration_list_opt     go to state 59
    declaration_list         go to state 60


State 40

  128 declarator: direct_declarator •  [AUTO, CHARTYPE, CONST, DOUBLE, ENUM, EXTERN, INLINE, INTTYPE, LONG, REGISTER, RESTRICT, SHORT, SIGNED, STATIC, UNSIGNED, VOIDTYPE, VOLATILE, BOOL, COMPLEX, IMAGINARY, ASSIGNMENT, COMMA, LEFT_CURLY_BRACKET, SEMI_COLON, RIGHT_PARENTHESES]
  132 direct_declarator: direct_declarator • LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  133                  | direct_declarator • LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
  134                  | direct_declarator • LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
  135                  | direct_declarator • LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
  136                  | direct_declarator • LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  137                  | direct_declarator • LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET
  138                  | direct_declarator • LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  139                  | direct_declarator • LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  140                  | direct_declarator • LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
  141                  | direct_declarator • LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
  142                  | direct_declarator • LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
  143                  | direct_declarator • LEFT_PARENTHESES change_scope RIGHT_PARENTHESES

    LEFT_SQUARE_BRACKET  shift, and go to state 61
    LEFT_PARENTHESES     shift, and go to state 62

    $default  reduce using rule 128 (declarator)


State 41

  127 declarator: pointer • direct_declarator
  130 direct_declarator: • IDENTIFIER
  131                  | • LEFT_PARENTHESES declarator RIGHT_PARENTHESES
  132                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  133                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
  134                  | • direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
  135                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
  136                  | • direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  137                  | • direct_declarator LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET
  138                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  139                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  140                  | • direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
  141                  | • direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
  142                  | • direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
  143                  | • direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES

    IDENTIFIER        shift, and go to state 33
    LEFT_PARENTHESES  shift, and go to state 34

    direct_declarator  go to state 63


State 42

   88 declaration_specifiers_opt: declaration_specifiers •

    $default  reduce using rule 88 (declaration_specifiers_opt)


State 43

   84 declaration_specifiers: storage_class_specifier declaration_specifiers_opt •

    $default  reduce using rule 84 (declaration_specifiers)


State 44

   85 declaration_specifiers: type_specifier declaration_specifiers_opt •

    $default  reduce using rule 85 (declaration_specifiers)


State 45

   86 declaration_specifiers: type_qualifier declaration_specifiers_opt •

    $default  reduce using rule 86 (declaration_specifiers)


State 46

   87 declaration_specifiers: function_specifier declaration_specifiers_opt •

    $default  reduce using rule 87 (declaration_specifiers)


State 47

    0 $accept: translation_unit $end •

    $default  accept


State 48

  203 translation_unit: translation_unit external_declaration •

    $default  reduce using rule 203 (translation_unit)


State 49

  114 enum_specifier: ENUM identifier_opt LEFT_CURLY_BRACKET • enumerator_list RIGHT_CURLY_BRACKET
  115               | ENUM identifier_opt LEFT_CURLY_BRACKET • enumerator_list COMMA RIGHT_CURLY_BRACKET
  119 enumerator_list: • enumerator
  120                | • enumerator_list COMMA enumerator
  121 enumerator: • IDENTIFIER
  122           | • IDENTIFIER ASSIGNMENT constant_expression

    IDENTIFIER  shift, and go to state 64

    enumerator_list  go to state 65
    enumerator       go to state 66


State 50

  131 direct_declarator: LEFT_PARENTHESES declarator • RIGHT_PARENTHESES

    RIGHT_PARENTHESES  shift, and go to state 67


State 51

  148 type_qualifier_list: type_qualifier •

    $default  reduce using rule 148 (type_qualifier_list)


State 52

  146 pointer: • ASTERISK type_qualifier_list_opt
  146        | ASTERISK type_qualifier_list_opt •  [IDENTIFIER, LEFT_PARENTHESES]
  147        | • ASTERISK type_qualifier_list_opt pointer
  147        | ASTERISK type_qualifier_list_opt • pointer

    ASTERISK  shift, and go to state 35

    $default  reduce using rule 146 (pointer)

    pointer  go to state 68


State 53

  123 type_qualifier: • CONST
  124               | • RESTRICT
  125               | • VOLATILE
  144 type_qualifier_list_opt: type_qualifier_list •  [IDENTIFIER, LEFT_PARENTHESES, ASTERISK]
  149 type_qualifier_list: type_qualifier_list • type_qualifier

    CONST     shift, and go to state 3
    RESTRICT  shift, and go to state 11
    VOLATILE  shift, and go to state 17

    $default  reduce using rule 144 (type_qualifier_list_opt)

    type_qualifier  go to state 69


State 54

   81 declaration: declaration_specifiers init_declarator_list_opt SEMI_COLON •

    $default  reduce using rule 81 (declaration)


State 55

   91 init_declarator_list: init_declarator_list COMMA • init_declarator
   92 init_declarator: • declarator
   93                | • declarator ASSIGNMENT initialiser
  127 declarator: • pointer direct_declarator
  128           | • direct_declarator
  130 direct_declarator: • IDENTIFIER
  131                  | • LEFT_PARENTHESES declarator RIGHT_PARENTHESES
  132                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  133                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
  134                  | • direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
  135                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
  136                  | • direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  137                  | • direct_declarator LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET
  138                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  139                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  140                  | • direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
  141                  | • direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
  142                  | • direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
  143                  | • direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES
  146 pointer: • ASTERISK type_qualifier_list_opt
  147        | • ASTERISK type_qualifier_list_opt pointer

    IDENTIFIER        shift, and go to state 33
    LEFT_PARENTHESES  shift, and go to state 34
    ASTERISK          shift, and go to state 35

    init_declarator    go to state 70
    declarator         go to state 71
    direct_declarator  go to state 40
    pointer            go to state 41


State 56

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   93 init_declarator: declarator ASSIGNMENT • initialiser
  159 initialiser: • assignment_expression
  160            | • LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
  161            | • LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    LEFT_CURLY_BRACKET  shift, and go to state 79
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 103
    initialiser                go to state 104


State 57

  209 declaration_list: declaration •

    $default  reduce using rule 209 (declaration_list)


State 58

   81 declaration: declaration_specifiers • init_declarator_list_opt SEMI_COLON
   82 init_declarator_list_opt: • init_declarator_list
   83                         | ε •  [SEMI_COLON]
   90 init_declarator_list: • init_declarator
   91                     | • init_declarator_list COMMA init_declarator
   92 init_declarator: • declarator
   93                | • declarator ASSIGNMENT initialiser
  127 declarator: • pointer direct_declarator
  128           | • direct_declarator
  130 direct_declarator: • IDENTIFIER
  131                  | • LEFT_PARENTHESES declarator RIGHT_PARENTHESES
  132                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  133                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
  134                  | • direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
  135                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
  136                  | • direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  137                  | • direct_declarator LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET
  138                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  139                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  140                  | • direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
  141                  | • direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
  142                  | • direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
  143                  | • direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES
  146 pointer: • ASTERISK type_qualifier_list_opt
  147        | • ASTERISK type_qualifier_list_opt pointer

    IDENTIFIER        shift, and go to state 33
    LEFT_PARENTHESES  shift, and go to state 34
    ASTERISK          shift, and go to state 35

    $default  reduce using rule 83 (init_declarator_list_opt)

    init_declarator_list_opt  go to state 36
    init_declarator_list      go to state 37
    init_declarator           go to state 38
    declarator                go to state 71
    direct_declarator         go to state 40
    pointer                   go to state 41


State 59

  129 change_scope: ε •
  206 function_definition: declaration_specifiers declarator declaration_list_opt • change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

    $default  reduce using rule 129 (change_scope)

    change_scope  go to state 105


State 60

   81 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   84 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   85                       | • type_specifier declaration_specifiers_opt
   86                       | • type_qualifier declaration_specifiers_opt
   87                       | • function_specifier declaration_specifiers_opt
   94 storage_class_specifier: • EXTERN
   95                        | • STATIC
   96                        | • AUTO
   97                        | • REGISTER
   98 type_specifier: • VOIDTYPE
   99               | • CHARTYPE
  100               | • SHORT
  101               | • INTTYPE
  102               | • LONG
  103               | • DOUBLE
  104               | • SIGNED
  105               | • UNSIGNED
  106               | • BOOL
  107               | • COMPLEX
  108               | • IMAGINARY
  109               | • enum_specifier
  114 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  115               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  116               | • ENUM IDENTIFIER
  123 type_qualifier: • CONST
  124               | • RESTRICT
  125               | • VOLATILE
  126 function_specifier: • INLINE
  207 declaration_list_opt: declaration_list •  [LEFT_CURLY_BRACKET]
  210 declaration_list: declaration_list • declaration

    AUTO       shift, and go to state 1
    CHARTYPE   shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    INLINE     shift, and go to state 7
    INTTYPE    shift, and go to state 8
    LONG       shift, and go to state 9
    REGISTER   shift, and go to state 10
    RESTRICT   shift, and go to state 11
    SHORT      shift, and go to state 12
    SIGNED     shift, and go to state 13
    STATIC     shift, and go to state 14
    UNSIGNED   shift, and go to state 15
    VOIDTYPE   shift, and go to state 16
    VOLATILE   shift, and go to state 17
    BOOL       shift, and go to state 18
    COMPLEX    shift, and go to state 19
    IMAGINARY  shift, and go to state 20

    $default  reduce using rule 207 (declaration_list_opt)

    declaration              go to state 106
    declaration_specifiers   go to state 58
    storage_class_specifier  go to state 23
    type_specifier           go to state 24
    enum_specifier           go to state 25
    type_qualifier           go to state 26
    function_specifier       go to state 27


State 61

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
  123 type_qualifier: • CONST
  124               | • RESTRICT
  125               | • VOLATILE
  132 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET • type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  133                  | direct_declarator LEFT_SQUARE_BRACKET • type_qualifier_list RIGHT_SQUARE_BRACKET
  134                  | direct_declarator LEFT_SQUARE_BRACKET • assignment_expression RIGHT_SQUARE_BRACKET
  135                  | direct_declarator LEFT_SQUARE_BRACKET • RIGHT_SQUARE_BRACKET
  136                  | direct_declarator LEFT_SQUARE_BRACKET • STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  137                  | direct_declarator LEFT_SQUARE_BRACKET • STATIC assignment_expression RIGHT_SQUARE_BRACKET
  138                  | direct_declarator LEFT_SQUARE_BRACKET • type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  139                  | direct_declarator LEFT_SQUARE_BRACKET • type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  140                  | direct_declarator LEFT_SQUARE_BRACKET • ASTERISK RIGHT_SQUARE_BRACKET
  148 type_qualifier_list: • type_qualifier
  149                    | • type_qualifier_list type_qualifier

    CONST                 shift, and go to state 3
    RESTRICT              shift, and go to state 11
    SIZEOF                shift, and go to state 72
    STATIC                shift, and go to state 107
    VOLATILE              shift, and go to state 17
    IDENTIFIER            shift, and go to state 73
    INTEGER_CONSTANT      shift, and go to state 74
    CHARACTER_CONSTANT    shift, and go to state 75
    STRING_LITERAL        shift, and go to state 76
    INCREMENT             shift, and go to state 77
    RIGHT_SQUARE_BRACKET  shift, and go to state 108
    LEFT_PARENTHESES      shift, and go to state 78
    ASTERISK              shift, and go to state 109
    PLUS                  shift, and go to state 81
    MINUS                 shift, and go to state 82
    TILDE                 shift, and go to state 83
    EXCLAMATION           shift, and go to state 84
    DECREMENT             shift, and go to state 85
    BITWISE_AND           shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 110
    type_qualifier             go to state 51
    type_qualifier_list        go to state 111


State 62

  129 change_scope: ε •  [AUTO, CHARTYPE, CONST, DOUBLE, ENUM, EXTERN, INLINE, INTTYPE, LONG, REGISTER, RESTRICT, SHORT, SIGNED, STATIC, UNSIGNED, VOIDTYPE, VOLATILE, BOOL, COMPLEX, IMAGINARY, RIGHT_PARENTHESES]
  141 direct_declarator: direct_declarator LEFT_PARENTHESES • change_scope parameter_type_list RIGHT_PARENTHESES
  142                  | direct_declarator LEFT_PARENTHESES • identifier_list RIGHT_PARENTHESES
  143                  | direct_declarator LEFT_PARENTHESES • change_scope RIGHT_PARENTHESES
  156 identifier_list: • IDENTIFIER
  157                | • identifier_list COMMA IDENTIFIER

    IDENTIFIER  shift, and go to state 112

    $default  reduce using rule 129 (change_scope)

    change_scope     go to state 113
    identifier_list  go to state 114


State 63

  127 declarator: pointer direct_declarator •  [AUTO, CHARTYPE, CONST, DOUBLE, ENUM, EXTERN, INLINE, INTTYPE, LONG, REGISTER, RESTRICT, SHORT, SIGNED, STATIC, UNSIGNED, VOIDTYPE, VOLATILE, BOOL, COMPLEX, IMAGINARY, ASSIGNMENT, COMMA, LEFT_CURLY_BRACKET, SEMI_COLON, RIGHT_PARENTHESES]
  132 direct_declarator: direct_declarator • LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  133                  | direct_declarator • LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
  134                  | direct_declarator • LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
  135                  | direct_declarator • LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
  136                  | direct_declarator • LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  137                  | direct_declarator • LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET
  138                  | direct_declarator • LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  139                  | direct_declarator • LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  140                  | direct_declarator • LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
  141                  | direct_declarator • LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
  142                  | direct_declarator • LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
  143                  | direct_declarator • LEFT_PARENTHESES change_scope RIGHT_PARENTHESES

    LEFT_SQUARE_BRACKET  shift, and go to state 61
    LEFT_PARENTHESES     shift, and go to state 62

    $default  reduce using rule 127 (declarator)


State 64

  121 enumerator: IDENTIFIER •  [COMMA, RIGHT_CURLY_BRACKET]
  122           | IDENTIFIER • ASSIGNMENT constant_expression

    ASSIGNMENT  shift, and go to state 115

    $default  reduce using rule 121 (enumerator)


State 65

  114 enum_specifier: ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list • RIGHT_CURLY_BRACKET
  115               | ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list • COMMA RIGHT_CURLY_BRACKET
  120 enumerator_list: enumerator_list • COMMA enumerator

    COMMA                shift, and go to state 116
    RIGHT_CURLY_BRACKET  shift, and go to state 117


State 66

  119 enumerator_list: enumerator •

    $default  reduce using rule 119 (enumerator_list)


State 67

  131 direct_declarator: LEFT_PARENTHESES declarator RIGHT_PARENTHESES •

    $default  reduce using rule 131 (direct_declarator)


State 68

  147 pointer: ASTERISK type_qualifier_list_opt pointer •

    $default  reduce using rule 147 (pointer)


State 69

  149 type_qualifier_list: type_qualifier_list type_qualifier •

    $default  reduce using rule 149 (type_qualifier_list)


State 70

   91 init_declarator_list: init_declarator_list COMMA init_declarator •

    $default  reduce using rule 91 (init_declarator_list)


State 71

   92 init_declarator: declarator •  [COMMA, SEMI_COLON]
   93                | declarator • ASSIGNMENT initialiser

    ASSIGNMENT  shift, and go to state 56

    $default  reduce using rule 92 (init_declarator)


State 72

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   23                 | SIZEOF • unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   24                 | SIZEOF • LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 118
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression  go to state 87
    postfix_expression  go to state 88
    unary_expression    go to state 119
    unary_operator      go to state 90


State 73

    1 primary_expression: IDENTIFIER •

    $default  reduce using rule 1 (primary_expression)


State 74

    2 primary_expression: INTEGER_CONSTANT •

    $default  reduce using rule 2 (primary_expression)


State 75

    3 primary_expression: CHARACTER_CONSTANT •

    $default  reduce using rule 3 (primary_expression)


State 76

    4 primary_expression: STRING_LITERAL •

    $default  reduce using rule 4 (primary_expression)


State 77

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   20                 | INCREMENT • unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 120
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression  go to state 87
    postfix_expression  go to state 88
    unary_expression    go to state 121
    unary_operator      go to state 90


State 78

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    5                   | LEFT_PARENTHESES • expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   13                   | LEFT_PARENTHESES • type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   14                   | LEFT_PARENTHESES • type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   32                | LEFT_PARENTHESES • type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   78 expression: • assignment_expression
   79           | • expression COMMA assignment_expression
   98 type_specifier: • VOIDTYPE
   99               | • CHARTYPE
  100               | • SHORT
  101               | • INTTYPE
  102               | • LONG
  103               | • DOUBLE
  104               | • SIGNED
  105               | • UNSIGNED
  106               | • BOOL
  107               | • COMPLEX
  108               | • IMAGINARY
  109               | • enum_specifier
  110 specifier_qualifier_list: • type_specifier specifier_qualifier_list_opt
  111                         | • type_qualifier specifier_qualifier_list_opt
  114 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  115               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  116               | • ENUM IDENTIFIER
  123 type_qualifier: • CONST
  124               | • RESTRICT
  125               | • VOLATILE
  158 type_name: • specifier_qualifier_list

    CHARTYPE            shift, and go to state 2
    CONST               shift, and go to state 3
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    INTTYPE             shift, and go to state 8
    LONG                shift, and go to state 9
    RESTRICT            shift, and go to state 11
    SHORT               shift, and go to state 12
    SIGNED              shift, and go to state 13
    SIZEOF              shift, and go to state 72
    UNSIGNED            shift, and go to state 15
    VOIDTYPE            shift, and go to state 16
    VOLATILE            shift, and go to state 17
    BOOL                shift, and go to state 18
    COMPLEX             shift, and go to state 19
    IMAGINARY           shift, and go to state 20
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 122
    expression                 go to state 123
    type_specifier             go to state 124
    specifier_qualifier_list   go to state 125
    enum_specifier             go to state 25
    type_qualifier             go to state 126
    type_name                  go to state 127


State 79

  160 initialiser: LEFT_CURLY_BRACKET • initialiser_list RIGHT_CURLY_BRACKET
  161            | LEFT_CURLY_BRACKET • initialiser_list COMMA RIGHT_CURLY_BRACKET
  162 initialiser_list: • designation_opt initialiser
  163                 | • initialiser_list COMMA designation_opt initialiser
  164 designation_opt: • designation
  165                | ε •  [SIZEOF, IDENTIFIER, INTEGER_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, INCREMENT, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, DECREMENT, BITWISE_AND]
  166 designation: • designator_list ASSIGNMENT
  167 designator_list: • designator
  168                | • designator_list designator
  169 designator: • LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET
  170           | • DOT IDENTIFIER

    LEFT_SQUARE_BRACKET  shift, and go to state 128
    DOT                  shift, and go to state 129

    $default  reduce using rule 165 (designation_opt)

    initialiser_list  go to state 130
    designation_opt   go to state 131
    designation       go to state 132
    designator_list   go to state 133
    designator        go to state 134


State 80

   26 unary_operator: ASTERISK •

    $default  reduce using rule 26 (unary_operator)


State 81

   27 unary_operator: PLUS •

    $default  reduce using rule 27 (unary_operator)


State 82

   28 unary_operator: MINUS •

    $default  reduce using rule 28 (unary_operator)


State 83

   29 unary_operator: TILDE •

    $default  reduce using rule 29 (unary_operator)


State 84

   30 unary_operator: EXCLAMATION •

    $default  reduce using rule 30 (unary_operator)


State 85

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   21                 | DECREMENT • unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 120
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression  go to state 87
    postfix_expression  go to state 88
    unary_expression    go to state 135
    unary_operator      go to state 90


State 86

   25 unary_operator: BITWISE_AND •

    $default  reduce using rule 25 (unary_operator)


State 87

    6 postfix_expression: primary_expression •

    $default  reduce using rule 6 (postfix_expression)


State 88

    7 postfix_expression: postfix_expression • LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | postfix_expression • LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | postfix_expression • DOT IDENTIFIER
   10                   | postfix_expression • ARROW IDENTIFIER
   11                   | postfix_expression • INCREMENT
   12                   | postfix_expression • DECREMENT
   19 unary_expression: postfix_expression •  [SLASH, QUESTION_MARK, ASSIGNMENT, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, MODULO, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, ASTERISK_ASSIGNMENT, SLASH_ASSIGNMENT, MODULO_ASSIGNMENT, PLUS_ASSIGNMENT, MINUS_ASSIGNMENT, LEFT_SHIFT_ASSIGNMENT, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, RIGHT_SHIFT_ASSIGNMENT, NOT_EQUALS, BITWISE_AND_ASSIGNMENT, BITWISE_OR_ASSIGNMENT, BITWISE_XOR_ASSIGNMENT]

    LEFT_SQUARE_BRACKET  shift, and go to state 136
    INCREMENT            shift, and go to state 137
    LEFT_PARENTHESES     shift, and go to state 138
    DOT                  shift, and go to state 139
    ARROW                shift, and go to state 140
    DECREMENT            shift, and go to state 141

    $default  reduce using rule 19 (unary_expression)


State 89

   31 cast_expression: unary_expression •  [SLASH, QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, MODULO, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]
   66 assignment_expression: unary_expression • assignment_operator assignment_expression
   67 assignment_operator: • ASSIGNMENT
   68                    | • ASTERISK_ASSIGNMENT
   69                    | • SLASH_ASSIGNMENT
   70                    | • MODULO_ASSIGNMENT
   71                    | • PLUS_ASSIGNMENT
   72                    | • MINUS_ASSIGNMENT
   73                    | • LEFT_SHIFT_ASSIGNMENT
   74                    | • RIGHT_SHIFT_ASSIGNMENT
   75                    | • BITWISE_AND_ASSIGNMENT
   76                    | • BITWISE_XOR_ASSIGNMENT
   77                    | • BITWISE_OR_ASSIGNMENT

    ASSIGNMENT              shift, and go to state 142
    ASTERISK_ASSIGNMENT     shift, and go to state 143
    SLASH_ASSIGNMENT        shift, and go to state 144
    MODULO_ASSIGNMENT       shift, and go to state 145
    PLUS_ASSIGNMENT         shift, and go to state 146
    MINUS_ASSIGNMENT        shift, and go to state 147
    LEFT_SHIFT_ASSIGNMENT   shift, and go to state 148
    RIGHT_SHIFT_ASSIGNMENT  shift, and go to state 149
    BITWISE_AND_ASSIGNMENT  shift, and go to state 150
    BITWISE_OR_ASSIGNMENT   shift, and go to state 151
    BITWISE_XOR_ASSIGNMENT  shift, and go to state 152

    $default  reduce using rule 31 (cast_expression)

    assignment_operator  go to state 153


State 90

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   22                 | unary_operator • cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression  go to state 87
    postfix_expression  go to state 88
    unary_expression    go to state 154
    unary_operator      go to state 90
    cast_expression     go to state 155


State 91

   33 multiplicative_expression: cast_expression •

    $default  reduce using rule 33 (multiplicative_expression)


State 92

   34 multiplicative_expression: multiplicative_expression • ASTERISK cast_expression
   35                          | multiplicative_expression • SLASH cast_expression
   36                          | multiplicative_expression • MODULO cast_expression
   37 additive_expression: multiplicative_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, PLUS, MINUS, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    SLASH     shift, and go to state 156
    ASTERISK  shift, and go to state 157
    MODULO    shift, and go to state 158

    $default  reduce using rule 37 (additive_expression)


State 93

   38 additive_expression: additive_expression • PLUS multiplicative_expression
   39                    | additive_expression • MINUS multiplicative_expression
   40 shift_expression: additive_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    PLUS   shift, and go to state 159
    MINUS  shift, and go to state 160

    $default  reduce using rule 40 (shift_expression)


State 94

   41 shift_expression: shift_expression • LEFT_SHIFT additive_expression
   42                 | shift_expression • RIGHT_SHIFT additive_expression
   43 relational_expression: shift_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LEFT_SHIFT   shift, and go to state 161
    RIGHT_SHIFT  shift, and go to state 162

    $default  reduce using rule 43 (relational_expression)


State 95

   44 relational_expression: relational_expression • LESS_THAN shift_expression
   45                      | relational_expression • GREATER_THAN shift_expression
   46                      | relational_expression • LESS_EQUAL_THAN shift_expression
   47                      | relational_expression • GREATER_EQUAL_THAN shift_expression
   48 equality_expression: relational_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LESS_THAN           shift, and go to state 163
    GREATER_THAN        shift, and go to state 164
    LESS_EQUAL_THAN     shift, and go to state 165
    GREATER_EQUAL_THAN  shift, and go to state 166

    $default  reduce using rule 48 (equality_expression)


State 96

   49 equality_expression: equality_expression • EQUALS relational_expression
   50                    | equality_expression • NOT_EQUALS relational_expression
   51 AND_expression: equality_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR]

    EQUALS      shift, and go to state 167
    NOT_EQUALS  shift, and go to state 168

    $default  reduce using rule 51 (AND_expression)


State 97

   52 AND_expression: AND_expression • BITWISE_AND equality_expression
   53 exclusive_OR_expression: AND_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR]

    BITWISE_AND  shift, and go to state 169

    $default  reduce using rule 53 (exclusive_OR_expression)


State 98

   54 exclusive_OR_expression: exclusive_OR_expression • BITWISE_XOR AND_expression
   55 inclusive_OR_expression: exclusive_OR_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_OR, LOGICAL_AND, LOGICAL_OR]

    BITWISE_XOR  shift, and go to state 170

    $default  reduce using rule 55 (inclusive_OR_expression)


State 99

   56 inclusive_OR_expression: inclusive_OR_expression • BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: inclusive_OR_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, LOGICAL_AND, LOGICAL_OR]

    BITWISE_OR  shift, and go to state 171

    $default  reduce using rule 59 (logical_AND_expression)


State 100

   60 logical_AND_expression: logical_AND_expression • LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: logical_AND_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, LOGICAL_OR]

    LOGICAL_AND  shift, and go to state 172

    $default  reduce using rule 61 (logical_OR_expression)


State 101

   58 N: ε •  [QUESTION_MARK]
   62 logical_OR_expression: logical_OR_expression • LOGICAL_OR M logical_AND_expression
   63 conditional_expression: logical_OR_expression •  [COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES]
   64                       | logical_OR_expression • N QUESTION_MARK M expression N COLON M conditional_expression

    LOGICAL_OR  shift, and go to state 173

    QUESTION_MARK  reduce using rule 58 (N)
    $default       reduce using rule 63 (conditional_expression)

    N  go to state 174


State 102

   65 assignment_expression: conditional_expression •

    $default  reduce using rule 65 (assignment_expression)


State 103

  159 initialiser: assignment_expression •

    $default  reduce using rule 159 (initialiser)


State 104

   93 init_declarator: declarator ASSIGNMENT initialiser •

    $default  reduce using rule 93 (init_declarator)


State 105

  206 function_definition: declaration_specifiers declarator declaration_list_opt change_scope • LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 175


State 106

  210 declaration_list: declaration_list declaration •

    $default  reduce using rule 210 (declaration_list)


State 107

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
  123 type_qualifier: • CONST
  124               | • RESTRICT
  125               | • VOLATILE
  136 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET STATIC • type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  137                  | direct_declarator LEFT_SQUARE_BRACKET STATIC • assignment_expression RIGHT_SQUARE_BRACKET
  148 type_qualifier_list: • type_qualifier
  149                    | • type_qualifier_list type_qualifier

    CONST               shift, and go to state 3
    RESTRICT            shift, and go to state 11
    SIZEOF              shift, and go to state 72
    VOLATILE            shift, and go to state 17
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 176
    type_qualifier             go to state 51
    type_qualifier_list        go to state 177


State 108

  135 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 135 (direct_declarator)


State 109

   26 unary_operator: ASTERISK •  [SIZEOF, IDENTIFIER, INTEGER_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, INCREMENT, LEFT_PARENTHESES, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, DECREMENT, BITWISE_AND]
  140 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET ASTERISK • RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 178

    $default  reduce using rule 26 (unary_operator)


State 110

  134 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET assignment_expression • RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 179


State 111

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
  123 type_qualifier: • CONST
  124               | • RESTRICT
  125               | • VOLATILE
  132 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list • assignment_expression RIGHT_SQUARE_BRACKET
  133                  | direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list • RIGHT_SQUARE_BRACKET
  138                  | direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list • STATIC assignment_expression RIGHT_SQUARE_BRACKET
  139                  | direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list • ASTERISK RIGHT_SQUARE_BRACKET
  149 type_qualifier_list: type_qualifier_list • type_qualifier

    CONST                 shift, and go to state 3
    RESTRICT              shift, and go to state 11
    SIZEOF                shift, and go to state 72
    STATIC                shift, and go to state 180
    VOLATILE              shift, and go to state 17
    IDENTIFIER            shift, and go to state 73
    INTEGER_CONSTANT      shift, and go to state 74
    CHARACTER_CONSTANT    shift, and go to state 75
    STRING_LITERAL        shift, and go to state 76
    INCREMENT             shift, and go to state 77
    RIGHT_SQUARE_BRACKET  shift, and go to state 181
    LEFT_PARENTHESES      shift, and go to state 78
    ASTERISK              shift, and go to state 182
    PLUS                  shift, and go to state 81
    MINUS                 shift, and go to state 82
    TILDE                 shift, and go to state 83
    EXCLAMATION           shift, and go to state 84
    DECREMENT             shift, and go to state 85
    BITWISE_AND           shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 183
    type_qualifier             go to state 69


State 112

  156 identifier_list: IDENTIFIER •

    $default  reduce using rule 156 (identifier_list)


State 113

   84 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   85                       | • type_specifier declaration_specifiers_opt
   86                       | • type_qualifier declaration_specifiers_opt
   87                       | • function_specifier declaration_specifiers_opt
   94 storage_class_specifier: • EXTERN
   95                        | • STATIC
   96                        | • AUTO
   97                        | • REGISTER
   98 type_specifier: • VOIDTYPE
   99               | • CHARTYPE
  100               | • SHORT
  101               | • INTTYPE
  102               | • LONG
  103               | • DOUBLE
  104               | • SIGNED
  105               | • UNSIGNED
  106               | • BOOL
  107               | • COMPLEX
  108               | • IMAGINARY
  109               | • enum_specifier
  114 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  115               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  116               | • ENUM IDENTIFIER
  123 type_qualifier: • CONST
  124               | • RESTRICT
  125               | • VOLATILE
  126 function_specifier: • INLINE
  141 direct_declarator: direct_declarator LEFT_PARENTHESES change_scope • parameter_type_list RIGHT_PARENTHESES
  143                  | direct_declarator LEFT_PARENTHESES change_scope • RIGHT_PARENTHESES
  150 parameter_type_list: • parameter_list
  151                    | • parameter_list COMMA ELLIPSIS
  152 parameter_list: • parameter_declaration
  153               | • parameter_list COMMA parameter_declaration
  154 parameter_declaration: • declaration_specifiers declarator
  155                      | • declaration_specifiers

    AUTO               shift, and go to state 1
    CHARTYPE           shift, and go to state 2
    CONST              shift, and go to state 3
    DOUBLE             shift, and go to state 4
    ENUM               shift, and go to state 5
    EXTERN             shift, and go to state 6
    INLINE             shift, and go to state 7
    INTTYPE            shift, and go to state 8
    LONG               shift, and go to state 9
    REGISTER           shift, and go to state 10
    RESTRICT           shift, and go to state 11
    SHORT              shift, and go to state 12
    SIGNED             shift, and go to state 13
    STATIC             shift, and go to state 14
    UNSIGNED           shift, and go to state 15
    VOIDTYPE           shift, and go to state 16
    VOLATILE           shift, and go to state 17
    BOOL               shift, and go to state 18
    COMPLEX            shift, and go to state 19
    IMAGINARY          shift, and go to state 20
    RIGHT_PARENTHESES  shift, and go to state 184

    declaration_specifiers   go to state 185
    storage_class_specifier  go to state 23
    type_specifier           go to state 24
    enum_specifier           go to state 25
    type_qualifier           go to state 26
    function_specifier       go to state 27
    parameter_type_list      go to state 186
    parameter_list           go to state 187
    parameter_declaration    go to state 188


State 114

  142 direct_declarator: direct_declarator LEFT_PARENTHESES identifier_list • RIGHT_PARENTHESES
  157 identifier_list: identifier_list • COMMA IDENTIFIER

    COMMA              shift, and go to state 189
    RIGHT_PARENTHESES  shift, and go to state 190


State 115

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   80 constant_expression: • conditional_expression
  122 enumerator: IDENTIFIER ASSIGNMENT • constant_expression

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 154
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 191
    constant_expression        go to state 192


State 116

  115 enum_specifier: ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA • RIGHT_CURLY_BRACKET
  120 enumerator_list: enumerator_list COMMA • enumerator
  121 enumerator: • IDENTIFIER
  122           | • IDENTIFIER ASSIGNMENT constant_expression

    IDENTIFIER           shift, and go to state 64
    RIGHT_CURLY_BRACKET  shift, and go to state 193

    enumerator  go to state 194


State 117

  114 enum_specifier: ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET •

    $default  reduce using rule 114 (enum_specifier)


State 118

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    5                   | LEFT_PARENTHESES • expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   13                   | LEFT_PARENTHESES • type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   14                   | LEFT_PARENTHESES • type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   24                 | SIZEOF LEFT_PARENTHESES • type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   78 expression: • assignment_expression
   79           | • expression COMMA assignment_expression
   98 type_specifier: • VOIDTYPE
   99               | • CHARTYPE
  100               | • SHORT
  101               | • INTTYPE
  102               | • LONG
  103               | • DOUBLE
  104               | • SIGNED
  105               | • UNSIGNED
  106               | • BOOL
  107               | • COMPLEX
  108               | • IMAGINARY
  109               | • enum_specifier
  110 specifier_qualifier_list: • type_specifier specifier_qualifier_list_opt
  111                         | • type_qualifier specifier_qualifier_list_opt
  114 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  115               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  116               | • ENUM IDENTIFIER
  123 type_qualifier: • CONST
  124               | • RESTRICT
  125               | • VOLATILE
  158 type_name: • specifier_qualifier_list

    CHARTYPE            shift, and go to state 2
    CONST               shift, and go to state 3
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    INTTYPE             shift, and go to state 8
    LONG                shift, and go to state 9
    RESTRICT            shift, and go to state 11
    SHORT               shift, and go to state 12
    SIGNED              shift, and go to state 13
    SIZEOF              shift, and go to state 72
    UNSIGNED            shift, and go to state 15
    VOIDTYPE            shift, and go to state 16
    VOLATILE            shift, and go to state 17
    BOOL                shift, and go to state 18
    COMPLEX             shift, and go to state 19
    IMAGINARY           shift, and go to state 20
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 122
    expression                 go to state 123
    type_specifier             go to state 124
    specifier_qualifier_list   go to state 125
    enum_specifier             go to state 25
    type_qualifier             go to state 126
    type_name                  go to state 195


State 119

   23 unary_expression: SIZEOF unary_expression •

    $default  reduce using rule 23 (unary_expression)


State 120

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    5                   | LEFT_PARENTHESES • expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   13                   | LEFT_PARENTHESES • type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   14                   | LEFT_PARENTHESES • type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   78 expression: • assignment_expression
   79           | • expression COMMA assignment_expression
   98 type_specifier: • VOIDTYPE
   99               | • CHARTYPE
  100               | • SHORT
  101               | • INTTYPE
  102               | • LONG
  103               | • DOUBLE
  104               | • SIGNED
  105               | • UNSIGNED
  106               | • BOOL
  107               | • COMPLEX
  108               | • IMAGINARY
  109               | • enum_specifier
  110 specifier_qualifier_list: • type_specifier specifier_qualifier_list_opt
  111                         | • type_qualifier specifier_qualifier_list_opt
  114 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  115               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  116               | • ENUM IDENTIFIER
  123 type_qualifier: • CONST
  124               | • RESTRICT
  125               | • VOLATILE
  158 type_name: • specifier_qualifier_list

    CHARTYPE            shift, and go to state 2
    CONST               shift, and go to state 3
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    INTTYPE             shift, and go to state 8
    LONG                shift, and go to state 9
    RESTRICT            shift, and go to state 11
    SHORT               shift, and go to state 12
    SIGNED              shift, and go to state 13
    SIZEOF              shift, and go to state 72
    UNSIGNED            shift, and go to state 15
    VOIDTYPE            shift, and go to state 16
    VOLATILE            shift, and go to state 17
    BOOL                shift, and go to state 18
    COMPLEX             shift, and go to state 19
    IMAGINARY           shift, and go to state 20
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 122
    expression                 go to state 123
    type_specifier             go to state 124
    specifier_qualifier_list   go to state 125
    enum_specifier             go to state 25
    type_qualifier             go to state 126
    type_name                  go to state 196


State 121

   20 unary_expression: INCREMENT unary_expression •

    $default  reduce using rule 20 (unary_expression)


State 122

   78 expression: assignment_expression •

    $default  reduce using rule 78 (expression)


State 123

    5 primary_expression: LEFT_PARENTHESES expression • RIGHT_PARENTHESES
   79 expression: expression • COMMA assignment_expression

    COMMA              shift, and go to state 197
    RIGHT_PARENTHESES  shift, and go to state 198


State 124

   98 type_specifier: • VOIDTYPE
   99               | • CHARTYPE
  100               | • SHORT
  101               | • INTTYPE
  102               | • LONG
  103               | • DOUBLE
  104               | • SIGNED
  105               | • UNSIGNED
  106               | • BOOL
  107               | • COMPLEX
  108               | • IMAGINARY
  109               | • enum_specifier
  110 specifier_qualifier_list: • type_specifier specifier_qualifier_list_opt
  110                         | type_specifier • specifier_qualifier_list_opt
  111                         | • type_qualifier specifier_qualifier_list_opt
  112 specifier_qualifier_list_opt: • specifier_qualifier_list
  113                             | ε •  [RIGHT_PARENTHESES]
  114 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  115               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  116               | • ENUM IDENTIFIER
  123 type_qualifier: • CONST
  124               | • RESTRICT
  125               | • VOLATILE

    CHARTYPE   shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    INTTYPE    shift, and go to state 8
    LONG       shift, and go to state 9
    RESTRICT   shift, and go to state 11
    SHORT      shift, and go to state 12
    SIGNED     shift, and go to state 13
    UNSIGNED   shift, and go to state 15
    VOIDTYPE   shift, and go to state 16
    VOLATILE   shift, and go to state 17
    BOOL       shift, and go to state 18
    COMPLEX    shift, and go to state 19
    IMAGINARY  shift, and go to state 20

    $default  reduce using rule 113 (specifier_qualifier_list_opt)

    type_specifier                go to state 124
    specifier_qualifier_list      go to state 199
    specifier_qualifier_list_opt  go to state 200
    enum_specifier                go to state 25
    type_qualifier                go to state 126


State 125

  158 type_name: specifier_qualifier_list •

    $default  reduce using rule 158 (type_name)


State 126

   98 type_specifier: • VOIDTYPE
   99               | • CHARTYPE
  100               | • SHORT
  101               | • INTTYPE
  102               | • LONG
  103               | • DOUBLE
  104               | • SIGNED
  105               | • UNSIGNED
  106               | • BOOL
  107               | • COMPLEX
  108               | • IMAGINARY
  109               | • enum_specifier
  110 specifier_qualifier_list: • type_specifier specifier_qualifier_list_opt
  111                         | • type_qualifier specifier_qualifier_list_opt
  111                         | type_qualifier • specifier_qualifier_list_opt
  112 specifier_qualifier_list_opt: • specifier_qualifier_list
  113                             | ε •  [RIGHT_PARENTHESES]
  114 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  115               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  116               | • ENUM IDENTIFIER
  123 type_qualifier: • CONST
  124               | • RESTRICT
  125               | • VOLATILE

    CHARTYPE   shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    INTTYPE    shift, and go to state 8
    LONG       shift, and go to state 9
    RESTRICT   shift, and go to state 11
    SHORT      shift, and go to state 12
    SIGNED     shift, and go to state 13
    UNSIGNED   shift, and go to state 15
    VOIDTYPE   shift, and go to state 16
    VOLATILE   shift, and go to state 17
    BOOL       shift, and go to state 18
    COMPLEX    shift, and go to state 19
    IMAGINARY  shift, and go to state 20

    $default  reduce using rule 113 (specifier_qualifier_list_opt)

    type_specifier                go to state 124
    specifier_qualifier_list      go to state 199
    specifier_qualifier_list_opt  go to state 201
    enum_specifier                go to state 25
    type_qualifier                go to state 126


State 127

   13 postfix_expression: LEFT_PARENTHESES type_name • RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | LEFT_PARENTHESES type_name • RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   32 cast_expression: LEFT_PARENTHESES type_name • RIGHT_PARENTHESES cast_expression

    RIGHT_PARENTHESES  shift, and go to state 202


State 128

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   80 constant_expression: • conditional_expression
  169 designator: LEFT_SQUARE_BRACKET • constant_expression RIGHT_SQUARE_BRACKET

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 154
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 191
    constant_expression        go to state 203


State 129

  170 designator: DOT • IDENTIFIER

    IDENTIFIER  shift, and go to state 204


State 130

  160 initialiser: LEFT_CURLY_BRACKET initialiser_list • RIGHT_CURLY_BRACKET
  161            | LEFT_CURLY_BRACKET initialiser_list • COMMA RIGHT_CURLY_BRACKET
  163 initialiser_list: initialiser_list • COMMA designation_opt initialiser

    COMMA                shift, and go to state 205
    RIGHT_CURLY_BRACKET  shift, and go to state 206


State 131

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
  159 initialiser: • assignment_expression
  160            | • LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
  161            | • LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
  162 initialiser_list: designation_opt • initialiser

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    LEFT_CURLY_BRACKET  shift, and go to state 79
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 103
    initialiser                go to state 207


State 132

  164 designation_opt: designation •

    $default  reduce using rule 164 (designation_opt)


State 133

  166 designation: designator_list • ASSIGNMENT
  168 designator_list: designator_list • designator
  169 designator: • LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET
  170           | • DOT IDENTIFIER

    LEFT_SQUARE_BRACKET  shift, and go to state 128
    ASSIGNMENT           shift, and go to state 208
    DOT                  shift, and go to state 129

    designator  go to state 209


State 134

  167 designator_list: designator •

    $default  reduce using rule 167 (designator_list)


State 135

   21 unary_expression: DECREMENT unary_expression •

    $default  reduce using rule 21 (unary_expression)


State 136

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    7                   | postfix_expression LEFT_SQUARE_BRACKET • expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   78 expression: • assignment_expression
   79           | • expression COMMA assignment_expression

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 122
    expression                 go to state 210


State 137

   11 postfix_expression: postfix_expression INCREMENT •

    $default  reduce using rule 11 (postfix_expression)


State 138

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    8                   | postfix_expression LEFT_PARENTHESES • argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   15 argument_expression_list_opt: • argument_expression_list
   16                             | ε •  [RIGHT_PARENTHESES]
   17 argument_expression_list: • assignment_expression
   18                         | • argument_expression_list COMMA assignment_expression
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    $default  reduce using rule 16 (argument_expression_list_opt)

    primary_expression            go to state 87
    postfix_expression            go to state 88
    argument_expression_list_opt  go to state 211
    argument_expression_list      go to state 212
    unary_expression              go to state 89
    unary_operator                go to state 90
    cast_expression               go to state 91
    multiplicative_expression     go to state 92
    additive_expression           go to state 93
    shift_expression              go to state 94
    relational_expression         go to state 95
    equality_expression           go to state 96
    AND_expression                go to state 97
    exclusive_OR_expression       go to state 98
    inclusive_OR_expression       go to state 99
    logical_AND_expression        go to state 100
    logical_OR_expression         go to state 101
    conditional_expression        go to state 102
    assignment_expression         go to state 213


State 139

    9 postfix_expression: postfix_expression DOT • IDENTIFIER

    IDENTIFIER  shift, and go to state 214


State 140

   10 postfix_expression: postfix_expression ARROW • IDENTIFIER

    IDENTIFIER  shift, and go to state 215


State 141

   12 postfix_expression: postfix_expression DECREMENT •

    $default  reduce using rule 12 (postfix_expression)


State 142

   67 assignment_operator: ASSIGNMENT •

    $default  reduce using rule 67 (assignment_operator)


State 143

   68 assignment_operator: ASTERISK_ASSIGNMENT •

    $default  reduce using rule 68 (assignment_operator)


State 144

   69 assignment_operator: SLASH_ASSIGNMENT •

    $default  reduce using rule 69 (assignment_operator)


State 145

   70 assignment_operator: MODULO_ASSIGNMENT •

    $default  reduce using rule 70 (assignment_operator)


State 146

   71 assignment_operator: PLUS_ASSIGNMENT •

    $default  reduce using rule 71 (assignment_operator)


State 147

   72 assignment_operator: MINUS_ASSIGNMENT •

    $default  reduce using rule 72 (assignment_operator)


State 148

   73 assignment_operator: LEFT_SHIFT_ASSIGNMENT •

    $default  reduce using rule 73 (assignment_operator)


State 149

   74 assignment_operator: RIGHT_SHIFT_ASSIGNMENT •

    $default  reduce using rule 74 (assignment_operator)


State 150

   75 assignment_operator: BITWISE_AND_ASSIGNMENT •

    $default  reduce using rule 75 (assignment_operator)


State 151

   77 assignment_operator: BITWISE_OR_ASSIGNMENT •

    $default  reduce using rule 77 (assignment_operator)


State 152

   76 assignment_operator: BITWISE_XOR_ASSIGNMENT •

    $default  reduce using rule 76 (assignment_operator)


State 153

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   66                      | unary_expression assignment_operator • assignment_expression

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 216


State 154

   31 cast_expression: unary_expression •

    $default  reduce using rule 31 (cast_expression)


State 155

   22 unary_expression: unary_operator cast_expression •

    $default  reduce using rule 22 (unary_expression)


State 156

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   35 multiplicative_expression: multiplicative_expression SLASH • cast_expression

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression  go to state 87
    postfix_expression  go to state 88
    unary_expression    go to state 154
    unary_operator      go to state 90
    cast_expression     go to state 217


State 157

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   34 multiplicative_expression: multiplicative_expression ASTERISK • cast_expression

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression  go to state 87
    postfix_expression  go to state 88
    unary_expression    go to state 154
    unary_operator      go to state 90
    cast_expression     go to state 218


State 158

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   36 multiplicative_expression: multiplicative_expression MODULO • cast_expression

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression  go to state 87
    postfix_expression  go to state 88
    unary_expression    go to state 154
    unary_operator      go to state 90
    cast_expression     go to state 219


State 159

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   38 additive_expression: additive_expression PLUS • multiplicative_expression

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 154
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 220


State 160

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   39 additive_expression: additive_expression MINUS • multiplicative_expression

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 154
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 221


State 161

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   41 shift_expression: shift_expression LEFT_SHIFT • additive_expression

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 154
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 222


State 162

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   42 shift_expression: shift_expression RIGHT_SHIFT • additive_expression

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 154
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 223


State 163

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   44 relational_expression: relational_expression LESS_THAN • shift_expression

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 154
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 224


State 164

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   45 relational_expression: relational_expression GREATER_THAN • shift_expression

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 154
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 225


State 165

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   46 relational_expression: relational_expression LESS_EQUAL_THAN • shift_expression

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 154
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 226


State 166

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   47 relational_expression: relational_expression GREATER_EQUAL_THAN • shift_expression

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 154
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 227


State 167

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   49 equality_expression: equality_expression EQUALS • relational_expression

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 154
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 228


State 168

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   50 equality_expression: equality_expression NOT_EQUALS • relational_expression

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 154
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 229


State 169

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   52 AND_expression: AND_expression BITWISE_AND • equality_expression

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 154
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 230


State 170

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   54 exclusive_OR_expression: exclusive_OR_expression BITWISE_XOR • AND_expression

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 154
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 231


State 171

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   56 inclusive_OR_expression: inclusive_OR_expression BITWISE_OR • exclusive_OR_expression

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 154
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 232


State 172

   57 M: ε •
   60 logical_AND_expression: logical_AND_expression LOGICAL_AND • M inclusive_OR_expression

    $default  reduce using rule 57 (M)

    M  go to state 233


State 173

   57 M: ε •
   62 logical_OR_expression: logical_OR_expression LOGICAL_OR • M logical_AND_expression

    $default  reduce using rule 57 (M)

    M  go to state 234


State 174

   64 conditional_expression: logical_OR_expression N • QUESTION_MARK M expression N COLON M conditional_expression

    QUESTION_MARK  shift, and go to state 235


State 175

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   78 expression: • assignment_expression
   79           | • expression COMMA assignment_expression
   81 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   84 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   85                       | • type_specifier declaration_specifiers_opt
   86                       | • type_qualifier declaration_specifiers_opt
   87                       | • function_specifier declaration_specifiers_opt
   94 storage_class_specifier: • EXTERN
   95                        | • STATIC
   96                        | • AUTO
   97                        | • REGISTER
   98 type_specifier: • VOIDTYPE
   99               | • CHARTYPE
  100               | • SHORT
  101               | • INTTYPE
  102               | • LONG
  103               | • DOUBLE
  104               | • SIGNED
  105               | • UNSIGNED
  106               | • BOOL
  107               | • COMPLEX
  108               | • IMAGINARY
  109               | • enum_specifier
  114 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  115               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  116               | • ENUM IDENTIFIER
  123 type_qualifier: • CONST
  124               | • RESTRICT
  125               | • VOLATILE
  126 function_specifier: • INLINE
  171 statement: • labeled_statement
  172          | • compound_statement
  173          | • expression_statement
  174          | • selection_statement
  175          | • iteration_statement
  176          | • jump_statement
  177 labeled_statement: • IDENTIFIER COLON statement
  178                  | • CASE constant_expression COLON statement
  179                  | • DEFAULT COLON statement
  181 compound_statement: • LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  182 block_item_list_opt: • block_item_list
  183                    | ε •  [RIGHT_CURLY_BRACKET]
  184 block_item_list: • block_item
  185                | • block_item_list M block_item
  186 block_item: • declaration
  187           | • statement
  188 expression_statement: • expression_opt SEMI_COLON
  189 expression_opt: • expression
  190               | ε •  [SEMI_COLON]
  191 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  192                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  193                    | • SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  194 iteration_statement: • WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  195                    | • DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  196                    | • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  197                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  198 jump_statement: • GOTO IDENTIFIER SEMI_COLON
  199               | • CONTINUE SEMI_COLON
  200               | • BREAK SEMI_COLON
  201               | • RETURN expression_opt SEMI_COLON
  206 function_definition: declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET • block_item_list_opt RIGHT_CURLY_BRACKET

    AUTO                shift, and go to state 1
    BREAK               shift, and go to state 236
    CASE                shift, and go to state 237
    CHARTYPE            shift, and go to state 2
    CONST               shift, and go to state 3
    CONTINUE            shift, and go to state 238
    DEFAULT             shift, and go to state 239
    DO                  shift, and go to state 240
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    EXTERN              shift, and go to state 6
    FOR                 shift, and go to state 241
    GOTO                shift, and go to state 242
    IF                  shift, and go to state 243
    INLINE              shift, and go to state 7
    INTTYPE             shift, and go to state 8
    LONG                shift, and go to state 9
    REGISTER            shift, and go to state 10
    RESTRICT            shift, and go to state 11
    RETURN              shift, and go to state 244
    SHORT               shift, and go to state 12
    SIGNED              shift, and go to state 13
    SIZEOF              shift, and go to state 72
    STATIC              shift, and go to state 14
    SWITCH              shift, and go to state 245
    UNSIGNED            shift, and go to state 15
    VOIDTYPE            shift, and go to state 16
    VOLATILE            shift, and go to state 17
    WHILE               shift, and go to state 246
    BOOL                shift, and go to state 18
    COMPLEX             shift, and go to state 19
    IMAGINARY           shift, and go to state 20
    IDENTIFIER          shift, and go to state 247
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    LEFT_CURLY_BRACKET  shift, and go to state 248
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    SEMI_COLON  reduce using rule 190 (expression_opt)
    $default    reduce using rule 183 (block_item_list_opt)

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 122
    expression                 go to state 249
    declaration                go to state 250
    declaration_specifiers     go to state 58
    storage_class_specifier    go to state 23
    type_specifier             go to state 24
    enum_specifier             go to state 25
    type_qualifier             go to state 26
    function_specifier         go to state 27
    statement                  go to state 251
    labeled_statement          go to state 252
    compound_statement         go to state 253
    block_item_list_opt        go to state 254
    block_item_list            go to state 255
    block_item                 go to state 256
    expression_statement       go to state 257
    expression_opt             go to state 258
    selection_statement        go to state 259
    iteration_statement        go to state 260
    jump_statement             go to state 261


State 176

  137 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET STATIC assignment_expression • RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 262


State 177

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
  123 type_qualifier: • CONST
  124               | • RESTRICT
  125               | • VOLATILE
  136 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list • assignment_expression RIGHT_SQUARE_BRACKET
  149 type_qualifier_list: type_qualifier_list • type_qualifier

    CONST               shift, and go to state 3
    RESTRICT            shift, and go to state 11
    SIZEOF              shift, and go to state 72
    VOLATILE            shift, and go to state 17
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 263
    type_qualifier             go to state 69


State 178

  140 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 140 (direct_declarator)


State 179

  134 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 134 (direct_declarator)


State 180

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
  138 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC • assignment_expression RIGHT_SQUARE_BRACKET

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 264


State 181

  133 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 133 (direct_declarator)


State 182

   26 unary_operator: ASTERISK •  [SIZEOF, IDENTIFIER, INTEGER_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, INCREMENT, LEFT_PARENTHESES, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, DECREMENT, BITWISE_AND]
  139 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK • RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 265

    $default  reduce using rule 26 (unary_operator)


State 183

  132 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression • RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 266


State 184

  143 direct_declarator: direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES •

    $default  reduce using rule 143 (direct_declarator)


State 185

  127 declarator: • pointer direct_declarator
  128           | • direct_declarator
  130 direct_declarator: • IDENTIFIER
  131                  | • LEFT_PARENTHESES declarator RIGHT_PARENTHESES
  132                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  133                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
  134                  | • direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
  135                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
  136                  | • direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
  137                  | • direct_declarator LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET
  138                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET
  139                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
  140                  | • direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
  141                  | • direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
  142                  | • direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
  143                  | • direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES
  146 pointer: • ASTERISK type_qualifier_list_opt
  147        | • ASTERISK type_qualifier_list_opt pointer
  154 parameter_declaration: declaration_specifiers • declarator
  155                      | declaration_specifiers •  [COMMA, RIGHT_PARENTHESES]

    IDENTIFIER        shift, and go to state 33
    LEFT_PARENTHESES  shift, and go to state 34
    ASTERISK          shift, and go to state 35

    $default  reduce using rule 155 (parameter_declaration)

    declarator         go to state 267
    direct_declarator  go to state 40
    pointer            go to state 41


State 186

  141 direct_declarator: direct_declarator LEFT_PARENTHESES change_scope parameter_type_list • RIGHT_PARENTHESES

    RIGHT_PARENTHESES  shift, and go to state 268


State 187

  150 parameter_type_list: parameter_list •  [RIGHT_PARENTHESES]
  151                    | parameter_list • COMMA ELLIPSIS
  153 parameter_list: parameter_list • COMMA parameter_declaration

    COMMA  shift, and go to state 269

    $default  reduce using rule 150 (parameter_type_list)


State 188

  152 parameter_list: parameter_declaration •

    $default  reduce using rule 152 (parameter_list)


State 189

  157 identifier_list: identifier_list COMMA • IDENTIFIER

    IDENTIFIER  shift, and go to state 270


State 190

  142 direct_declarator: direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES •

    $default  reduce using rule 142 (direct_declarator)


State 191

   80 constant_expression: conditional_expression •

    $default  reduce using rule 80 (constant_expression)


State 192

  122 enumerator: IDENTIFIER ASSIGNMENT constant_expression •

    $default  reduce using rule 122 (enumerator)


State 193

  115 enum_specifier: ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET •

    $default  reduce using rule 115 (enum_specifier)


State 194

  120 enumerator_list: enumerator_list COMMA enumerator •

    $default  reduce using rule 120 (enumerator_list)


State 195

   13 postfix_expression: LEFT_PARENTHESES type_name • RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | LEFT_PARENTHESES type_name • RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   24 unary_expression: SIZEOF LEFT_PARENTHESES type_name • RIGHT_PARENTHESES

    RIGHT_PARENTHESES  shift, and go to state 271


State 196

   13 postfix_expression: LEFT_PARENTHESES type_name • RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | LEFT_PARENTHESES type_name • RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET

    RIGHT_PARENTHESES  shift, and go to state 272


State 197

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   79 expression: expression COMMA • assignment_expression

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 273


State 198

    5 primary_expression: LEFT_PARENTHESES expression RIGHT_PARENTHESES •

    $default  reduce using rule 5 (primary_expression)


State 199

  112 specifier_qualifier_list_opt: specifier_qualifier_list •

    $default  reduce using rule 112 (specifier_qualifier_list_opt)


State 200

  110 specifier_qualifier_list: type_specifier specifier_qualifier_list_opt •

    $default  reduce using rule 110 (specifier_qualifier_list)


State 201

  111 specifier_qualifier_list: type_qualifier specifier_qualifier_list_opt •

    $default  reduce using rule 111 (specifier_qualifier_list)


State 202

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   13                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES • LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   14                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES • LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   32                | LEFT_PARENTHESES type_name RIGHT_PARENTHESES • cast_expression

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    LEFT_CURLY_BRACKET  shift, and go to state 274
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression  go to state 87
    postfix_expression  go to state 88
    unary_expression    go to state 154
    unary_operator      go to state 90
    cast_expression     go to state 275


State 203

  169 designator: LEFT_SQUARE_BRACKET constant_expression • RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 276


State 204

  170 designator: DOT IDENTIFIER •

    $default  reduce using rule 170 (designator)


State 205

  161 initialiser: LEFT_CURLY_BRACKET initialiser_list COMMA • RIGHT_CURLY_BRACKET
  163 initialiser_list: initialiser_list COMMA • designation_opt initialiser
  164 designation_opt: • designation
  165                | ε •  [SIZEOF, IDENTIFIER, INTEGER_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, INCREMENT, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, DECREMENT, BITWISE_AND]
  166 designation: • designator_list ASSIGNMENT
  167 designator_list: • designator
  168                | • designator_list designator
  169 designator: • LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET
  170           | • DOT IDENTIFIER

    LEFT_SQUARE_BRACKET  shift, and go to state 128
    RIGHT_CURLY_BRACKET  shift, and go to state 277
    DOT                  shift, and go to state 129

    $default  reduce using rule 165 (designation_opt)

    designation_opt  go to state 278
    designation      go to state 132
    designator_list  go to state 133
    designator       go to state 134


State 206

  160 initialiser: LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET •

    $default  reduce using rule 160 (initialiser)


State 207

  162 initialiser_list: designation_opt initialiser •

    $default  reduce using rule 162 (initialiser_list)


State 208

  166 designation: designator_list ASSIGNMENT •

    $default  reduce using rule 166 (designation)


State 209

  168 designator_list: designator_list designator •

    $default  reduce using rule 168 (designator_list)


State 210

    7 postfix_expression: postfix_expression LEFT_SQUARE_BRACKET expression • RIGHT_SQUARE_BRACKET
   79 expression: expression • COMMA assignment_expression

    COMMA                 shift, and go to state 197
    RIGHT_SQUARE_BRACKET  shift, and go to state 279


State 211

    8 postfix_expression: postfix_expression LEFT_PARENTHESES argument_expression_list_opt • RIGHT_PARENTHESES

    RIGHT_PARENTHESES  shift, and go to state 280


State 212

   15 argument_expression_list_opt: argument_expression_list •  [RIGHT_PARENTHESES]
   18 argument_expression_list: argument_expression_list • COMMA assignment_expression

    COMMA  shift, and go to state 281

    $default  reduce using rule 15 (argument_expression_list_opt)


State 213

   17 argument_expression_list: assignment_expression •

    $default  reduce using rule 17 (argument_expression_list)


State 214

    9 postfix_expression: postfix_expression DOT IDENTIFIER •

    $default  reduce using rule 9 (postfix_expression)


State 215

   10 postfix_expression: postfix_expression ARROW IDENTIFIER •

    $default  reduce using rule 10 (postfix_expression)


State 216

   66 assignment_expression: unary_expression assignment_operator assignment_expression •

    $default  reduce using rule 66 (assignment_expression)


State 217

   35 multiplicative_expression: multiplicative_expression SLASH cast_expression •

    $default  reduce using rule 35 (multiplicative_expression)


State 218

   34 multiplicative_expression: multiplicative_expression ASTERISK cast_expression •

    $default  reduce using rule 34 (multiplicative_expression)


State 219

   36 multiplicative_expression: multiplicative_expression MODULO cast_expression •

    $default  reduce using rule 36 (multiplicative_expression)


State 220

   34 multiplicative_expression: multiplicative_expression • ASTERISK cast_expression
   35                          | multiplicative_expression • SLASH cast_expression
   36                          | multiplicative_expression • MODULO cast_expression
   38 additive_expression: additive_expression PLUS multiplicative_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, PLUS, MINUS, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    SLASH     shift, and go to state 156
    ASTERISK  shift, and go to state 157
    MODULO    shift, and go to state 158

    $default  reduce using rule 38 (additive_expression)


State 221

   34 multiplicative_expression: multiplicative_expression • ASTERISK cast_expression
   35                          | multiplicative_expression • SLASH cast_expression
   36                          | multiplicative_expression • MODULO cast_expression
   39 additive_expression: additive_expression MINUS multiplicative_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, PLUS, MINUS, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    SLASH     shift, and go to state 156
    ASTERISK  shift, and go to state 157
    MODULO    shift, and go to state 158

    $default  reduce using rule 39 (additive_expression)


State 222

   38 additive_expression: additive_expression • PLUS multiplicative_expression
   39                    | additive_expression • MINUS multiplicative_expression
   41 shift_expression: shift_expression LEFT_SHIFT additive_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    PLUS   shift, and go to state 159
    MINUS  shift, and go to state 160

    $default  reduce using rule 41 (shift_expression)


State 223

   38 additive_expression: additive_expression • PLUS multiplicative_expression
   39                    | additive_expression • MINUS multiplicative_expression
   42 shift_expression: shift_expression RIGHT_SHIFT additive_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    PLUS   shift, and go to state 159
    MINUS  shift, and go to state 160

    $default  reduce using rule 42 (shift_expression)


State 224

   41 shift_expression: shift_expression • LEFT_SHIFT additive_expression
   42                 | shift_expression • RIGHT_SHIFT additive_expression
   44 relational_expression: relational_expression LESS_THAN shift_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LEFT_SHIFT   shift, and go to state 161
    RIGHT_SHIFT  shift, and go to state 162

    $default  reduce using rule 44 (relational_expression)


State 225

   41 shift_expression: shift_expression • LEFT_SHIFT additive_expression
   42                 | shift_expression • RIGHT_SHIFT additive_expression
   45 relational_expression: relational_expression GREATER_THAN shift_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LEFT_SHIFT   shift, and go to state 161
    RIGHT_SHIFT  shift, and go to state 162

    $default  reduce using rule 45 (relational_expression)


State 226

   41 shift_expression: shift_expression • LEFT_SHIFT additive_expression
   42                 | shift_expression • RIGHT_SHIFT additive_expression
   46 relational_expression: relational_expression LESS_EQUAL_THAN shift_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LEFT_SHIFT   shift, and go to state 161
    RIGHT_SHIFT  shift, and go to state 162

    $default  reduce using rule 46 (relational_expression)


State 227

   41 shift_expression: shift_expression • LEFT_SHIFT additive_expression
   42                 | shift_expression • RIGHT_SHIFT additive_expression
   47 relational_expression: relational_expression GREATER_EQUAL_THAN shift_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LEFT_SHIFT   shift, and go to state 161
    RIGHT_SHIFT  shift, and go to state 162

    $default  reduce using rule 47 (relational_expression)


State 228

   44 relational_expression: relational_expression • LESS_THAN shift_expression
   45                      | relational_expression • GREATER_THAN shift_expression
   46                      | relational_expression • LESS_EQUAL_THAN shift_expression
   47                      | relational_expression • GREATER_EQUAL_THAN shift_expression
   49 equality_expression: equality_expression EQUALS relational_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LESS_THAN           shift, and go to state 163
    GREATER_THAN        shift, and go to state 164
    LESS_EQUAL_THAN     shift, and go to state 165
    GREATER_EQUAL_THAN  shift, and go to state 166

    $default  reduce using rule 49 (equality_expression)


State 229

   44 relational_expression: relational_expression • LESS_THAN shift_expression
   45                      | relational_expression • GREATER_THAN shift_expression
   46                      | relational_expression • LESS_EQUAL_THAN shift_expression
   47                      | relational_expression • GREATER_EQUAL_THAN shift_expression
   50 equality_expression: equality_expression NOT_EQUALS relational_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LESS_THAN           shift, and go to state 163
    GREATER_THAN        shift, and go to state 164
    LESS_EQUAL_THAN     shift, and go to state 165
    GREATER_EQUAL_THAN  shift, and go to state 166

    $default  reduce using rule 50 (equality_expression)


State 230

   49 equality_expression: equality_expression • EQUALS relational_expression
   50                    | equality_expression • NOT_EQUALS relational_expression
   52 AND_expression: AND_expression BITWISE_AND equality_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR]

    EQUALS      shift, and go to state 167
    NOT_EQUALS  shift, and go to state 168

    $default  reduce using rule 52 (AND_expression)


State 231

   52 AND_expression: AND_expression • BITWISE_AND equality_expression
   54 exclusive_OR_expression: exclusive_OR_expression BITWISE_XOR AND_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR]

    BITWISE_AND  shift, and go to state 169

    $default  reduce using rule 54 (exclusive_OR_expression)


State 232

   54 exclusive_OR_expression: exclusive_OR_expression • BITWISE_XOR AND_expression
   56 inclusive_OR_expression: inclusive_OR_expression BITWISE_OR exclusive_OR_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_OR, LOGICAL_AND, LOGICAL_OR]

    BITWISE_XOR  shift, and go to state 170

    $default  reduce using rule 56 (inclusive_OR_expression)


State 233

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: logical_AND_expression LOGICAL_AND M • inclusive_OR_expression

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 154
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 282


State 234

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: logical_OR_expression LOGICAL_OR M • logical_AND_expression

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 154
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 283


State 235

   57 M: ε •
   64 conditional_expression: logical_OR_expression N QUESTION_MARK • M expression N COLON M conditional_expression

    $default  reduce using rule 57 (M)

    M  go to state 284


State 236

  200 jump_statement: BREAK • SEMI_COLON

    SEMI_COLON  shift, and go to state 285


State 237

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   80 constant_expression: • conditional_expression
  178 labeled_statement: CASE • constant_expression COLON statement

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 154
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 191
    constant_expression        go to state 286


State 238

  199 jump_statement: CONTINUE • SEMI_COLON

    SEMI_COLON  shift, and go to state 287


State 239

  179 labeled_statement: DEFAULT • COLON statement

    COLON  shift, and go to state 288


State 240

   57 M: ε •
  195 iteration_statement: DO • M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON

    $default  reduce using rule 57 (M)

    M  go to state 289


State 241

  196 iteration_statement: FOR • LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  197                    | FOR • LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement

    LEFT_PARENTHESES  shift, and go to state 290


State 242

  198 jump_statement: GOTO • IDENTIFIER SEMI_COLON

    IDENTIFIER  shift, and go to state 291


State 243

  191 selection_statement: IF • LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  192                    | IF • LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement

    LEFT_PARENTHESES  shift, and go to state 292


State 244

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   78 expression: • assignment_expression
   79           | • expression COMMA assignment_expression
  189 expression_opt: • expression
  190               | ε •  [SEMI_COLON]
  201 jump_statement: RETURN • expression_opt SEMI_COLON

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    $default  reduce using rule 190 (expression_opt)

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 122
    expression                 go to state 249
    expression_opt             go to state 293


State 245

  193 selection_statement: SWITCH • LEFT_PARENTHESES expression RIGHT_PARENTHESES statement

    LEFT_PARENTHESES  shift, and go to state 294


State 246

   57 M: ε •
  194 iteration_statement: WHILE • M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement

    $default  reduce using rule 57 (M)

    M  go to state 295


State 247

    1 primary_expression: IDENTIFIER •  [LEFT_SQUARE_BRACKET, INCREMENT, SLASH, QUESTION_MARK, ASSIGNMENT, COMMA, LEFT_PARENTHESES, DOT, ARROW, ASTERISK, PLUS, MINUS, MODULO, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, SEMI_COLON, ASTERISK_ASSIGNMENT, SLASH_ASSIGNMENT, MODULO_ASSIGNMENT, PLUS_ASSIGNMENT, MINUS_ASSIGNMENT, LEFT_SHIFT_ASSIGNMENT, DECREMENT, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, RIGHT_SHIFT_ASSIGNMENT, NOT_EQUALS, BITWISE_AND_ASSIGNMENT, BITWISE_OR_ASSIGNMENT, BITWISE_XOR_ASSIGNMENT]
  177 labeled_statement: IDENTIFIER • COLON statement

    COLON  shift, and go to state 296

    $default  reduce using rule 1 (primary_expression)


State 248

  180 change_block: ε •
  181 compound_statement: LEFT_CURLY_BRACKET • change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET

    $default  reduce using rule 180 (change_block)

    change_block  go to state 297


State 249

   79 expression: expression • COMMA assignment_expression
  189 expression_opt: expression •  [SEMI_COLON, RIGHT_PARENTHESES]

    COMMA  shift, and go to state 197

    $default  reduce using rule 189 (expression_opt)


State 250

  186 block_item: declaration •

    $default  reduce using rule 186 (block_item)


State 251

  187 block_item: statement •

    $default  reduce using rule 187 (block_item)


State 252

  171 statement: labeled_statement •

    $default  reduce using rule 171 (statement)


State 253

  172 statement: compound_statement •

    $default  reduce using rule 172 (statement)


State 254

  206 function_definition: declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt • RIGHT_CURLY_BRACKET

    RIGHT_CURLY_BRACKET  shift, and go to state 298


State 255

   57 M: ε •  [AUTO, BREAK, CASE, CHARTYPE, CONST, CONTINUE, DEFAULT, DO, DOUBLE, ENUM, EXTERN, FOR, GOTO, IF, INLINE, INTTYPE, LONG, REGISTER, RESTRICT, RETURN, SHORT, SIGNED, SIZEOF, STATIC, SWITCH, UNSIGNED, VOIDTYPE, VOLATILE, WHILE, BOOL, COMPLEX, IMAGINARY, IDENTIFIER, INTEGER_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, INCREMENT, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, SEMI_COLON, DECREMENT, BITWISE_AND]
  182 block_item_list_opt: block_item_list •  [RIGHT_CURLY_BRACKET]
  185 block_item_list: block_item_list • M block_item

    RIGHT_CURLY_BRACKET  reduce using rule 182 (block_item_list_opt)
    $default             reduce using rule 57 (M)

    M  go to state 299


State 256

  184 block_item_list: block_item •

    $default  reduce using rule 184 (block_item_list)


State 257

  173 statement: expression_statement •

    $default  reduce using rule 173 (statement)


State 258

  188 expression_statement: expression_opt • SEMI_COLON

    SEMI_COLON  shift, and go to state 300


State 259

  174 statement: selection_statement •

    $default  reduce using rule 174 (statement)


State 260

  175 statement: iteration_statement •

    $default  reduce using rule 175 (statement)


State 261

  176 statement: jump_statement •

    $default  reduce using rule 176 (statement)


State 262

  137 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET STATIC assignment_expression RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 137 (direct_declarator)


State 263

  136 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression • RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 301


State 264

  138 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression • RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 302


State 265

  139 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 139 (direct_declarator)


State 266

  132 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 132 (direct_declarator)


State 267

  154 parameter_declaration: declaration_specifiers declarator •

    $default  reduce using rule 154 (parameter_declaration)


State 268

  141 direct_declarator: direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES •

    $default  reduce using rule 141 (direct_declarator)


State 269

   84 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   85                       | • type_specifier declaration_specifiers_opt
   86                       | • type_qualifier declaration_specifiers_opt
   87                       | • function_specifier declaration_specifiers_opt
   94 storage_class_specifier: • EXTERN
   95                        | • STATIC
   96                        | • AUTO
   97                        | • REGISTER
   98 type_specifier: • VOIDTYPE
   99               | • CHARTYPE
  100               | • SHORT
  101               | • INTTYPE
  102               | • LONG
  103               | • DOUBLE
  104               | • SIGNED
  105               | • UNSIGNED
  106               | • BOOL
  107               | • COMPLEX
  108               | • IMAGINARY
  109               | • enum_specifier
  114 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  115               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  116               | • ENUM IDENTIFIER
  123 type_qualifier: • CONST
  124               | • RESTRICT
  125               | • VOLATILE
  126 function_specifier: • INLINE
  151 parameter_type_list: parameter_list COMMA • ELLIPSIS
  153 parameter_list: parameter_list COMMA • parameter_declaration
  154 parameter_declaration: • declaration_specifiers declarator
  155                      | • declaration_specifiers

    AUTO       shift, and go to state 1
    CHARTYPE   shift, and go to state 2
    CONST      shift, and go to state 3
    DOUBLE     shift, and go to state 4
    ENUM       shift, and go to state 5
    EXTERN     shift, and go to state 6
    INLINE     shift, and go to state 7
    INTTYPE    shift, and go to state 8
    LONG       shift, and go to state 9
    REGISTER   shift, and go to state 10
    RESTRICT   shift, and go to state 11
    SHORT      shift, and go to state 12
    SIGNED     shift, and go to state 13
    STATIC     shift, and go to state 14
    UNSIGNED   shift, and go to state 15
    VOIDTYPE   shift, and go to state 16
    VOLATILE   shift, and go to state 17
    BOOL       shift, and go to state 18
    COMPLEX    shift, and go to state 19
    IMAGINARY  shift, and go to state 20
    ELLIPSIS   shift, and go to state 303

    declaration_specifiers   go to state 185
    storage_class_specifier  go to state 23
    type_specifier           go to state 24
    enum_specifier           go to state 25
    type_qualifier           go to state 26
    function_specifier       go to state 27
    parameter_declaration    go to state 304


State 270

  157 identifier_list: identifier_list COMMA IDENTIFIER •

    $default  reduce using rule 157 (identifier_list)


State 271

   13 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES • LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES • LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   24 unary_expression: SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES •  [SLASH, QUESTION_MARK, ASSIGNMENT, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, MODULO, LEFT_SHIFT, RIGHT_SHIFT, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, ASTERISK_ASSIGNMENT, SLASH_ASSIGNMENT, MODULO_ASSIGNMENT, PLUS_ASSIGNMENT, MINUS_ASSIGNMENT, LEFT_SHIFT_ASSIGNMENT, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, RIGHT_SHIFT_ASSIGNMENT, NOT_EQUALS, BITWISE_AND_ASSIGNMENT, BITWISE_OR_ASSIGNMENT, BITWISE_XOR_ASSIGNMENT]

    LEFT_CURLY_BRACKET  shift, and go to state 274

    $default  reduce using rule 24 (unary_expression)


State 272

   13 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES • LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES • LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 274


State 273

   79 expression: expression COMMA assignment_expression •

    $default  reduce using rule 79 (expression)


State 274

   13 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET • initialiser_list RIGHT_CURLY_BRACKET
   14                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET • initialiser_list COMMA RIGHT_CURLY_BRACKET
  162 initialiser_list: • designation_opt initialiser
  163                 | • initialiser_list COMMA designation_opt initialiser
  164 designation_opt: • designation
  165                | ε •  [SIZEOF, IDENTIFIER, INTEGER_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, INCREMENT, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, DECREMENT, BITWISE_AND]
  166 designation: • designator_list ASSIGNMENT
  167 designator_list: • designator
  168                | • designator_list designator
  169 designator: • LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET
  170           | • DOT IDENTIFIER

    LEFT_SQUARE_BRACKET  shift, and go to state 128
    DOT                  shift, and go to state 129

    $default  reduce using rule 165 (designation_opt)

    initialiser_list  go to state 305
    designation_opt   go to state 131
    designation       go to state 132
    designator_list   go to state 133
    designator        go to state 134


State 275

   32 cast_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression •

    $default  reduce using rule 32 (cast_expression)


State 276

  169 designator: LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 169 (designator)


State 277

  161 initialiser: LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET •

    $default  reduce using rule 161 (initialiser)


State 278

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
  159 initialiser: • assignment_expression
  160            | • LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
  161            | • LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
  163 initialiser_list: initialiser_list COMMA designation_opt • initialiser

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    LEFT_CURLY_BRACKET  shift, and go to state 79
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 103
    initialiser                go to state 306


State 279

    7 postfix_expression: postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 7 (postfix_expression)


State 280

    8 postfix_expression: postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES •

    $default  reduce using rule 8 (postfix_expression)


State 281

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   18 argument_expression_list: argument_expression_list COMMA • assignment_expression
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 307


State 282

   56 inclusive_OR_expression: inclusive_OR_expression • BITWISE_OR exclusive_OR_expression
   60 logical_AND_expression: logical_AND_expression LOGICAL_AND M inclusive_OR_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, LOGICAL_AND, LOGICAL_OR]

    BITWISE_OR  shift, and go to state 171

    $default  reduce using rule 60 (logical_AND_expression)


State 283

   60 logical_AND_expression: logical_AND_expression • LOGICAL_AND M inclusive_OR_expression
   62 logical_OR_expression: logical_OR_expression LOGICAL_OR M logical_AND_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, LOGICAL_OR]

    LOGICAL_AND  shift, and go to state 172

    $default  reduce using rule 62 (logical_OR_expression)


State 284

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   64                       | logical_OR_expression N QUESTION_MARK M • expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   78 expression: • assignment_expression
   79           | • expression COMMA assignment_expression

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 122
    expression                 go to state 308


State 285

  200 jump_statement: BREAK SEMI_COLON •

    $default  reduce using rule 200 (jump_statement)


State 286

  178 labeled_statement: CASE constant_expression • COLON statement

    COLON  shift, and go to state 309


State 287

  199 jump_statement: CONTINUE SEMI_COLON •

    $default  reduce using rule 199 (jump_statement)


State 288

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   78 expression: • assignment_expression
   79           | • expression COMMA assignment_expression
  171 statement: • labeled_statement
  172          | • compound_statement
  173          | • expression_statement
  174          | • selection_statement
  175          | • iteration_statement
  176          | • jump_statement
  177 labeled_statement: • IDENTIFIER COLON statement
  178                  | • CASE constant_expression COLON statement
  179                  | • DEFAULT COLON statement
  179                  | DEFAULT COLON • statement
  181 compound_statement: • LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  188 expression_statement: • expression_opt SEMI_COLON
  189 expression_opt: • expression
  190               | ε •  [SEMI_COLON]
  191 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  192                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  193                    | • SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  194 iteration_statement: • WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  195                    | • DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  196                    | • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  197                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  198 jump_statement: • GOTO IDENTIFIER SEMI_COLON
  199               | • CONTINUE SEMI_COLON
  200               | • BREAK SEMI_COLON
  201               | • RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 236
    CASE                shift, and go to state 237
    CONTINUE            shift, and go to state 238
    DEFAULT             shift, and go to state 239
    DO                  shift, and go to state 240
    FOR                 shift, and go to state 241
    GOTO                shift, and go to state 242
    IF                  shift, and go to state 243
    RETURN              shift, and go to state 244
    SIZEOF              shift, and go to state 72
    SWITCH              shift, and go to state 245
    WHILE               shift, and go to state 246
    IDENTIFIER          shift, and go to state 247
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    LEFT_CURLY_BRACKET  shift, and go to state 248
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    $default  reduce using rule 190 (expression_opt)

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 122
    expression                 go to state 249
    statement                  go to state 310
    labeled_statement          go to state 252
    compound_statement         go to state 253
    expression_statement       go to state 257
    expression_opt             go to state 258
    selection_statement        go to state 259
    iteration_statement        go to state 260
    jump_statement             go to state 261


State 289

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   78 expression: • assignment_expression
   79           | • expression COMMA assignment_expression
  171 statement: • labeled_statement
  172          | • compound_statement
  173          | • expression_statement
  174          | • selection_statement
  175          | • iteration_statement
  176          | • jump_statement
  177 labeled_statement: • IDENTIFIER COLON statement
  178                  | • CASE constant_expression COLON statement
  179                  | • DEFAULT COLON statement
  181 compound_statement: • LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  188 expression_statement: • expression_opt SEMI_COLON
  189 expression_opt: • expression
  190               | ε •  [SEMI_COLON]
  191 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  192                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  193                    | • SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  194 iteration_statement: • WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  195                    | • DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  195                    | DO M • statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  196                    | • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  197                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  198 jump_statement: • GOTO IDENTIFIER SEMI_COLON
  199               | • CONTINUE SEMI_COLON
  200               | • BREAK SEMI_COLON
  201               | • RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 236
    CASE                shift, and go to state 237
    CONTINUE            shift, and go to state 238
    DEFAULT             shift, and go to state 239
    DO                  shift, and go to state 240
    FOR                 shift, and go to state 241
    GOTO                shift, and go to state 242
    IF                  shift, and go to state 243
    RETURN              shift, and go to state 244
    SIZEOF              shift, and go to state 72
    SWITCH              shift, and go to state 245
    WHILE               shift, and go to state 246
    IDENTIFIER          shift, and go to state 247
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    LEFT_CURLY_BRACKET  shift, and go to state 248
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    $default  reduce using rule 190 (expression_opt)

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 122
    expression                 go to state 249
    statement                  go to state 311
    labeled_statement          go to state 252
    compound_statement         go to state 253
    expression_statement       go to state 257
    expression_opt             go to state 258
    selection_statement        go to state 259
    iteration_statement        go to state 260
    jump_statement             go to state 261


State 290

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   78 expression: • assignment_expression
   79           | • expression COMMA assignment_expression
   81 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   84 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   85                       | • type_specifier declaration_specifiers_opt
   86                       | • type_qualifier declaration_specifiers_opt
   87                       | • function_specifier declaration_specifiers_opt
   94 storage_class_specifier: • EXTERN
   95                        | • STATIC
   96                        | • AUTO
   97                        | • REGISTER
   98 type_specifier: • VOIDTYPE
   99               | • CHARTYPE
  100               | • SHORT
  101               | • INTTYPE
  102               | • LONG
  103               | • DOUBLE
  104               | • SIGNED
  105               | • UNSIGNED
  106               | • BOOL
  107               | • COMPLEX
  108               | • IMAGINARY
  109               | • enum_specifier
  114 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  115               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  116               | • ENUM IDENTIFIER
  123 type_qualifier: • CONST
  124               | • RESTRICT
  125               | • VOLATILE
  126 function_specifier: • INLINE
  189 expression_opt: • expression
  190               | ε •  [SEMI_COLON]
  196 iteration_statement: FOR LEFT_PARENTHESES • expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  197                    | FOR LEFT_PARENTHESES • declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement

    AUTO                shift, and go to state 1
    CHARTYPE            shift, and go to state 2
    CONST               shift, and go to state 3
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    EXTERN              shift, and go to state 6
    INLINE              shift, and go to state 7
    INTTYPE             shift, and go to state 8
    LONG                shift, and go to state 9
    REGISTER            shift, and go to state 10
    RESTRICT            shift, and go to state 11
    SHORT               shift, and go to state 12
    SIGNED              shift, and go to state 13
    SIZEOF              shift, and go to state 72
    STATIC              shift, and go to state 14
    UNSIGNED            shift, and go to state 15
    VOIDTYPE            shift, and go to state 16
    VOLATILE            shift, and go to state 17
    BOOL                shift, and go to state 18
    COMPLEX             shift, and go to state 19
    IMAGINARY           shift, and go to state 20
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    $default  reduce using rule 190 (expression_opt)

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 122
    expression                 go to state 249
    declaration                go to state 312
    declaration_specifiers     go to state 58
    storage_class_specifier    go to state 23
    type_specifier             go to state 24
    enum_specifier             go to state 25
    type_qualifier             go to state 26
    function_specifier         go to state 27
    expression_opt             go to state 313


State 291

  198 jump_statement: GOTO IDENTIFIER • SEMI_COLON

    SEMI_COLON  shift, and go to state 314


State 292

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   78 expression: • assignment_expression
   79           | • expression COMMA assignment_expression
  191 selection_statement: IF LEFT_PARENTHESES • expression RIGHT_PARENTHESES M statement N
  192                    | IF LEFT_PARENTHESES • expression RIGHT_PARENTHESES M statement N ELSE M statement

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 122
    expression                 go to state 315


State 293

  201 jump_statement: RETURN expression_opt • SEMI_COLON

    SEMI_COLON  shift, and go to state 316


State 294

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   78 expression: • assignment_expression
   79           | • expression COMMA assignment_expression
  193 selection_statement: SWITCH LEFT_PARENTHESES • expression RIGHT_PARENTHESES statement

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 122
    expression                 go to state 317


State 295

  194 iteration_statement: WHILE M • LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement

    LEFT_PARENTHESES  shift, and go to state 318


State 296

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   78 expression: • assignment_expression
   79           | • expression COMMA assignment_expression
  171 statement: • labeled_statement
  172          | • compound_statement
  173          | • expression_statement
  174          | • selection_statement
  175          | • iteration_statement
  176          | • jump_statement
  177 labeled_statement: • IDENTIFIER COLON statement
  177                  | IDENTIFIER COLON • statement
  178                  | • CASE constant_expression COLON statement
  179                  | • DEFAULT COLON statement
  181 compound_statement: • LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  188 expression_statement: • expression_opt SEMI_COLON
  189 expression_opt: • expression
  190               | ε •  [SEMI_COLON]
  191 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  192                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  193                    | • SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  194 iteration_statement: • WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  195                    | • DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  196                    | • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  197                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  198 jump_statement: • GOTO IDENTIFIER SEMI_COLON
  199               | • CONTINUE SEMI_COLON
  200               | • BREAK SEMI_COLON
  201               | • RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 236
    CASE                shift, and go to state 237
    CONTINUE            shift, and go to state 238
    DEFAULT             shift, and go to state 239
    DO                  shift, and go to state 240
    FOR                 shift, and go to state 241
    GOTO                shift, and go to state 242
    IF                  shift, and go to state 243
    RETURN              shift, and go to state 244
    SIZEOF              shift, and go to state 72
    SWITCH              shift, and go to state 245
    WHILE               shift, and go to state 246
    IDENTIFIER          shift, and go to state 247
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    LEFT_CURLY_BRACKET  shift, and go to state 248
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    $default  reduce using rule 190 (expression_opt)

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 122
    expression                 go to state 249
    statement                  go to state 319
    labeled_statement          go to state 252
    compound_statement         go to state 253
    expression_statement       go to state 257
    expression_opt             go to state 258
    selection_statement        go to state 259
    iteration_statement        go to state 260
    jump_statement             go to state 261


State 297

  129 change_scope: ε •
  181 compound_statement: LEFT_CURLY_BRACKET change_block • change_scope block_item_list_opt RIGHT_CURLY_BRACKET

    $default  reduce using rule 129 (change_scope)

    change_scope  go to state 320


State 298

  206 function_definition: declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET •

    $default  reduce using rule 206 (function_definition)


State 299

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   78 expression: • assignment_expression
   79           | • expression COMMA assignment_expression
   81 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   84 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   85                       | • type_specifier declaration_specifiers_opt
   86                       | • type_qualifier declaration_specifiers_opt
   87                       | • function_specifier declaration_specifiers_opt
   94 storage_class_specifier: • EXTERN
   95                        | • STATIC
   96                        | • AUTO
   97                        | • REGISTER
   98 type_specifier: • VOIDTYPE
   99               | • CHARTYPE
  100               | • SHORT
  101               | • INTTYPE
  102               | • LONG
  103               | • DOUBLE
  104               | • SIGNED
  105               | • UNSIGNED
  106               | • BOOL
  107               | • COMPLEX
  108               | • IMAGINARY
  109               | • enum_specifier
  114 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  115               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  116               | • ENUM IDENTIFIER
  123 type_qualifier: • CONST
  124               | • RESTRICT
  125               | • VOLATILE
  126 function_specifier: • INLINE
  171 statement: • labeled_statement
  172          | • compound_statement
  173          | • expression_statement
  174          | • selection_statement
  175          | • iteration_statement
  176          | • jump_statement
  177 labeled_statement: • IDENTIFIER COLON statement
  178                  | • CASE constant_expression COLON statement
  179                  | • DEFAULT COLON statement
  181 compound_statement: • LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  185 block_item_list: block_item_list M • block_item
  186 block_item: • declaration
  187           | • statement
  188 expression_statement: • expression_opt SEMI_COLON
  189 expression_opt: • expression
  190               | ε •  [SEMI_COLON]
  191 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  192                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  193                    | • SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  194 iteration_statement: • WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  195                    | • DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  196                    | • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  197                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  198 jump_statement: • GOTO IDENTIFIER SEMI_COLON
  199               | • CONTINUE SEMI_COLON
  200               | • BREAK SEMI_COLON
  201               | • RETURN expression_opt SEMI_COLON

    AUTO                shift, and go to state 1
    BREAK               shift, and go to state 236
    CASE                shift, and go to state 237
    CHARTYPE            shift, and go to state 2
    CONST               shift, and go to state 3
    CONTINUE            shift, and go to state 238
    DEFAULT             shift, and go to state 239
    DO                  shift, and go to state 240
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    EXTERN              shift, and go to state 6
    FOR                 shift, and go to state 241
    GOTO                shift, and go to state 242
    IF                  shift, and go to state 243
    INLINE              shift, and go to state 7
    INTTYPE             shift, and go to state 8
    LONG                shift, and go to state 9
    REGISTER            shift, and go to state 10
    RESTRICT            shift, and go to state 11
    RETURN              shift, and go to state 244
    SHORT               shift, and go to state 12
    SIGNED              shift, and go to state 13
    SIZEOF              shift, and go to state 72
    STATIC              shift, and go to state 14
    SWITCH              shift, and go to state 245
    UNSIGNED            shift, and go to state 15
    VOIDTYPE            shift, and go to state 16
    VOLATILE            shift, and go to state 17
    WHILE               shift, and go to state 246
    BOOL                shift, and go to state 18
    COMPLEX             shift, and go to state 19
    IMAGINARY           shift, and go to state 20
    IDENTIFIER          shift, and go to state 247
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    LEFT_CURLY_BRACKET  shift, and go to state 248
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    $default  reduce using rule 190 (expression_opt)

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 122
    expression                 go to state 249
    declaration                go to state 250
    declaration_specifiers     go to state 58
    storage_class_specifier    go to state 23
    type_specifier             go to state 24
    enum_specifier             go to state 25
    type_qualifier             go to state 26
    function_specifier         go to state 27
    statement                  go to state 251
    labeled_statement          go to state 252
    compound_statement         go to state 253
    block_item                 go to state 321
    expression_statement       go to state 257
    expression_opt             go to state 258
    selection_statement        go to state 259
    iteration_statement        go to state 260
    jump_statement             go to state 261


State 300

  188 expression_statement: expression_opt SEMI_COLON •

    $default  reduce using rule 188 (expression_statement)


State 301

  136 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET STATIC type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 136 (direct_declarator)


State 302

  138 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list STATIC assignment_expression RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 138 (direct_declarator)


State 303

  151 parameter_type_list: parameter_list COMMA ELLIPSIS •

    $default  reduce using rule 151 (parameter_type_list)


State 304

  153 parameter_list: parameter_list COMMA parameter_declaration •

    $default  reduce using rule 153 (parameter_list)


State 305

   13 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list • RIGHT_CURLY_BRACKET
   14                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list • COMMA RIGHT_CURLY_BRACKET
  163 initialiser_list: initialiser_list • COMMA designation_opt initialiser

    COMMA                shift, and go to state 322
    RIGHT_CURLY_BRACKET  shift, and go to state 323


State 306

  163 initialiser_list: initialiser_list COMMA designation_opt initialiser •

    $default  reduce using rule 163 (initialiser_list)


State 307

   18 argument_expression_list: argument_expression_list COMMA assignment_expression •

    $default  reduce using rule 18 (argument_expression_list)


State 308

   58 N: ε •  [COLON]
   64 conditional_expression: logical_OR_expression N QUESTION_MARK M expression • N COLON M conditional_expression
   79 expression: expression • COMMA assignment_expression

    COMMA  shift, and go to state 197

    $default  reduce using rule 58 (N)

    N  go to state 324


State 309

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   78 expression: • assignment_expression
   79           | • expression COMMA assignment_expression
  171 statement: • labeled_statement
  172          | • compound_statement
  173          | • expression_statement
  174          | • selection_statement
  175          | • iteration_statement
  176          | • jump_statement
  177 labeled_statement: • IDENTIFIER COLON statement
  178                  | • CASE constant_expression COLON statement
  178                  | CASE constant_expression COLON • statement
  179                  | • DEFAULT COLON statement
  181 compound_statement: • LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  188 expression_statement: • expression_opt SEMI_COLON
  189 expression_opt: • expression
  190               | ε •  [SEMI_COLON]
  191 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  192                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  193                    | • SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  194 iteration_statement: • WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  195                    | • DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  196                    | • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  197                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  198 jump_statement: • GOTO IDENTIFIER SEMI_COLON
  199               | • CONTINUE SEMI_COLON
  200               | • BREAK SEMI_COLON
  201               | • RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 236
    CASE                shift, and go to state 237
    CONTINUE            shift, and go to state 238
    DEFAULT             shift, and go to state 239
    DO                  shift, and go to state 240
    FOR                 shift, and go to state 241
    GOTO                shift, and go to state 242
    IF                  shift, and go to state 243
    RETURN              shift, and go to state 244
    SIZEOF              shift, and go to state 72
    SWITCH              shift, and go to state 245
    WHILE               shift, and go to state 246
    IDENTIFIER          shift, and go to state 247
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    LEFT_CURLY_BRACKET  shift, and go to state 248
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    $default  reduce using rule 190 (expression_opt)

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 122
    expression                 go to state 249
    statement                  go to state 325
    labeled_statement          go to state 252
    compound_statement         go to state 253
    expression_statement       go to state 257
    expression_opt             go to state 258
    selection_statement        go to state 259
    iteration_statement        go to state 260
    jump_statement             go to state 261


State 310

  179 labeled_statement: DEFAULT COLON statement •

    $default  reduce using rule 179 (labeled_statement)


State 311

   57 M: ε •
  195 iteration_statement: DO M statement • M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON

    $default  reduce using rule 57 (M)

    M  go to state 326


State 312

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   78 expression: • assignment_expression
   79           | • expression COMMA assignment_expression
  189 expression_opt: • expression
  190               | ε •  [SEMI_COLON]
  197 iteration_statement: FOR LEFT_PARENTHESES declaration • expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    $default  reduce using rule 190 (expression_opt)

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 122
    expression                 go to state 249
    expression_opt             go to state 327


State 313

  196 iteration_statement: FOR LEFT_PARENTHESES expression_opt • SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement

    SEMI_COLON  shift, and go to state 328


State 314

  198 jump_statement: GOTO IDENTIFIER SEMI_COLON •

    $default  reduce using rule 198 (jump_statement)


State 315

   79 expression: expression • COMMA assignment_expression
  191 selection_statement: IF LEFT_PARENTHESES expression • RIGHT_PARENTHESES M statement N
  192                    | IF LEFT_PARENTHESES expression • RIGHT_PARENTHESES M statement N ELSE M statement

    COMMA              shift, and go to state 197
    RIGHT_PARENTHESES  shift, and go to state 329


State 316

  201 jump_statement: RETURN expression_opt SEMI_COLON •

    $default  reduce using rule 201 (jump_statement)


State 317

   79 expression: expression • COMMA assignment_expression
  193 selection_statement: SWITCH LEFT_PARENTHESES expression • RIGHT_PARENTHESES statement

    COMMA              shift, and go to state 197
    RIGHT_PARENTHESES  shift, and go to state 330


State 318

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   78 expression: • assignment_expression
   79           | • expression COMMA assignment_expression
  194 iteration_statement: WHILE M LEFT_PARENTHESES • expression RIGHT_PARENTHESES M statement

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 122
    expression                 go to state 331


State 319

  177 labeled_statement: IDENTIFIER COLON statement •

    $default  reduce using rule 177 (labeled_statement)


State 320

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   78 expression: • assignment_expression
   79           | • expression COMMA assignment_expression
   81 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   84 declaration_specifiers: • storage_class_specifier declaration_specifiers_opt
   85                       | • type_specifier declaration_specifiers_opt
   86                       | • type_qualifier declaration_specifiers_opt
   87                       | • function_specifier declaration_specifiers_opt
   94 storage_class_specifier: • EXTERN
   95                        | • STATIC
   96                        | • AUTO
   97                        | • REGISTER
   98 type_specifier: • VOIDTYPE
   99               | • CHARTYPE
  100               | • SHORT
  101               | • INTTYPE
  102               | • LONG
  103               | • DOUBLE
  104               | • SIGNED
  105               | • UNSIGNED
  106               | • BOOL
  107               | • COMPLEX
  108               | • IMAGINARY
  109               | • enum_specifier
  114 enum_specifier: • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list RIGHT_CURLY_BRACKET
  115               | • ENUM identifier_opt LEFT_CURLY_BRACKET enumerator_list COMMA RIGHT_CURLY_BRACKET
  116               | • ENUM IDENTIFIER
  123 type_qualifier: • CONST
  124               | • RESTRICT
  125               | • VOLATILE
  126 function_specifier: • INLINE
  171 statement: • labeled_statement
  172          | • compound_statement
  173          | • expression_statement
  174          | • selection_statement
  175          | • iteration_statement
  176          | • jump_statement
  177 labeled_statement: • IDENTIFIER COLON statement
  178                  | • CASE constant_expression COLON statement
  179                  | • DEFAULT COLON statement
  181 compound_statement: • LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  181                   | LEFT_CURLY_BRACKET change_block change_scope • block_item_list_opt RIGHT_CURLY_BRACKET
  182 block_item_list_opt: • block_item_list
  183                    | ε •  [RIGHT_CURLY_BRACKET]
  184 block_item_list: • block_item
  185                | • block_item_list M block_item
  186 block_item: • declaration
  187           | • statement
  188 expression_statement: • expression_opt SEMI_COLON
  189 expression_opt: • expression
  190               | ε •  [SEMI_COLON]
  191 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  192                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  193                    | • SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  194 iteration_statement: • WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  195                    | • DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  196                    | • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  197                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  198 jump_statement: • GOTO IDENTIFIER SEMI_COLON
  199               | • CONTINUE SEMI_COLON
  200               | • BREAK SEMI_COLON
  201               | • RETURN expression_opt SEMI_COLON

    AUTO                shift, and go to state 1
    BREAK               shift, and go to state 236
    CASE                shift, and go to state 237
    CHARTYPE            shift, and go to state 2
    CONST               shift, and go to state 3
    CONTINUE            shift, and go to state 238
    DEFAULT             shift, and go to state 239
    DO                  shift, and go to state 240
    DOUBLE              shift, and go to state 4
    ENUM                shift, and go to state 5
    EXTERN              shift, and go to state 6
    FOR                 shift, and go to state 241
    GOTO                shift, and go to state 242
    IF                  shift, and go to state 243
    INLINE              shift, and go to state 7
    INTTYPE             shift, and go to state 8
    LONG                shift, and go to state 9
    REGISTER            shift, and go to state 10
    RESTRICT            shift, and go to state 11
    RETURN              shift, and go to state 244
    SHORT               shift, and go to state 12
    SIGNED              shift, and go to state 13
    SIZEOF              shift, and go to state 72
    STATIC              shift, and go to state 14
    SWITCH              shift, and go to state 245
    UNSIGNED            shift, and go to state 15
    VOIDTYPE            shift, and go to state 16
    VOLATILE            shift, and go to state 17
    WHILE               shift, and go to state 246
    BOOL                shift, and go to state 18
    COMPLEX             shift, and go to state 19
    IMAGINARY           shift, and go to state 20
    IDENTIFIER          shift, and go to state 247
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    LEFT_CURLY_BRACKET  shift, and go to state 248
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    SEMI_COLON  reduce using rule 190 (expression_opt)
    $default    reduce using rule 183 (block_item_list_opt)

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 122
    expression                 go to state 249
    declaration                go to state 250
    declaration_specifiers     go to state 58
    storage_class_specifier    go to state 23
    type_specifier             go to state 24
    enum_specifier             go to state 25
    type_qualifier             go to state 26
    function_specifier         go to state 27
    statement                  go to state 251
    labeled_statement          go to state 252
    compound_statement         go to state 253
    block_item_list_opt        go to state 332
    block_item_list            go to state 255
    block_item                 go to state 256
    expression_statement       go to state 257
    expression_opt             go to state 258
    selection_statement        go to state 259
    iteration_statement        go to state 260
    jump_statement             go to state 261


State 321

  185 block_item_list: block_item_list M block_item •

    $default  reduce using rule 185 (block_item_list)


State 322

   14 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA • RIGHT_CURLY_BRACKET
  163 initialiser_list: initialiser_list COMMA • designation_opt initialiser
  164 designation_opt: • designation
  165                | ε •  [SIZEOF, IDENTIFIER, INTEGER_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, INCREMENT, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, DECREMENT, BITWISE_AND]
  166 designation: • designator_list ASSIGNMENT
  167 designator_list: • designator
  168                | • designator_list designator
  169 designator: • LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET
  170           | • DOT IDENTIFIER

    LEFT_SQUARE_BRACKET  shift, and go to state 128
    RIGHT_CURLY_BRACKET  shift, and go to state 333
    DOT                  shift, and go to state 129

    $default  reduce using rule 165 (designation_opt)

    designation_opt  go to state 278
    designation      go to state 132
    designator_list  go to state 133
    designator       go to state 134


State 323

   13 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET •

    $default  reduce using rule 13 (postfix_expression)


State 324

   64 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N • COLON M conditional_expression

    COLON  shift, and go to state 334


State 325

  178 labeled_statement: CASE constant_expression COLON statement •

    $default  reduce using rule 178 (labeled_statement)


State 326

  195 iteration_statement: DO M statement M • WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON

    WHILE  shift, and go to state 335


State 327

  197 iteration_statement: FOR LEFT_PARENTHESES declaration expression_opt • SEMI_COLON expression_opt RIGHT_PARENTHESES statement

    SEMI_COLON  shift, and go to state 336


State 328

   57 M: ε •
  196 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON • M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement

    $default  reduce using rule 57 (M)

    M  go to state 337


State 329

   57 M: ε •
  191 selection_statement: IF LEFT_PARENTHESES expression RIGHT_PARENTHESES • M statement N
  192                    | IF LEFT_PARENTHESES expression RIGHT_PARENTHESES • M statement N ELSE M statement

    $default  reduce using rule 57 (M)

    M  go to state 338


State 330

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   78 expression: • assignment_expression
   79           | • expression COMMA assignment_expression
  171 statement: • labeled_statement
  172          | • compound_statement
  173          | • expression_statement
  174          | • selection_statement
  175          | • iteration_statement
  176          | • jump_statement
  177 labeled_statement: • IDENTIFIER COLON statement
  178                  | • CASE constant_expression COLON statement
  179                  | • DEFAULT COLON statement
  181 compound_statement: • LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  188 expression_statement: • expression_opt SEMI_COLON
  189 expression_opt: • expression
  190               | ε •  [SEMI_COLON]
  191 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  192                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  193                    | • SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  193                    | SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES • statement
  194 iteration_statement: • WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  195                    | • DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  196                    | • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  197                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  198 jump_statement: • GOTO IDENTIFIER SEMI_COLON
  199               | • CONTINUE SEMI_COLON
  200               | • BREAK SEMI_COLON
  201               | • RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 236
    CASE                shift, and go to state 237
    CONTINUE            shift, and go to state 238
    DEFAULT             shift, and go to state 239
    DO                  shift, and go to state 240
    FOR                 shift, and go to state 241
    GOTO                shift, and go to state 242
    IF                  shift, and go to state 243
    RETURN              shift, and go to state 244
    SIZEOF              shift, and go to state 72
    SWITCH              shift, and go to state 245
    WHILE               shift, and go to state 246
    IDENTIFIER          shift, and go to state 247
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    LEFT_CURLY_BRACKET  shift, and go to state 248
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    $default  reduce using rule 190 (expression_opt)

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 122
    expression                 go to state 249
    statement                  go to state 339
    labeled_statement          go to state 252
    compound_statement         go to state 253
    expression_statement       go to state 257
    expression_opt             go to state 258
    selection_statement        go to state 259
    iteration_statement        go to state 260
    jump_statement             go to state 261


State 331

   79 expression: expression • COMMA assignment_expression
  194 iteration_statement: WHILE M LEFT_PARENTHESES expression • RIGHT_PARENTHESES M statement

    COMMA              shift, and go to state 197
    RIGHT_PARENTHESES  shift, and go to state 340


State 332

  181 compound_statement: LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt • RIGHT_CURLY_BRACKET

    RIGHT_CURLY_BRACKET  shift, and go to state 341


State 333

   14 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET •

    $default  reduce using rule 14 (postfix_expression)


State 334

   57 M: ε •
   64 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N COLON • M conditional_expression

    $default  reduce using rule 57 (M)

    M  go to state 342


State 335

  195 iteration_statement: DO M statement M WHILE • LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON

    LEFT_PARENTHESES  shift, and go to state 343


State 336

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   78 expression: • assignment_expression
   79           | • expression COMMA assignment_expression
  189 expression_opt: • expression
  190               | ε •  [RIGHT_PARENTHESES]
  197 iteration_statement: FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON • expression_opt RIGHT_PARENTHESES statement

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    $default  reduce using rule 190 (expression_opt)

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 122
    expression                 go to state 249
    expression_opt             go to state 344


State 337

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   78 expression: • assignment_expression
   79           | • expression COMMA assignment_expression
  189 expression_opt: • expression
  190               | ε •  [SEMI_COLON]
  196 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M • expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    $default  reduce using rule 190 (expression_opt)

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 122
    expression                 go to state 249
    expression_opt             go to state 345


State 338

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   78 expression: • assignment_expression
   79           | • expression COMMA assignment_expression
  171 statement: • labeled_statement
  172          | • compound_statement
  173          | • expression_statement
  174          | • selection_statement
  175          | • iteration_statement
  176          | • jump_statement
  177 labeled_statement: • IDENTIFIER COLON statement
  178                  | • CASE constant_expression COLON statement
  179                  | • DEFAULT COLON statement
  181 compound_statement: • LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  188 expression_statement: • expression_opt SEMI_COLON
  189 expression_opt: • expression
  190               | ε •  [SEMI_COLON]
  191 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  191                    | IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M • statement N
  192                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  192                    | IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M • statement N ELSE M statement
  193                    | • SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  194 iteration_statement: • WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  195                    | • DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  196                    | • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  197                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  198 jump_statement: • GOTO IDENTIFIER SEMI_COLON
  199               | • CONTINUE SEMI_COLON
  200               | • BREAK SEMI_COLON
  201               | • RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 236
    CASE                shift, and go to state 237
    CONTINUE            shift, and go to state 238
    DEFAULT             shift, and go to state 239
    DO                  shift, and go to state 240
    FOR                 shift, and go to state 241
    GOTO                shift, and go to state 242
    IF                  shift, and go to state 243
    RETURN              shift, and go to state 244
    SIZEOF              shift, and go to state 72
    SWITCH              shift, and go to state 245
    WHILE               shift, and go to state 246
    IDENTIFIER          shift, and go to state 247
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    LEFT_CURLY_BRACKET  shift, and go to state 248
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    $default  reduce using rule 190 (expression_opt)

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 122
    expression                 go to state 249
    statement                  go to state 346
    labeled_statement          go to state 252
    compound_statement         go to state 253
    expression_statement       go to state 257
    expression_opt             go to state 258
    selection_statement        go to state 259
    iteration_statement        go to state 260
    jump_statement             go to state 261


State 339

  193 selection_statement: SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement •

    $default  reduce using rule 193 (selection_statement)


State 340

   57 M: ε •
  194 iteration_statement: WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES • M statement

    $default  reduce using rule 57 (M)

    M  go to state 347


State 341

  181 compound_statement: LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET •

    $default  reduce using rule 181 (compound_statement)


State 342

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   64                       | logical_OR_expression N QUESTION_MARK M expression N COLON M • conditional_expression

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 154
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 348


State 343

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   78 expression: • assignment_expression
   79           | • expression COMMA assignment_expression
  195 iteration_statement: DO M statement M WHILE LEFT_PARENTHESES • expression RIGHT_PARENTHESES SEMI_COLON

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 122
    expression                 go to state 349


State 344

  197 iteration_statement: FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt • RIGHT_PARENTHESES statement

    RIGHT_PARENTHESES  shift, and go to state 350


State 345

  196 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt • SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement

    SEMI_COLON  shift, and go to state 351


State 346

   58 N: ε •
  191 selection_statement: IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement • N
  192                    | IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement • N ELSE M statement

    $default  reduce using rule 58 (N)

    N  go to state 352


State 347

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   78 expression: • assignment_expression
   79           | • expression COMMA assignment_expression
  171 statement: • labeled_statement
  172          | • compound_statement
  173          | • expression_statement
  174          | • selection_statement
  175          | • iteration_statement
  176          | • jump_statement
  177 labeled_statement: • IDENTIFIER COLON statement
  178                  | • CASE constant_expression COLON statement
  179                  | • DEFAULT COLON statement
  181 compound_statement: • LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  188 expression_statement: • expression_opt SEMI_COLON
  189 expression_opt: • expression
  190               | ε •  [SEMI_COLON]
  191 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  192                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  193                    | • SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  194 iteration_statement: • WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  194                    | WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M • statement
  195                    | • DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  196                    | • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  197                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  198 jump_statement: • GOTO IDENTIFIER SEMI_COLON
  199               | • CONTINUE SEMI_COLON
  200               | • BREAK SEMI_COLON
  201               | • RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 236
    CASE                shift, and go to state 237
    CONTINUE            shift, and go to state 238
    DEFAULT             shift, and go to state 239
    DO                  shift, and go to state 240
    FOR                 shift, and go to state 241
    GOTO                shift, and go to state 242
    IF                  shift, and go to state 243
    RETURN              shift, and go to state 244
    SIZEOF              shift, and go to state 72
    SWITCH              shift, and go to state 245
    WHILE               shift, and go to state 246
    IDENTIFIER          shift, and go to state 247
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    LEFT_CURLY_BRACKET  shift, and go to state 248
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    $default  reduce using rule 190 (expression_opt)

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 122
    expression                 go to state 249
    statement                  go to state 353
    labeled_statement          go to state 252
    compound_statement         go to state 253
    expression_statement       go to state 257
    expression_opt             go to state 258
    selection_statement        go to state 259
    iteration_statement        go to state 260
    jump_statement             go to state 261


State 348

   64 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression •

    $default  reduce using rule 64 (conditional_expression)


State 349

   79 expression: expression • COMMA assignment_expression
  195 iteration_statement: DO M statement M WHILE LEFT_PARENTHESES expression • RIGHT_PARENTHESES SEMI_COLON

    COMMA              shift, and go to state 197
    RIGHT_PARENTHESES  shift, and go to state 354


State 350

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   78 expression: • assignment_expression
   79           | • expression COMMA assignment_expression
  171 statement: • labeled_statement
  172          | • compound_statement
  173          | • expression_statement
  174          | • selection_statement
  175          | • iteration_statement
  176          | • jump_statement
  177 labeled_statement: • IDENTIFIER COLON statement
  178                  | • CASE constant_expression COLON statement
  179                  | • DEFAULT COLON statement
  181 compound_statement: • LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  188 expression_statement: • expression_opt SEMI_COLON
  189 expression_opt: • expression
  190               | ε •  [SEMI_COLON]
  191 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  192                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  193                    | • SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  194 iteration_statement: • WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  195                    | • DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  196                    | • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  197                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  197                    | FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES • statement
  198 jump_statement: • GOTO IDENTIFIER SEMI_COLON
  199               | • CONTINUE SEMI_COLON
  200               | • BREAK SEMI_COLON
  201               | • RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 236
    CASE                shift, and go to state 237
    CONTINUE            shift, and go to state 238
    DEFAULT             shift, and go to state 239
    DO                  shift, and go to state 240
    FOR                 shift, and go to state 241
    GOTO                shift, and go to state 242
    IF                  shift, and go to state 243
    RETURN              shift, and go to state 244
    SIZEOF              shift, and go to state 72
    SWITCH              shift, and go to state 245
    WHILE               shift, and go to state 246
    IDENTIFIER          shift, and go to state 247
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    LEFT_CURLY_BRACKET  shift, and go to state 248
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    $default  reduce using rule 190 (expression_opt)

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 122
    expression                 go to state 249
    statement                  go to state 355
    labeled_statement          go to state 252
    compound_statement         go to state 253
    expression_statement       go to state 257
    expression_opt             go to state 258
    selection_statement        go to state 259
    iteration_statement        go to state 260
    jump_statement             go to state 261


State 351

   57 M: ε •
  196 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON • M expression_opt N RIGHT_PARENTHESES M statement

    $default  reduce using rule 57 (M)

    M  go to state 356


State 352

  191 selection_statement: IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N •  [AUTO, BREAK, CASE, CHARTYPE, CONST, CONTINUE, DEFAULT, DO, DOUBLE, ENUM, EXTERN, FOR, GOTO, IF, INLINE, INTTYPE, LONG, REGISTER, RESTRICT, RETURN, SHORT, SIGNED, SIZEOF, STATIC, SWITCH, UNSIGNED, VOIDTYPE, VOLATILE, WHILE, BOOL, COMPLEX, IMAGINARY, IDENTIFIER, INTEGER_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, INCREMENT, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, RIGHT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, SEMI_COLON, DECREMENT, BITWISE_AND]
  192                    | IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N • ELSE M statement

    ELSE  shift, and go to state 357

    $default  reduce using rule 191 (selection_statement)

    Conflict between rule 191 and token ELSE resolved as shift (%right ELSE).


State 353

  194 iteration_statement: WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement •

    $default  reduce using rule 194 (iteration_statement)


State 354

  195 iteration_statement: DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES • SEMI_COLON

    SEMI_COLON  shift, and go to state 358


State 355

  197 iteration_statement: FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement •

    $default  reduce using rule 197 (iteration_statement)


State 356

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   78 expression: • assignment_expression
   79           | • expression COMMA assignment_expression
  189 expression_opt: • expression
  190               | ε •  [RIGHT_PARENTHESES]
  196 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M • expression_opt N RIGHT_PARENTHESES M statement

    SIZEOF              shift, and go to state 72
    IDENTIFIER          shift, and go to state 73
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    $default  reduce using rule 190 (expression_opt)

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 122
    expression                 go to state 249
    expression_opt             go to state 359


State 357

   57 M: ε •
  192 selection_statement: IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE • M statement

    $default  reduce using rule 57 (M)

    M  go to state 360


State 358

  195 iteration_statement: DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON •

    $default  reduce using rule 195 (iteration_statement)


State 359

   58 N: ε •
  196 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt • N RIGHT_PARENTHESES M statement

    $default  reduce using rule 58 (N)

    N  go to state 361


State 360

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   78 expression: • assignment_expression
   79           | • expression COMMA assignment_expression
  171 statement: • labeled_statement
  172          | • compound_statement
  173          | • expression_statement
  174          | • selection_statement
  175          | • iteration_statement
  176          | • jump_statement
  177 labeled_statement: • IDENTIFIER COLON statement
  178                  | • CASE constant_expression COLON statement
  179                  | • DEFAULT COLON statement
  181 compound_statement: • LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  188 expression_statement: • expression_opt SEMI_COLON
  189 expression_opt: • expression
  190               | ε •  [SEMI_COLON]
  191 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  192                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  192                    | IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M • statement
  193                    | • SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  194 iteration_statement: • WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  195                    | • DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  196                    | • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  197                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  198 jump_statement: • GOTO IDENTIFIER SEMI_COLON
  199               | • CONTINUE SEMI_COLON
  200               | • BREAK SEMI_COLON
  201               | • RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 236
    CASE                shift, and go to state 237
    CONTINUE            shift, and go to state 238
    DEFAULT             shift, and go to state 239
    DO                  shift, and go to state 240
    FOR                 shift, and go to state 241
    GOTO                shift, and go to state 242
    IF                  shift, and go to state 243
    RETURN              shift, and go to state 244
    SIZEOF              shift, and go to state 72
    SWITCH              shift, and go to state 245
    WHILE               shift, and go to state 246
    IDENTIFIER          shift, and go to state 247
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    LEFT_CURLY_BRACKET  shift, and go to state 248
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    $default  reduce using rule 190 (expression_opt)

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 122
    expression                 go to state 249
    statement                  go to state 362
    labeled_statement          go to state 252
    compound_statement         go to state 253
    expression_statement       go to state 257
    expression_opt             go to state 258
    selection_statement        go to state 259
    iteration_statement        go to state 260
    jump_statement             go to state 261


State 361

  196 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N • RIGHT_PARENTHESES M statement

    RIGHT_PARENTHESES  shift, and go to state 363


State 362

  192 selection_statement: IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement •

    $default  reduce using rule 192 (selection_statement)


State 363

   57 M: ε •
  196 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES • M statement

    $default  reduce using rule 57 (M)

    M  go to state 364


State 364

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression DOT IDENTIFIER
   10                   | • postfix_expression ARROW IDENTIFIER
   11                   | • postfix_expression INCREMENT
   12                   | • postfix_expression DECREMENT
   13                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   14                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   19 unary_expression: • postfix_expression
   20                 | • INCREMENT unary_expression
   21                 | • DECREMENT unary_expression
   22                 | • unary_operator cast_expression
   23                 | • SIZEOF unary_expression
   24                 | • SIZEOF LEFT_PARENTHESES type_name RIGHT_PARENTHESES
   25 unary_operator: • BITWISE_AND
   26               | • ASTERISK
   27               | • PLUS
   28               | • MINUS
   29               | • TILDE
   30               | • EXCLAMATION
   31 cast_expression: • unary_expression
   32                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   33 multiplicative_expression: • cast_expression
   34                          | • multiplicative_expression ASTERISK cast_expression
   35                          | • multiplicative_expression SLASH cast_expression
   36                          | • multiplicative_expression MODULO cast_expression
   37 additive_expression: • multiplicative_expression
   38                    | • additive_expression PLUS multiplicative_expression
   39                    | • additive_expression MINUS multiplicative_expression
   40 shift_expression: • additive_expression
   41                 | • shift_expression LEFT_SHIFT additive_expression
   42                 | • shift_expression RIGHT_SHIFT additive_expression
   43 relational_expression: • shift_expression
   44                      | • relational_expression LESS_THAN shift_expression
   45                      | • relational_expression GREATER_THAN shift_expression
   46                      | • relational_expression LESS_EQUAL_THAN shift_expression
   47                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   48 equality_expression: • relational_expression
   49                    | • equality_expression EQUALS relational_expression
   50                    | • equality_expression NOT_EQUALS relational_expression
   51 AND_expression: • equality_expression
   52               | • AND_expression BITWISE_AND equality_expression
   53 exclusive_OR_expression: • AND_expression
   54                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   55 inclusive_OR_expression: • exclusive_OR_expression
   56                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   59 logical_AND_expression: • inclusive_OR_expression
   60                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: • logical_AND_expression
   62                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   63 conditional_expression: • logical_OR_expression
   64                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   65 assignment_expression: • conditional_expression
   66                      | • unary_expression assignment_operator assignment_expression
   78 expression: • assignment_expression
   79           | • expression COMMA assignment_expression
  171 statement: • labeled_statement
  172          | • compound_statement
  173          | • expression_statement
  174          | • selection_statement
  175          | • iteration_statement
  176          | • jump_statement
  177 labeled_statement: • IDENTIFIER COLON statement
  178                  | • CASE constant_expression COLON statement
  179                  | • DEFAULT COLON statement
  181 compound_statement: • LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  188 expression_statement: • expression_opt SEMI_COLON
  189 expression_opt: • expression
  190               | ε •  [SEMI_COLON]
  191 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  192                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  193                    | • SWITCH LEFT_PARENTHESES expression RIGHT_PARENTHESES statement
  194 iteration_statement: • WHILE M LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement
  195                    | • DO M statement M WHILE LEFT_PARENTHESES expression RIGHT_PARENTHESES SEMI_COLON
  196                    | • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  196                    | FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M • statement
  197                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  198 jump_statement: • GOTO IDENTIFIER SEMI_COLON
  199               | • CONTINUE SEMI_COLON
  200               | • BREAK SEMI_COLON
  201               | • RETURN expression_opt SEMI_COLON

    BREAK               shift, and go to state 236
    CASE                shift, and go to state 237
    CONTINUE            shift, and go to state 238
    DEFAULT             shift, and go to state 239
    DO                  shift, and go to state 240
    FOR                 shift, and go to state 241
    GOTO                shift, and go to state 242
    IF                  shift, and go to state 243
    RETURN              shift, and go to state 244
    SIZEOF              shift, and go to state 72
    SWITCH              shift, and go to state 245
    WHILE               shift, and go to state 246
    IDENTIFIER          shift, and go to state 247
    INTEGER_CONSTANT    shift, and go to state 74
    CHARACTER_CONSTANT  shift, and go to state 75
    STRING_LITERAL      shift, and go to state 76
    INCREMENT           shift, and go to state 77
    LEFT_PARENTHESES    shift, and go to state 78
    LEFT_CURLY_BRACKET  shift, and go to state 248
    ASTERISK            shift, and go to state 80
    PLUS                shift, and go to state 81
    MINUS               shift, and go to state 82
    TILDE               shift, and go to state 83
    EXCLAMATION         shift, and go to state 84
    DECREMENT           shift, and go to state 85
    BITWISE_AND         shift, and go to state 86

    $default  reduce using rule 190 (expression_opt)

    primary_expression         go to state 87
    postfix_expression         go to state 88
    unary_expression           go to state 89
    unary_operator             go to state 90
    cast_expression            go to state 91
    multiplicative_expression  go to state 92
    additive_expression        go to state 93
    shift_expression           go to state 94
    relational_expression      go to state 95
    equality_expression        go to state 96
    AND_expression             go to state 97
    exclusive_OR_expression    go to state 98
    inclusive_OR_expression    go to state 99
    logical_AND_expression     go to state 100
    logical_OR_expression      go to state 101
    conditional_expression     go to state 102
    assignment_expression      go to state 122
    expression                 go to state 249
    statement                  go to state 365
    labeled_statement          go to state 252
    compound_statement         go to state 253
    expression_statement       go to state 257
    expression_opt             go to state 258
    selection_statement        go to state 259
    iteration_statement        go to state 260
    jump_statement             go to state 261


State 365

  196 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement •

    $default  reduce using rule 196 (iteration_statement)
