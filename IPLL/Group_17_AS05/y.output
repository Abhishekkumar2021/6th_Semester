Nonterminals useless in grammar

    identifier_opt
    enumerator_list
    enumerator


Terminals unused in grammar

    INVALID_TOKEN


Rules useless in grammar

  146 identifier_opt: IDENTIFIER
  147               | ε

  148 enumerator_list: enumerator
  149                | enumerator_list COMMA enumerator

  150 enumerator: IDENTIFIER
  151           | IDENTIFIER ASSIGNMENT constant_expression


Rules useless in parser due to conflicts

   88 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET


State 74 conflicts: 1 shift/reduce
State 75 conflicts: 11 reduce/reduce


Grammar

    0 $accept: translation_unit $end

    1 primary_expression: IDENTIFIER
    2                   | INTEGER_CONSTANT
    3                   | CHARACTER_CONSTANT
    4                   | STRING_LITERAL
    5                   | LEFT_PARENTHESES expression RIGHT_PARENTHESES

    6 postfix_expression: primary_expression
    7                   | postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | postfix_expression ARROW IDENTIFIER
   10                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET

   12 argument_expression_list_opt: argument_expression_list
   13                             | ε

   14 argument_expression_list: assignment_expression
   15                         | argument_expression_list COMMA assignment_expression

   16 unary_expression: postfix_expression
   17                 | unary_operator cast_expression

   18 unary_operator: BITWISE_AND
   19               | ASTERISK
   20               | PLUS
   21               | MINUS
   22               | TILDE
   23               | EXCLAMATION

   24 cast_expression: unary_expression
   25                | LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression

   26 multiplicative_expression: cast_expression
   27                          | multiplicative_expression ASTERISK cast_expression
   28                          | multiplicative_expression SLASH cast_expression
   29                          | multiplicative_expression MODULO cast_expression

   30 additive_expression: multiplicative_expression
   31                    | additive_expression PLUS multiplicative_expression
   32                    | additive_expression MINUS multiplicative_expression

   33 shift_expression: additive_expression

   34 relational_expression: shift_expression
   35                      | relational_expression LESS_THAN shift_expression
   36                      | relational_expression GREATER_THAN shift_expression
   37                      | relational_expression LESS_EQUAL_THAN shift_expression
   38                      | relational_expression GREATER_EQUAL_THAN shift_expression

   39 equality_expression: relational_expression
   40                    | equality_expression EQUALS relational_expression
   41                    | equality_expression NOT_EQUALS relational_expression

   42 AND_expression: equality_expression
   43               | AND_expression BITWISE_AND equality_expression

   44 exclusive_OR_expression: AND_expression
   45                        | exclusive_OR_expression BITWISE_XOR AND_expression

   46 inclusive_OR_expression: exclusive_OR_expression
   47                        | inclusive_OR_expression BITWISE_OR exclusive_OR_expression

   48 M: ε

   49 N: ε

   50 logical_AND_expression: inclusive_OR_expression
   51                       | logical_AND_expression LOGICAL_AND M inclusive_OR_expression

   52 logical_OR_expression: logical_AND_expression
   53                      | logical_OR_expression LOGICAL_OR M logical_AND_expression

   54 conditional_expression: logical_OR_expression
   55                       | logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression

   56 assignment_expression: conditional_expression
   57                      | unary_expression assignment_operator assignment_expression

   58 assignment_operator: ASSIGNMENT

   59 expression: assignment_expression
   60           | expression COMMA assignment_expression

   61 constant_expression: conditional_expression

   62 declaration: declaration_specifiers init_declarator_list_opt SEMI_COLON

   63 init_declarator_list_opt: init_declarator_list
   64                         | ε

   65 declaration_specifiers: type_specifier declaration_specifiers_opt
   66                       | function_specifier declaration_specifiers_opt

   67 declaration_specifiers_opt: declaration_specifiers
   68                           | ε

   69 init_declarator_list: init_declarator
   70                     | init_declarator_list COMMA init_declarator

   71 init_declarator: declarator
   72                | declarator ASSIGNMENT initialiser

   73 type_specifier: VOIDTYPE
   74               | CHARTYPE
   75               | INTTYPE

   76 specifier_qualifier_list: type_specifier specifier_qualifier_list_opt

   77 specifier_qualifier_list_opt: specifier_qualifier_list
   78                             | ε

   79 function_specifier: INLINE

   80 declarator: pointer direct_declarator
   81           | direct_declarator

   82 change_scope: ε

   83 direct_declarator: IDENTIFIER
   84                  | LEFT_PARENTHESES declarator RIGHT_PARENTHESES
   85                  | direct_declarator LEFT_SQUARE_BRACKET INTEGER_CONSTANT RIGHT_SQUARE_BRACKET
   86                  | direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
   87                  | direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
   88                  | direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
   89                  | direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
   90                  | direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
   91                  | direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES

   92 type_qualifier_list_opt: ε

   93 pointer: ASTERISK type_qualifier_list_opt
   94        | ASTERISK type_qualifier_list_opt pointer

   95 parameter_type_list: parameter_list

   96 parameter_list: parameter_declaration
   97               | parameter_list COMMA parameter_declaration

   98 parameter_declaration: declaration_specifiers declarator
   99                      | declaration_specifiers

  100 identifier_list: IDENTIFIER
  101                | identifier_list COMMA IDENTIFIER

  102 type_name: specifier_qualifier_list

  103 initialiser: assignment_expression
  104            | LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
  105            | LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET

  106 initialiser_list: designation_opt initialiser
  107                 | initialiser_list COMMA designation_opt initialiser

  108 designation_opt: designation
  109                | ε

  110 designation: designator_list ASSIGNMENT

  111 designator_list: designator
  112                | designator_list designator

  113 designator: LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET

  114 statement: labeled_statement
  115          | compound_statement
  116          | expression_statement
  117          | selection_statement
  118          | iteration_statement
  119          | jump_statement

  120 labeled_statement: IDENTIFIER COLON statement

  121 change_block: ε

  122 compound_statement: LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET

  123 block_item_list_opt: block_item_list
  124                    | ε

  125 block_item_list: block_item
  126                | block_item_list M block_item

  127 block_item: declaration
  128           | statement

  129 expression_statement: expression_opt SEMI_COLON

  130 expression_opt: expression
  131               | ε

  132 selection_statement: IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  133                    | IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement

  134 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  135                    | FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement

  136 jump_statement: RETURN expression_opt SEMI_COLON

  137 translation_unit: external_declaration
  138                 | translation_unit external_declaration

  139 external_declaration: function_definition
  140                     | declaration

  141 function_definition: declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

  142 declaration_list_opt: declaration_list
  143                     | ε

  144 declaration_list: declaration
  145                 | declaration_list declaration


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    CHARTYPE (258) 74
    ELSE (259) 133
    FOR (260) 134 135
    IF (261) 132 133
    INLINE (262) 79
    INTTYPE (263) 75
    RETURN (264) 136
    VOIDTYPE (265) 73
    IDENTIFIER <symbol> (266) 1 9 83 100 101 120
    INTEGER_CONSTANT <intVal> (267) 2 85
    CHARACTER_CONSTANT <charVal> (268) 3
    STRING_LITERAL <stringVal> (269) 4
    LEFT_SQUARE_BRACKET (270) 7 85 86 87 88 113
    SLASH (271) 28
    QUESTION_MARK (272) 55
    ASSIGNMENT (273) 58 72 110
    COMMA (274) 11 15 60 70 97 101 105 107
    RIGHT_SQUARE_BRACKET (275) 7 85 86 87 88 113
    LEFT_PARENTHESES (276) 5 8 10 11 25 84 89 90 91 132 133 134 135
    LEFT_CURLY_BRACKET (277) 10 11 104 105 122 141
    RIGHT_CURLY_BRACKET (278) 10 11 104 105 122 141
    ARROW (279) 9
    ASTERISK (280) 19 27 93 94
    PLUS (281) 20 31
    MINUS (282) 21 32
    TILDE (283) 22
    EXCLAMATION (284) 23
    MODULO (285) 29
    LESS_THAN (286) 35
    GREATER_THAN (287) 36
    LESS_EQUAL_THAN (288) 37
    GREATER_EQUAL_THAN (289) 38
    COLON (290) 55 120
    SEMI_COLON (291) 62 129 134 135 136
    RIGHT_PARENTHESES (292) 5 8 10 11 25 84 89 90 91 132 133 134 135
    BITWISE_AND (293) 18 43
    EQUALS (294) 40
    BITWISE_XOR (295) 45
    BITWISE_OR (296) 47
    LOGICAL_AND (297) 51
    LOGICAL_OR (298) 53
    NOT_EQUALS (299) 41
    INVALID_TOKEN (300)
    THEN (301)


Nonterminals, with rules where they appear

    $accept (47)
        on left: 0
    primary_expression <expression> (48)
        on left: 1 2 3 4 5
        on right: 6
    postfix_expression <array> (49)
        on left: 6 7 8 9 10 11
        on right: 7 8 9 16
    argument_expression_list_opt <parameterCount> (50)
        on left: 12 13
        on right: 8
    argument_expression_list <parameterCount> (51)
        on left: 14 15
        on right: 12 15
    unary_expression <array> (52)
        on left: 16 17
        on right: 24 57
    unary_operator <unaryOperator> (53)
        on left: 18 19 20 21 22 23
        on right: 17
    cast_expression <array> (54)
        on left: 24 25
        on right: 17 25 26 27 28 29
    multiplicative_expression <expression> (55)
        on left: 26 27 28 29
        on right: 27 28 29 30 31 32
    additive_expression <expression> (56)
        on left: 30 31 32
        on right: 31 32 33
    shift_expression <expression> (57)
        on left: 33
        on right: 34 35 36 37 38
    relational_expression <expression> (58)
        on left: 34 35 36 37 38
        on right: 35 36 37 38 39 40 41
    equality_expression <expression> (59)
        on left: 39 40 41
        on right: 40 41 42 43
    AND_expression <expression> (60)
        on left: 42 43
        on right: 43 44 45
    exclusive_OR_expression <expression> (61)
        on left: 44 45
        on right: 45 46 47
    inclusive_OR_expression <expression> (62)
        on left: 46 47
        on right: 47 50 51
    M <instructionNumber> (63)
        on left: 48
        on right: 51 53 55 126 132 133 134
    N <statement> (64)
        on left: 49
        on right: 55 132 133 134
    logical_AND_expression <expression> (65)
        on left: 50 51
        on right: 51 52 53
    logical_OR_expression <expression> (66)
        on left: 52 53
        on right: 53 54 55
    conditional_expression <expression> (67)
        on left: 54 55
        on right: 55 56 61
    assignment_expression <expression> (68)
        on left: 56 57
        on right: 14 15 57 59 60 87 103
    assignment_operator (69)
        on left: 58
        on right: 57
    expression <expression> (70)
        on left: 59 60
        on right: 5 7 55 60 130 132 133
    constant_expression (71)
        on left: 61
        on right: 113
    declaration (72)
        on left: 62
        on right: 127 135 140 144 145
    init_declarator_list_opt (73)
        on left: 63 64
        on right: 62
    declaration_specifiers (74)
        on left: 65 66
        on right: 62 67 98 99 141
    declaration_specifiers_opt (75)
        on left: 67 68
        on right: 65 66
    init_declarator_list (76)
        on left: 69 70
        on right: 63 70
    init_declarator <symbol> (77)
        on left: 71 72
        on right: 69 70
    type_specifier (78)
        on left: 73 74 75
        on right: 65 76
    specifier_qualifier_list (79)
        on left: 76
        on right: 77 102
    specifier_qualifier_list_opt (80)
        on left: 77 78
        on right: 76
    function_specifier (81)
        on left: 79
        on right: 66
    declarator <symbol> (82)
        on left: 80 81
        on right: 71 72 84 98 141
    change_scope (83)
        on left: 82
        on right: 89 91 122 141
    direct_declarator <symbol> (84)
        on left: 83 84 85 86 87 88 89 90 91
        on right: 80 81 85 86 87 88 89 90 91
    type_qualifier_list_opt (85)
        on left: 92
        on right: 93 94
    pointer <symbolType> (86)
        on left: 93 94
        on right: 80 94
    parameter_type_list (87)
        on left: 95
        on right: 89
    parameter_list (88)
        on left: 96 97
        on right: 95 97
    parameter_declaration (89)
        on left: 98 99
        on right: 96 97
    identifier_list (90)
        on left: 100 101
        on right: 90 101
    type_name (91)
        on left: 102
        on right: 10 11 25
    initialiser <symbol> (92)
        on left: 103 104 105
        on right: 72 106 107
    initialiser_list (93)
        on left: 106 107
        on right: 10 11 104 105 107
    designation_opt (94)
        on left: 108 109
        on right: 106 107
    designation (95)
        on left: 110
        on right: 108
    designator_list (96)
        on left: 111 112
        on right: 110 112
    designator (97)
        on left: 113
        on right: 111 112
    statement <statement> (98)
        on left: 114 115 116 117 118 119
        on right: 120 128 132 133 134 135
    labeled_statement <statement> (99)
        on left: 120
        on right: 114
    change_block (100)
        on left: 121
        on right: 122
    compound_statement <statement> (101)
        on left: 122
        on right: 115
    block_item_list_opt <statement> (102)
        on left: 123 124
        on right: 122 141
    block_item_list <statement> (103)
        on left: 125 126
        on right: 123 126
    block_item <statement> (104)
        on left: 127 128
        on right: 125 126
    expression_statement <expression> (105)
        on left: 129
        on right: 116
    expression_opt <expression> (106)
        on left: 130 131
        on right: 129 134 135 136
    selection_statement <statement> (107)
        on left: 132 133
        on right: 117
    iteration_statement <statement> (108)
        on left: 134 135
        on right: 118
    jump_statement <statement> (109)
        on left: 136
        on right: 119
    translation_unit (110)
        on left: 137 138
        on right: 0 138
    external_declaration (111)
        on left: 139 140
        on right: 137 138
    function_definition (112)
        on left: 141
        on right: 139
    declaration_list_opt (113)
        on left: 142 143
        on right: 141
    declaration_list (114)
        on left: 144 145
        on right: 142 145


State 0

    0 $accept: • translation_unit $end
   62 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   65 declaration_specifiers: • type_specifier declaration_specifiers_opt
   66                       | • function_specifier declaration_specifiers_opt
   73 type_specifier: • VOIDTYPE
   74               | • CHARTYPE
   75               | • INTTYPE
   79 function_specifier: • INLINE
  137 translation_unit: • external_declaration
  138                 | • translation_unit external_declaration
  139 external_declaration: • function_definition
  140                     | • declaration
  141 function_definition: • declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

    CHARTYPE  shift, and go to state 1
    INLINE    shift, and go to state 2
    INTTYPE   shift, and go to state 3
    VOIDTYPE  shift, and go to state 4

    declaration             go to state 5
    declaration_specifiers  go to state 6
    type_specifier          go to state 7
    function_specifier      go to state 8
    translation_unit        go to state 9
    external_declaration    go to state 10
    function_definition     go to state 11


State 1

   74 type_specifier: CHARTYPE •

    $default  reduce using rule 74 (type_specifier)


State 2

   79 function_specifier: INLINE •

    $default  reduce using rule 79 (function_specifier)


State 3

   75 type_specifier: INTTYPE •

    $default  reduce using rule 75 (type_specifier)


State 4

   73 type_specifier: VOIDTYPE •

    $default  reduce using rule 73 (type_specifier)


State 5

  140 external_declaration: declaration •

    $default  reduce using rule 140 (external_declaration)


State 6

   62 declaration: declaration_specifiers • init_declarator_list_opt SEMI_COLON
   63 init_declarator_list_opt: • init_declarator_list
   64                         | ε •  [SEMI_COLON]
   69 init_declarator_list: • init_declarator
   70                     | • init_declarator_list COMMA init_declarator
   71 init_declarator: • declarator
   72                | • declarator ASSIGNMENT initialiser
   80 declarator: • pointer direct_declarator
   81           | • direct_declarator
   83 direct_declarator: • IDENTIFIER
   84                  | • LEFT_PARENTHESES declarator RIGHT_PARENTHESES
   85                  | • direct_declarator LEFT_SQUARE_BRACKET INTEGER_CONSTANT RIGHT_SQUARE_BRACKET
   86                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
   87                  | • direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
   88                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
   89                  | • direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
   90                  | • direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
   91                  | • direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES
   93 pointer: • ASTERISK type_qualifier_list_opt
   94        | • ASTERISK type_qualifier_list_opt pointer
  141 function_definition: declaration_specifiers • declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

    IDENTIFIER        shift, and go to state 12
    LEFT_PARENTHESES  shift, and go to state 13
    ASTERISK          shift, and go to state 14

    $default  reduce using rule 64 (init_declarator_list_opt)

    init_declarator_list_opt  go to state 15
    init_declarator_list      go to state 16
    init_declarator           go to state 17
    declarator                go to state 18
    direct_declarator         go to state 19
    pointer                   go to state 20


State 7

   65 declaration_specifiers: • type_specifier declaration_specifiers_opt
   65                       | type_specifier • declaration_specifiers_opt
   66                       | • function_specifier declaration_specifiers_opt
   67 declaration_specifiers_opt: • declaration_specifiers
   68                           | ε •  [IDENTIFIER, COMMA, LEFT_PARENTHESES, ASTERISK, SEMI_COLON, RIGHT_PARENTHESES]
   73 type_specifier: • VOIDTYPE
   74               | • CHARTYPE
   75               | • INTTYPE
   79 function_specifier: • INLINE

    CHARTYPE  shift, and go to state 1
    INLINE    shift, and go to state 2
    INTTYPE   shift, and go to state 3
    VOIDTYPE  shift, and go to state 4

    $default  reduce using rule 68 (declaration_specifiers_opt)

    declaration_specifiers      go to state 21
    declaration_specifiers_opt  go to state 22
    type_specifier              go to state 7
    function_specifier          go to state 8


State 8

   65 declaration_specifiers: • type_specifier declaration_specifiers_opt
   66                       | • function_specifier declaration_specifiers_opt
   66                       | function_specifier • declaration_specifiers_opt
   67 declaration_specifiers_opt: • declaration_specifiers
   68                           | ε •  [IDENTIFIER, COMMA, LEFT_PARENTHESES, ASTERISK, SEMI_COLON, RIGHT_PARENTHESES]
   73 type_specifier: • VOIDTYPE
   74               | • CHARTYPE
   75               | • INTTYPE
   79 function_specifier: • INLINE

    CHARTYPE  shift, and go to state 1
    INLINE    shift, and go to state 2
    INTTYPE   shift, and go to state 3
    VOIDTYPE  shift, and go to state 4

    $default  reduce using rule 68 (declaration_specifiers_opt)

    declaration_specifiers      go to state 21
    declaration_specifiers_opt  go to state 23
    type_specifier              go to state 7
    function_specifier          go to state 8


State 9

    0 $accept: translation_unit • $end
   62 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   65 declaration_specifiers: • type_specifier declaration_specifiers_opt
   66                       | • function_specifier declaration_specifiers_opt
   73 type_specifier: • VOIDTYPE
   74               | • CHARTYPE
   75               | • INTTYPE
   79 function_specifier: • INLINE
  138 translation_unit: translation_unit • external_declaration
  139 external_declaration: • function_definition
  140                     | • declaration
  141 function_definition: • declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

    $end      shift, and go to state 24
    CHARTYPE  shift, and go to state 1
    INLINE    shift, and go to state 2
    INTTYPE   shift, and go to state 3
    VOIDTYPE  shift, and go to state 4

    declaration             go to state 5
    declaration_specifiers  go to state 6
    type_specifier          go to state 7
    function_specifier      go to state 8
    external_declaration    go to state 25
    function_definition     go to state 11


State 10

  137 translation_unit: external_declaration •

    $default  reduce using rule 137 (translation_unit)


State 11

  139 external_declaration: function_definition •

    $default  reduce using rule 139 (external_declaration)


State 12

   83 direct_declarator: IDENTIFIER •

    $default  reduce using rule 83 (direct_declarator)


State 13

   80 declarator: • pointer direct_declarator
   81           | • direct_declarator
   83 direct_declarator: • IDENTIFIER
   84                  | • LEFT_PARENTHESES declarator RIGHT_PARENTHESES
   84                  | LEFT_PARENTHESES • declarator RIGHT_PARENTHESES
   85                  | • direct_declarator LEFT_SQUARE_BRACKET INTEGER_CONSTANT RIGHT_SQUARE_BRACKET
   86                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
   87                  | • direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
   88                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
   89                  | • direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
   90                  | • direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
   91                  | • direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES
   93 pointer: • ASTERISK type_qualifier_list_opt
   94        | • ASTERISK type_qualifier_list_opt pointer

    IDENTIFIER        shift, and go to state 12
    LEFT_PARENTHESES  shift, and go to state 13
    ASTERISK          shift, and go to state 14

    declarator         go to state 26
    direct_declarator  go to state 19
    pointer            go to state 20


State 14

   92 type_qualifier_list_opt: ε •
   93 pointer: ASTERISK • type_qualifier_list_opt
   94        | ASTERISK • type_qualifier_list_opt pointer

    $default  reduce using rule 92 (type_qualifier_list_opt)

    type_qualifier_list_opt  go to state 27


State 15

   62 declaration: declaration_specifiers init_declarator_list_opt • SEMI_COLON

    SEMI_COLON  shift, and go to state 28


State 16

   63 init_declarator_list_opt: init_declarator_list •  [SEMI_COLON]
   70 init_declarator_list: init_declarator_list • COMMA init_declarator

    COMMA  shift, and go to state 29

    $default  reduce using rule 63 (init_declarator_list_opt)


State 17

   69 init_declarator_list: init_declarator •

    $default  reduce using rule 69 (init_declarator_list)


State 18

   62 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   65 declaration_specifiers: • type_specifier declaration_specifiers_opt
   66                       | • function_specifier declaration_specifiers_opt
   71 init_declarator: declarator •  [COMMA, SEMI_COLON]
   72                | declarator • ASSIGNMENT initialiser
   73 type_specifier: • VOIDTYPE
   74               | • CHARTYPE
   75               | • INTTYPE
   79 function_specifier: • INLINE
  141 function_definition: declaration_specifiers declarator • declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET
  142 declaration_list_opt: • declaration_list
  143                     | ε •  [LEFT_CURLY_BRACKET]
  144 declaration_list: • declaration
  145                 | • declaration_list declaration

    CHARTYPE    shift, and go to state 1
    INLINE      shift, and go to state 2
    INTTYPE     shift, and go to state 3
    VOIDTYPE    shift, and go to state 4
    ASSIGNMENT  shift, and go to state 30

    LEFT_CURLY_BRACKET  reduce using rule 143 (declaration_list_opt)
    $default            reduce using rule 71 (init_declarator)

    declaration             go to state 31
    declaration_specifiers  go to state 32
    type_specifier          go to state 7
    function_specifier      go to state 8
    declaration_list_opt    go to state 33
    declaration_list        go to state 34


State 19

   81 declarator: direct_declarator •  [CHARTYPE, INLINE, INTTYPE, VOIDTYPE, ASSIGNMENT, COMMA, LEFT_CURLY_BRACKET, SEMI_COLON, RIGHT_PARENTHESES]
   85 direct_declarator: direct_declarator • LEFT_SQUARE_BRACKET INTEGER_CONSTANT RIGHT_SQUARE_BRACKET
   86                  | direct_declarator • LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
   87                  | direct_declarator • LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
   88                  | direct_declarator • LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
   89                  | direct_declarator • LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
   90                  | direct_declarator • LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
   91                  | direct_declarator • LEFT_PARENTHESES change_scope RIGHT_PARENTHESES

    LEFT_SQUARE_BRACKET  shift, and go to state 35
    LEFT_PARENTHESES     shift, and go to state 36

    $default  reduce using rule 81 (declarator)


State 20

   80 declarator: pointer • direct_declarator
   83 direct_declarator: • IDENTIFIER
   84                  | • LEFT_PARENTHESES declarator RIGHT_PARENTHESES
   85                  | • direct_declarator LEFT_SQUARE_BRACKET INTEGER_CONSTANT RIGHT_SQUARE_BRACKET
   86                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
   87                  | • direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
   88                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
   89                  | • direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
   90                  | • direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
   91                  | • direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES

    IDENTIFIER        shift, and go to state 12
    LEFT_PARENTHESES  shift, and go to state 13

    direct_declarator  go to state 37


State 21

   67 declaration_specifiers_opt: declaration_specifiers •

    $default  reduce using rule 67 (declaration_specifiers_opt)


State 22

   65 declaration_specifiers: type_specifier declaration_specifiers_opt •

    $default  reduce using rule 65 (declaration_specifiers)


State 23

   66 declaration_specifiers: function_specifier declaration_specifiers_opt •

    $default  reduce using rule 66 (declaration_specifiers)


State 24

    0 $accept: translation_unit $end •

    $default  accept


State 25

  138 translation_unit: translation_unit external_declaration •

    $default  reduce using rule 138 (translation_unit)


State 26

   84 direct_declarator: LEFT_PARENTHESES declarator • RIGHT_PARENTHESES

    RIGHT_PARENTHESES  shift, and go to state 38


State 27

   93 pointer: • ASTERISK type_qualifier_list_opt
   93        | ASTERISK type_qualifier_list_opt •  [IDENTIFIER, LEFT_PARENTHESES]
   94        | • ASTERISK type_qualifier_list_opt pointer
   94        | ASTERISK type_qualifier_list_opt • pointer

    ASTERISK  shift, and go to state 14

    $default  reduce using rule 93 (pointer)

    pointer  go to state 39


State 28

   62 declaration: declaration_specifiers init_declarator_list_opt SEMI_COLON •

    $default  reduce using rule 62 (declaration)


State 29

   70 init_declarator_list: init_declarator_list COMMA • init_declarator
   71 init_declarator: • declarator
   72                | • declarator ASSIGNMENT initialiser
   80 declarator: • pointer direct_declarator
   81           | • direct_declarator
   83 direct_declarator: • IDENTIFIER
   84                  | • LEFT_PARENTHESES declarator RIGHT_PARENTHESES
   85                  | • direct_declarator LEFT_SQUARE_BRACKET INTEGER_CONSTANT RIGHT_SQUARE_BRACKET
   86                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
   87                  | • direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
   88                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
   89                  | • direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
   90                  | • direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
   91                  | • direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES
   93 pointer: • ASTERISK type_qualifier_list_opt
   94        | • ASTERISK type_qualifier_list_opt pointer

    IDENTIFIER        shift, and go to state 12
    LEFT_PARENTHESES  shift, and go to state 13
    ASTERISK          shift, and go to state 14

    init_declarator    go to state 40
    declarator         go to state 41
    direct_declarator  go to state 19
    pointer            go to state 20


State 30

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: • logical_AND_expression
   53                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   54 conditional_expression: • logical_OR_expression
   55                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   56 assignment_expression: • conditional_expression
   57                      | • unary_expression assignment_operator assignment_expression
   72 init_declarator: declarator ASSIGNMENT • initialiser
  103 initialiser: • assignment_expression
  104            | • LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
  105            | • LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    LEFT_CURLY_BRACKET  shift, and go to state 47
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 56
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 66
    logical_AND_expression     go to state 67
    logical_OR_expression      go to state 68
    conditional_expression     go to state 69
    assignment_expression      go to state 70
    initialiser                go to state 71


State 31

  144 declaration_list: declaration •

    $default  reduce using rule 144 (declaration_list)


State 32

   62 declaration: declaration_specifiers • init_declarator_list_opt SEMI_COLON
   63 init_declarator_list_opt: • init_declarator_list
   64                         | ε •  [SEMI_COLON]
   69 init_declarator_list: • init_declarator
   70                     | • init_declarator_list COMMA init_declarator
   71 init_declarator: • declarator
   72                | • declarator ASSIGNMENT initialiser
   80 declarator: • pointer direct_declarator
   81           | • direct_declarator
   83 direct_declarator: • IDENTIFIER
   84                  | • LEFT_PARENTHESES declarator RIGHT_PARENTHESES
   85                  | • direct_declarator LEFT_SQUARE_BRACKET INTEGER_CONSTANT RIGHT_SQUARE_BRACKET
   86                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
   87                  | • direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
   88                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
   89                  | • direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
   90                  | • direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
   91                  | • direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES
   93 pointer: • ASTERISK type_qualifier_list_opt
   94        | • ASTERISK type_qualifier_list_opt pointer

    IDENTIFIER        shift, and go to state 12
    LEFT_PARENTHESES  shift, and go to state 13
    ASTERISK          shift, and go to state 14

    $default  reduce using rule 64 (init_declarator_list_opt)

    init_declarator_list_opt  go to state 15
    init_declarator_list      go to state 16
    init_declarator           go to state 17
    declarator                go to state 41
    direct_declarator         go to state 19
    pointer                   go to state 20


State 33

   82 change_scope: ε •
  141 function_definition: declaration_specifiers declarator declaration_list_opt • change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

    $default  reduce using rule 82 (change_scope)

    change_scope  go to state 72


State 34

   62 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   65 declaration_specifiers: • type_specifier declaration_specifiers_opt
   66                       | • function_specifier declaration_specifiers_opt
   73 type_specifier: • VOIDTYPE
   74               | • CHARTYPE
   75               | • INTTYPE
   79 function_specifier: • INLINE
  142 declaration_list_opt: declaration_list •  [LEFT_CURLY_BRACKET]
  145 declaration_list: declaration_list • declaration

    CHARTYPE  shift, and go to state 1
    INLINE    shift, and go to state 2
    INTTYPE   shift, and go to state 3
    VOIDTYPE  shift, and go to state 4

    $default  reduce using rule 142 (declaration_list_opt)

    declaration             go to state 73
    declaration_specifiers  go to state 32
    type_specifier          go to state 7
    function_specifier      go to state 8


State 35

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: • logical_AND_expression
   53                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   54 conditional_expression: • logical_OR_expression
   55                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   56 assignment_expression: • conditional_expression
   57                      | • unary_expression assignment_operator assignment_expression
   85 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET • INTEGER_CONSTANT RIGHT_SQUARE_BRACKET
   86                  | direct_declarator LEFT_SQUARE_BRACKET • RIGHT_SQUARE_BRACKET
   87                  | direct_declarator LEFT_SQUARE_BRACKET • assignment_expression RIGHT_SQUARE_BRACKET
   88                  | direct_declarator LEFT_SQUARE_BRACKET • RIGHT_SQUARE_BRACKET

    IDENTIFIER            shift, and go to state 42
    INTEGER_CONSTANT      shift, and go to state 74
    CHARACTER_CONSTANT    shift, and go to state 44
    STRING_LITERAL        shift, and go to state 45
    RIGHT_SQUARE_BRACKET  shift, and go to state 75
    LEFT_PARENTHESES      shift, and go to state 46
    ASTERISK              shift, and go to state 48
    PLUS                  shift, and go to state 49
    MINUS                 shift, and go to state 50
    TILDE                 shift, and go to state 51
    EXCLAMATION           shift, and go to state 52
    BITWISE_AND           shift, and go to state 53

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 56
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 66
    logical_AND_expression     go to state 67
    logical_OR_expression      go to state 68
    conditional_expression     go to state 69
    assignment_expression      go to state 76


State 36

   82 change_scope: ε •  [CHARTYPE, INLINE, INTTYPE, VOIDTYPE, RIGHT_PARENTHESES]
   89 direct_declarator: direct_declarator LEFT_PARENTHESES • change_scope parameter_type_list RIGHT_PARENTHESES
   90                  | direct_declarator LEFT_PARENTHESES • identifier_list RIGHT_PARENTHESES
   91                  | direct_declarator LEFT_PARENTHESES • change_scope RIGHT_PARENTHESES
  100 identifier_list: • IDENTIFIER
  101                | • identifier_list COMMA IDENTIFIER

    IDENTIFIER  shift, and go to state 77

    $default  reduce using rule 82 (change_scope)

    change_scope     go to state 78
    identifier_list  go to state 79


State 37

   80 declarator: pointer direct_declarator •  [CHARTYPE, INLINE, INTTYPE, VOIDTYPE, ASSIGNMENT, COMMA, LEFT_CURLY_BRACKET, SEMI_COLON, RIGHT_PARENTHESES]
   85 direct_declarator: direct_declarator • LEFT_SQUARE_BRACKET INTEGER_CONSTANT RIGHT_SQUARE_BRACKET
   86                  | direct_declarator • LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
   87                  | direct_declarator • LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
   88                  | direct_declarator • LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
   89                  | direct_declarator • LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
   90                  | direct_declarator • LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
   91                  | direct_declarator • LEFT_PARENTHESES change_scope RIGHT_PARENTHESES

    LEFT_SQUARE_BRACKET  shift, and go to state 35
    LEFT_PARENTHESES     shift, and go to state 36

    $default  reduce using rule 80 (declarator)


State 38

   84 direct_declarator: LEFT_PARENTHESES declarator RIGHT_PARENTHESES •

    $default  reduce using rule 84 (direct_declarator)


State 39

   94 pointer: ASTERISK type_qualifier_list_opt pointer •

    $default  reduce using rule 94 (pointer)


State 40

   70 init_declarator_list: init_declarator_list COMMA init_declarator •

    $default  reduce using rule 70 (init_declarator_list)


State 41

   71 init_declarator: declarator •  [COMMA, SEMI_COLON]
   72                | declarator • ASSIGNMENT initialiser

    ASSIGNMENT  shift, and go to state 30

    $default  reduce using rule 71 (init_declarator)


State 42

    1 primary_expression: IDENTIFIER •

    $default  reduce using rule 1 (primary_expression)


State 43

    2 primary_expression: INTEGER_CONSTANT •

    $default  reduce using rule 2 (primary_expression)


State 44

    3 primary_expression: CHARACTER_CONSTANT •

    $default  reduce using rule 3 (primary_expression)


State 45

    4 primary_expression: STRING_LITERAL •

    $default  reduce using rule 4 (primary_expression)


State 46

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    5                   | LEFT_PARENTHESES • expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   10                   | LEFT_PARENTHESES • type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   11                   | LEFT_PARENTHESES • type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   25                | LEFT_PARENTHESES • type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: • logical_AND_expression
   53                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   54 conditional_expression: • logical_OR_expression
   55                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   56 assignment_expression: • conditional_expression
   57                      | • unary_expression assignment_operator assignment_expression
   59 expression: • assignment_expression
   60           | • expression COMMA assignment_expression
   73 type_specifier: • VOIDTYPE
   74               | • CHARTYPE
   75               | • INTTYPE
   76 specifier_qualifier_list: • type_specifier specifier_qualifier_list_opt
  102 type_name: • specifier_qualifier_list

    CHARTYPE            shift, and go to state 1
    INTTYPE             shift, and go to state 3
    VOIDTYPE            shift, and go to state 4
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 56
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 66
    logical_AND_expression     go to state 67
    logical_OR_expression      go to state 68
    conditional_expression     go to state 69
    assignment_expression      go to state 80
    expression                 go to state 81
    type_specifier             go to state 82
    specifier_qualifier_list   go to state 83
    type_name                  go to state 84


State 47

  104 initialiser: LEFT_CURLY_BRACKET • initialiser_list RIGHT_CURLY_BRACKET
  105            | LEFT_CURLY_BRACKET • initialiser_list COMMA RIGHT_CURLY_BRACKET
  106 initialiser_list: • designation_opt initialiser
  107                 | • initialiser_list COMMA designation_opt initialiser
  108 designation_opt: • designation
  109                | ε •  [IDENTIFIER, INTEGER_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, BITWISE_AND]
  110 designation: • designator_list ASSIGNMENT
  111 designator_list: • designator
  112                | • designator_list designator
  113 designator: • LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET

    LEFT_SQUARE_BRACKET  shift, and go to state 85

    $default  reduce using rule 109 (designation_opt)

    initialiser_list  go to state 86
    designation_opt   go to state 87
    designation       go to state 88
    designator_list   go to state 89
    designator        go to state 90


State 48

   19 unary_operator: ASTERISK •

    $default  reduce using rule 19 (unary_operator)


State 49

   20 unary_operator: PLUS •

    $default  reduce using rule 20 (unary_operator)


State 50

   21 unary_operator: MINUS •

    $default  reduce using rule 21 (unary_operator)


State 51

   22 unary_operator: TILDE •

    $default  reduce using rule 22 (unary_operator)


State 52

   23 unary_operator: EXCLAMATION •

    $default  reduce using rule 23 (unary_operator)


State 53

   18 unary_operator: BITWISE_AND •

    $default  reduce using rule 18 (unary_operator)


State 54

    6 postfix_expression: primary_expression •

    $default  reduce using rule 6 (postfix_expression)


State 55

    7 postfix_expression: postfix_expression • LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | postfix_expression • LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | postfix_expression • ARROW IDENTIFIER
   16 unary_expression: postfix_expression •  [SLASH, QUESTION_MARK, ASSIGNMENT, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, MODULO, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LEFT_SQUARE_BRACKET  shift, and go to state 91
    LEFT_PARENTHESES     shift, and go to state 92
    ARROW                shift, and go to state 93

    $default  reduce using rule 16 (unary_expression)


State 56

   24 cast_expression: unary_expression •  [SLASH, QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, MODULO, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]
   57 assignment_expression: unary_expression • assignment_operator assignment_expression
   58 assignment_operator: • ASSIGNMENT

    ASSIGNMENT  shift, and go to state 94

    $default  reduce using rule 24 (cast_expression)

    assignment_operator  go to state 95


State 57

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   17                 | unary_operator • cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression  go to state 54
    postfix_expression  go to state 55
    unary_expression    go to state 96
    unary_operator      go to state 57
    cast_expression     go to state 97


State 58

   26 multiplicative_expression: cast_expression •

    $default  reduce using rule 26 (multiplicative_expression)


State 59

   27 multiplicative_expression: multiplicative_expression • ASTERISK cast_expression
   28                          | multiplicative_expression • SLASH cast_expression
   29                          | multiplicative_expression • MODULO cast_expression
   30 additive_expression: multiplicative_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, PLUS, MINUS, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    SLASH     shift, and go to state 98
    ASTERISK  shift, and go to state 99
    MODULO    shift, and go to state 100

    $default  reduce using rule 30 (additive_expression)


State 60

   31 additive_expression: additive_expression • PLUS multiplicative_expression
   32                    | additive_expression • MINUS multiplicative_expression
   33 shift_expression: additive_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    PLUS   shift, and go to state 101
    MINUS  shift, and go to state 102

    $default  reduce using rule 33 (shift_expression)


State 61

   34 relational_expression: shift_expression •

    $default  reduce using rule 34 (relational_expression)


State 62

   35 relational_expression: relational_expression • LESS_THAN shift_expression
   36                      | relational_expression • GREATER_THAN shift_expression
   37                      | relational_expression • LESS_EQUAL_THAN shift_expression
   38                      | relational_expression • GREATER_EQUAL_THAN shift_expression
   39 equality_expression: relational_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LESS_THAN           shift, and go to state 103
    GREATER_THAN        shift, and go to state 104
    LESS_EQUAL_THAN     shift, and go to state 105
    GREATER_EQUAL_THAN  shift, and go to state 106

    $default  reduce using rule 39 (equality_expression)


State 63

   40 equality_expression: equality_expression • EQUALS relational_expression
   41                    | equality_expression • NOT_EQUALS relational_expression
   42 AND_expression: equality_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR]

    EQUALS      shift, and go to state 107
    NOT_EQUALS  shift, and go to state 108

    $default  reduce using rule 42 (AND_expression)


State 64

   43 AND_expression: AND_expression • BITWISE_AND equality_expression
   44 exclusive_OR_expression: AND_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR]

    BITWISE_AND  shift, and go to state 109

    $default  reduce using rule 44 (exclusive_OR_expression)


State 65

   45 exclusive_OR_expression: exclusive_OR_expression • BITWISE_XOR AND_expression
   46 inclusive_OR_expression: exclusive_OR_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_OR, LOGICAL_AND, LOGICAL_OR]

    BITWISE_XOR  shift, and go to state 110

    $default  reduce using rule 46 (inclusive_OR_expression)


State 66

   47 inclusive_OR_expression: inclusive_OR_expression • BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: inclusive_OR_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, LOGICAL_AND, LOGICAL_OR]

    BITWISE_OR  shift, and go to state 111

    $default  reduce using rule 50 (logical_AND_expression)


State 67

   51 logical_AND_expression: logical_AND_expression • LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: logical_AND_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, LOGICAL_OR]

    LOGICAL_AND  shift, and go to state 112

    $default  reduce using rule 52 (logical_OR_expression)


State 68

   49 N: ε •  [QUESTION_MARK]
   53 logical_OR_expression: logical_OR_expression • LOGICAL_OR M logical_AND_expression
   54 conditional_expression: logical_OR_expression •  [COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES]
   55                       | logical_OR_expression • N QUESTION_MARK M expression N COLON M conditional_expression

    LOGICAL_OR  shift, and go to state 113

    QUESTION_MARK  reduce using rule 49 (N)
    $default       reduce using rule 54 (conditional_expression)

    N  go to state 114


State 69

   56 assignment_expression: conditional_expression •

    $default  reduce using rule 56 (assignment_expression)


State 70

  103 initialiser: assignment_expression •

    $default  reduce using rule 103 (initialiser)


State 71

   72 init_declarator: declarator ASSIGNMENT initialiser •

    $default  reduce using rule 72 (init_declarator)


State 72

  141 function_definition: declaration_specifiers declarator declaration_list_opt change_scope • LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 115


State 73

  145 declaration_list: declaration_list declaration •

    $default  reduce using rule 145 (declaration_list)


State 74

    2 primary_expression: INTEGER_CONSTANT •  [LEFT_SQUARE_BRACKET, SLASH, QUESTION_MARK, ASSIGNMENT, RIGHT_SQUARE_BRACKET, LEFT_PARENTHESES, ARROW, ASTERISK, PLUS, MINUS, MODULO, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]
   85 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET INTEGER_CONSTANT • RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 116

    RIGHT_SQUARE_BRACKET  [reduce using rule 2 (primary_expression)]
    $default              reduce using rule 2 (primary_expression)

    shift/reduce conflict on token RIGHT_SQUARE_BRACKET:
        2 primary_expression: INTEGER_CONSTANT •
       85 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET INTEGER_CONSTANT • RIGHT_SQUARE_BRACKET
      Example: direct_declarator LEFT_SQUARE_BRACKET INTEGER_CONSTANT • RIGHT_SQUARE_BRACKET
      Shift derivation
        direct_declarator
        ↳ 85: direct_declarator LEFT_SQUARE_BRACKET INTEGER_CONSTANT • RIGHT_SQUARE_BRACKET
      Reduce derivation
        direct_declarator
        ↳ 87: direct_declarator LEFT_SQUARE_BRACKET assignment_expression                                                                                            RIGHT_SQUARE_BRACKET
                                                    ↳ 56: conditional_expression
                                                          ↳ 54: logical_OR_expression
                                                                ↳ 52: logical_AND_expression
                                                                      ↳ 50: inclusive_OR_expression
                                                                            ↳ 46: exclusive_OR_expression
                                                                                  ↳ 44: AND_expression
                                                                                        ↳ 42: equality_expression
                                                                                              ↳ 39: relational_expression
                                                                                                    ↳ 34: shift_expression
                                                                                                          ↳ 33: additive_expression
                                                                                                                ↳ 30: multiplicative_expression
                                                                                                                      ↳ 26: cast_expression
                                                                                                                            ↳ 24: unary_expression
                                                                                                                                  ↳ 16: postfix_expression
                                                                                                                                        ↳ 6: primary_expression
                                                                                                                                             ↳ 2: INTEGER_CONSTANT •



State 75

   86 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET •  [CHARTYPE, INLINE, INTTYPE, VOIDTYPE, LEFT_SQUARE_BRACKET, ASSIGNMENT, COMMA, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, SEMI_COLON, RIGHT_PARENTHESES]
   88                  | direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET •  [CHARTYPE, INLINE, INTTYPE, VOIDTYPE, LEFT_SQUARE_BRACKET, ASSIGNMENT, COMMA, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, SEMI_COLON, RIGHT_PARENTHESES]

    CHARTYPE             reduce using rule 86 (direct_declarator)
    CHARTYPE             [reduce using rule 88 (direct_declarator)]
    INLINE               reduce using rule 86 (direct_declarator)
    INLINE               [reduce using rule 88 (direct_declarator)]
    INTTYPE              reduce using rule 86 (direct_declarator)
    INTTYPE              [reduce using rule 88 (direct_declarator)]
    VOIDTYPE             reduce using rule 86 (direct_declarator)
    VOIDTYPE             [reduce using rule 88 (direct_declarator)]
    LEFT_SQUARE_BRACKET  reduce using rule 86 (direct_declarator)
    LEFT_SQUARE_BRACKET  [reduce using rule 88 (direct_declarator)]
    ASSIGNMENT           reduce using rule 86 (direct_declarator)
    ASSIGNMENT           [reduce using rule 88 (direct_declarator)]
    COMMA                reduce using rule 86 (direct_declarator)
    COMMA                [reduce using rule 88 (direct_declarator)]
    LEFT_PARENTHESES     reduce using rule 86 (direct_declarator)
    LEFT_PARENTHESES     [reduce using rule 88 (direct_declarator)]
    LEFT_CURLY_BRACKET   reduce using rule 86 (direct_declarator)
    LEFT_CURLY_BRACKET   [reduce using rule 88 (direct_declarator)]
    SEMI_COLON           reduce using rule 86 (direct_declarator)
    SEMI_COLON           [reduce using rule 88 (direct_declarator)]
    RIGHT_PARENTHESES    reduce using rule 86 (direct_declarator)
    RIGHT_PARENTHESES    [reduce using rule 88 (direct_declarator)]
    $default             reduce using rule 86 (direct_declarator)

    reduce/reduce conflict on tokens CHARTYPE, INLINE, INTTYPE, VOIDTYPE, LEFT_SQUARE_BRACKET, ASSIGNMENT, COMMA, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, SEMI_COLON, RIGHT_PARENTHESES:
       86 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET •
       88 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET •
      Example: direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET •
      First reduce derivation
        direct_declarator
        ↳ 86: direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET •
      Second reduce derivation
        direct_declarator
        ↳ 88: direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET •



State 76

   87 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET assignment_expression • RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 117


State 77

  100 identifier_list: IDENTIFIER •

    $default  reduce using rule 100 (identifier_list)


State 78

   65 declaration_specifiers: • type_specifier declaration_specifiers_opt
   66                       | • function_specifier declaration_specifiers_opt
   73 type_specifier: • VOIDTYPE
   74               | • CHARTYPE
   75               | • INTTYPE
   79 function_specifier: • INLINE
   89 direct_declarator: direct_declarator LEFT_PARENTHESES change_scope • parameter_type_list RIGHT_PARENTHESES
   91                  | direct_declarator LEFT_PARENTHESES change_scope • RIGHT_PARENTHESES
   95 parameter_type_list: • parameter_list
   96 parameter_list: • parameter_declaration
   97               | • parameter_list COMMA parameter_declaration
   98 parameter_declaration: • declaration_specifiers declarator
   99                      | • declaration_specifiers

    CHARTYPE           shift, and go to state 1
    INLINE             shift, and go to state 2
    INTTYPE            shift, and go to state 3
    VOIDTYPE           shift, and go to state 4
    RIGHT_PARENTHESES  shift, and go to state 118

    declaration_specifiers  go to state 119
    type_specifier          go to state 7
    function_specifier      go to state 8
    parameter_type_list     go to state 120
    parameter_list          go to state 121
    parameter_declaration   go to state 122


State 79

   90 direct_declarator: direct_declarator LEFT_PARENTHESES identifier_list • RIGHT_PARENTHESES
  101 identifier_list: identifier_list • COMMA IDENTIFIER

    COMMA              shift, and go to state 123
    RIGHT_PARENTHESES  shift, and go to state 124


State 80

   59 expression: assignment_expression •

    $default  reduce using rule 59 (expression)


State 81

    5 primary_expression: LEFT_PARENTHESES expression • RIGHT_PARENTHESES
   60 expression: expression • COMMA assignment_expression

    COMMA              shift, and go to state 125
    RIGHT_PARENTHESES  shift, and go to state 126


State 82

   73 type_specifier: • VOIDTYPE
   74               | • CHARTYPE
   75               | • INTTYPE
   76 specifier_qualifier_list: • type_specifier specifier_qualifier_list_opt
   76                         | type_specifier • specifier_qualifier_list_opt
   77 specifier_qualifier_list_opt: • specifier_qualifier_list
   78                             | ε •  [RIGHT_PARENTHESES]

    CHARTYPE  shift, and go to state 1
    INTTYPE   shift, and go to state 3
    VOIDTYPE  shift, and go to state 4

    $default  reduce using rule 78 (specifier_qualifier_list_opt)

    type_specifier                go to state 82
    specifier_qualifier_list      go to state 127
    specifier_qualifier_list_opt  go to state 128


State 83

  102 type_name: specifier_qualifier_list •

    $default  reduce using rule 102 (type_name)


State 84

   10 postfix_expression: LEFT_PARENTHESES type_name • RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | LEFT_PARENTHESES type_name • RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   25 cast_expression: LEFT_PARENTHESES type_name • RIGHT_PARENTHESES cast_expression

    RIGHT_PARENTHESES  shift, and go to state 129


State 85

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: • logical_AND_expression
   53                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   54 conditional_expression: • logical_OR_expression
   55                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   61 constant_expression: • conditional_expression
  113 designator: LEFT_SQUARE_BRACKET • constant_expression RIGHT_SQUARE_BRACKET

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 96
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 66
    logical_AND_expression     go to state 67
    logical_OR_expression      go to state 68
    conditional_expression     go to state 130
    constant_expression        go to state 131


State 86

  104 initialiser: LEFT_CURLY_BRACKET initialiser_list • RIGHT_CURLY_BRACKET
  105            | LEFT_CURLY_BRACKET initialiser_list • COMMA RIGHT_CURLY_BRACKET
  107 initialiser_list: initialiser_list • COMMA designation_opt initialiser

    COMMA                shift, and go to state 132
    RIGHT_CURLY_BRACKET  shift, and go to state 133


State 87

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: • logical_AND_expression
   53                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   54 conditional_expression: • logical_OR_expression
   55                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   56 assignment_expression: • conditional_expression
   57                      | • unary_expression assignment_operator assignment_expression
  103 initialiser: • assignment_expression
  104            | • LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
  105            | • LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
  106 initialiser_list: designation_opt • initialiser

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    LEFT_CURLY_BRACKET  shift, and go to state 47
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 56
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 66
    logical_AND_expression     go to state 67
    logical_OR_expression      go to state 68
    conditional_expression     go to state 69
    assignment_expression      go to state 70
    initialiser                go to state 134


State 88

  108 designation_opt: designation •

    $default  reduce using rule 108 (designation_opt)


State 89

  110 designation: designator_list • ASSIGNMENT
  112 designator_list: designator_list • designator
  113 designator: • LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET

    LEFT_SQUARE_BRACKET  shift, and go to state 85
    ASSIGNMENT           shift, and go to state 135

    designator  go to state 136


State 90

  111 designator_list: designator •

    $default  reduce using rule 111 (designator_list)


State 91

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    7                   | postfix_expression LEFT_SQUARE_BRACKET • expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: • logical_AND_expression
   53                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   54 conditional_expression: • logical_OR_expression
   55                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   56 assignment_expression: • conditional_expression
   57                      | • unary_expression assignment_operator assignment_expression
   59 expression: • assignment_expression
   60           | • expression COMMA assignment_expression

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 56
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 66
    logical_AND_expression     go to state 67
    logical_OR_expression      go to state 68
    conditional_expression     go to state 69
    assignment_expression      go to state 80
    expression                 go to state 137


State 92

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    8                   | postfix_expression LEFT_PARENTHESES • argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   12 argument_expression_list_opt: • argument_expression_list
   13                             | ε •  [RIGHT_PARENTHESES]
   14 argument_expression_list: • assignment_expression
   15                         | • argument_expression_list COMMA assignment_expression
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: • logical_AND_expression
   53                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   54 conditional_expression: • logical_OR_expression
   55                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   56 assignment_expression: • conditional_expression
   57                      | • unary_expression assignment_operator assignment_expression

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    $default  reduce using rule 13 (argument_expression_list_opt)

    primary_expression            go to state 54
    postfix_expression            go to state 55
    argument_expression_list_opt  go to state 138
    argument_expression_list      go to state 139
    unary_expression              go to state 56
    unary_operator                go to state 57
    cast_expression               go to state 58
    multiplicative_expression     go to state 59
    additive_expression           go to state 60
    shift_expression              go to state 61
    relational_expression         go to state 62
    equality_expression           go to state 63
    AND_expression                go to state 64
    exclusive_OR_expression       go to state 65
    inclusive_OR_expression       go to state 66
    logical_AND_expression        go to state 67
    logical_OR_expression         go to state 68
    conditional_expression        go to state 69
    assignment_expression         go to state 140


State 93

    9 postfix_expression: postfix_expression ARROW • IDENTIFIER

    IDENTIFIER  shift, and go to state 141


State 94

   58 assignment_operator: ASSIGNMENT •

    $default  reduce using rule 58 (assignment_operator)


State 95

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: • logical_AND_expression
   53                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   54 conditional_expression: • logical_OR_expression
   55                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   56 assignment_expression: • conditional_expression
   57                      | • unary_expression assignment_operator assignment_expression
   57                      | unary_expression assignment_operator • assignment_expression

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 56
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 66
    logical_AND_expression     go to state 67
    logical_OR_expression      go to state 68
    conditional_expression     go to state 69
    assignment_expression      go to state 142


State 96

   24 cast_expression: unary_expression •

    $default  reduce using rule 24 (cast_expression)


State 97

   17 unary_expression: unary_operator cast_expression •

    $default  reduce using rule 17 (unary_expression)


State 98

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   28 multiplicative_expression: multiplicative_expression SLASH • cast_expression

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression  go to state 54
    postfix_expression  go to state 55
    unary_expression    go to state 96
    unary_operator      go to state 57
    cast_expression     go to state 143


State 99

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   27 multiplicative_expression: multiplicative_expression ASTERISK • cast_expression

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression  go to state 54
    postfix_expression  go to state 55
    unary_expression    go to state 96
    unary_operator      go to state 57
    cast_expression     go to state 144


State 100

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   29 multiplicative_expression: multiplicative_expression MODULO • cast_expression

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression  go to state 54
    postfix_expression  go to state 55
    unary_expression    go to state 96
    unary_operator      go to state 57
    cast_expression     go to state 145


State 101

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   31 additive_expression: additive_expression PLUS • multiplicative_expression

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 96
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 146


State 102

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   32 additive_expression: additive_expression MINUS • multiplicative_expression

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 96
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 147


State 103

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   35 relational_expression: relational_expression LESS_THAN • shift_expression

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 96
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 148


State 104

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   36 relational_expression: relational_expression GREATER_THAN • shift_expression

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 96
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 149


State 105

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   37 relational_expression: relational_expression LESS_EQUAL_THAN • shift_expression

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 96
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 150


State 106

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   38 relational_expression: relational_expression GREATER_EQUAL_THAN • shift_expression

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 96
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 151


State 107

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   40 equality_expression: equality_expression EQUALS • relational_expression

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 96
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 152


State 108

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   41 equality_expression: equality_expression NOT_EQUALS • relational_expression

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 96
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 153


State 109

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   43 AND_expression: AND_expression BITWISE_AND • equality_expression

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 96
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 154


State 110

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   45 exclusive_OR_expression: exclusive_OR_expression BITWISE_XOR • AND_expression

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 96
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 155


State 111

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   47 inclusive_OR_expression: inclusive_OR_expression BITWISE_OR • exclusive_OR_expression

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 96
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 156


State 112

   48 M: ε •
   51 logical_AND_expression: logical_AND_expression LOGICAL_AND • M inclusive_OR_expression

    $default  reduce using rule 48 (M)

    M  go to state 157


State 113

   48 M: ε •
   53 logical_OR_expression: logical_OR_expression LOGICAL_OR • M logical_AND_expression

    $default  reduce using rule 48 (M)

    M  go to state 158


State 114

   55 conditional_expression: logical_OR_expression N • QUESTION_MARK M expression N COLON M conditional_expression

    QUESTION_MARK  shift, and go to state 159


State 115

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: • logical_AND_expression
   53                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   54 conditional_expression: • logical_OR_expression
   55                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   56 assignment_expression: • conditional_expression
   57                      | • unary_expression assignment_operator assignment_expression
   59 expression: • assignment_expression
   60           | • expression COMMA assignment_expression
   62 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   65 declaration_specifiers: • type_specifier declaration_specifiers_opt
   66                       | • function_specifier declaration_specifiers_opt
   73 type_specifier: • VOIDTYPE
   74               | • CHARTYPE
   75               | • INTTYPE
   79 function_specifier: • INLINE
  114 statement: • labeled_statement
  115          | • compound_statement
  116          | • expression_statement
  117          | • selection_statement
  118          | • iteration_statement
  119          | • jump_statement
  120 labeled_statement: • IDENTIFIER COLON statement
  122 compound_statement: • LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  123 block_item_list_opt: • block_item_list
  124                    | ε •  [RIGHT_CURLY_BRACKET]
  125 block_item_list: • block_item
  126                | • block_item_list M block_item
  127 block_item: • declaration
  128           | • statement
  129 expression_statement: • expression_opt SEMI_COLON
  130 expression_opt: • expression
  131               | ε •  [SEMI_COLON]
  132 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  133                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  134 iteration_statement: • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  135                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  136 jump_statement: • RETURN expression_opt SEMI_COLON
  141 function_definition: declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET • block_item_list_opt RIGHT_CURLY_BRACKET

    CHARTYPE            shift, and go to state 1
    FOR                 shift, and go to state 160
    IF                  shift, and go to state 161
    INLINE              shift, and go to state 2
    INTTYPE             shift, and go to state 3
    RETURN              shift, and go to state 162
    VOIDTYPE            shift, and go to state 4
    IDENTIFIER          shift, and go to state 163
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    LEFT_CURLY_BRACKET  shift, and go to state 164
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    SEMI_COLON  reduce using rule 131 (expression_opt)
    $default    reduce using rule 124 (block_item_list_opt)

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 56
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 66
    logical_AND_expression     go to state 67
    logical_OR_expression      go to state 68
    conditional_expression     go to state 69
    assignment_expression      go to state 80
    expression                 go to state 165
    declaration                go to state 166
    declaration_specifiers     go to state 32
    type_specifier             go to state 7
    function_specifier         go to state 8
    statement                  go to state 167
    labeled_statement          go to state 168
    compound_statement         go to state 169
    block_item_list_opt        go to state 170
    block_item_list            go to state 171
    block_item                 go to state 172
    expression_statement       go to state 173
    expression_opt             go to state 174
    selection_statement        go to state 175
    iteration_statement        go to state 176
    jump_statement             go to state 177


State 116

   85 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET INTEGER_CONSTANT RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 85 (direct_declarator)


State 117

   87 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 87 (direct_declarator)


State 118

   91 direct_declarator: direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES •

    $default  reduce using rule 91 (direct_declarator)


State 119

   80 declarator: • pointer direct_declarator
   81           | • direct_declarator
   83 direct_declarator: • IDENTIFIER
   84                  | • LEFT_PARENTHESES declarator RIGHT_PARENTHESES
   85                  | • direct_declarator LEFT_SQUARE_BRACKET INTEGER_CONSTANT RIGHT_SQUARE_BRACKET
   86                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
   87                  | • direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
   88                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
   89                  | • direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
   90                  | • direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
   91                  | • direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES
   93 pointer: • ASTERISK type_qualifier_list_opt
   94        | • ASTERISK type_qualifier_list_opt pointer
   98 parameter_declaration: declaration_specifiers • declarator
   99                      | declaration_specifiers •  [COMMA, RIGHT_PARENTHESES]

    IDENTIFIER        shift, and go to state 12
    LEFT_PARENTHESES  shift, and go to state 13
    ASTERISK          shift, and go to state 14

    $default  reduce using rule 99 (parameter_declaration)

    declarator         go to state 178
    direct_declarator  go to state 19
    pointer            go to state 20


State 120

   89 direct_declarator: direct_declarator LEFT_PARENTHESES change_scope parameter_type_list • RIGHT_PARENTHESES

    RIGHT_PARENTHESES  shift, and go to state 179


State 121

   95 parameter_type_list: parameter_list •  [RIGHT_PARENTHESES]
   97 parameter_list: parameter_list • COMMA parameter_declaration

    COMMA  shift, and go to state 180

    $default  reduce using rule 95 (parameter_type_list)


State 122

   96 parameter_list: parameter_declaration •

    $default  reduce using rule 96 (parameter_list)


State 123

  101 identifier_list: identifier_list COMMA • IDENTIFIER

    IDENTIFIER  shift, and go to state 181


State 124

   90 direct_declarator: direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES •

    $default  reduce using rule 90 (direct_declarator)


State 125

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: • logical_AND_expression
   53                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   54 conditional_expression: • logical_OR_expression
   55                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   56 assignment_expression: • conditional_expression
   57                      | • unary_expression assignment_operator assignment_expression
   60 expression: expression COMMA • assignment_expression

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 56
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 66
    logical_AND_expression     go to state 67
    logical_OR_expression      go to state 68
    conditional_expression     go to state 69
    assignment_expression      go to state 182


State 126

    5 primary_expression: LEFT_PARENTHESES expression RIGHT_PARENTHESES •

    $default  reduce using rule 5 (primary_expression)


State 127

   77 specifier_qualifier_list_opt: specifier_qualifier_list •

    $default  reduce using rule 77 (specifier_qualifier_list_opt)


State 128

   76 specifier_qualifier_list: type_specifier specifier_qualifier_list_opt •

    $default  reduce using rule 76 (specifier_qualifier_list)


State 129

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   10                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES • LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   11                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES • LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   25                | LEFT_PARENTHESES type_name RIGHT_PARENTHESES • cast_expression

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    LEFT_CURLY_BRACKET  shift, and go to state 183
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression  go to state 54
    postfix_expression  go to state 55
    unary_expression    go to state 96
    unary_operator      go to state 57
    cast_expression     go to state 184


State 130

   61 constant_expression: conditional_expression •

    $default  reduce using rule 61 (constant_expression)


State 131

  113 designator: LEFT_SQUARE_BRACKET constant_expression • RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 185


State 132

  105 initialiser: LEFT_CURLY_BRACKET initialiser_list COMMA • RIGHT_CURLY_BRACKET
  107 initialiser_list: initialiser_list COMMA • designation_opt initialiser
  108 designation_opt: • designation
  109                | ε •  [IDENTIFIER, INTEGER_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, BITWISE_AND]
  110 designation: • designator_list ASSIGNMENT
  111 designator_list: • designator
  112                | • designator_list designator
  113 designator: • LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET

    LEFT_SQUARE_BRACKET  shift, and go to state 85
    RIGHT_CURLY_BRACKET  shift, and go to state 186

    $default  reduce using rule 109 (designation_opt)

    designation_opt  go to state 187
    designation      go to state 88
    designator_list  go to state 89
    designator       go to state 90


State 133

  104 initialiser: LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET •

    $default  reduce using rule 104 (initialiser)


State 134

  106 initialiser_list: designation_opt initialiser •

    $default  reduce using rule 106 (initialiser_list)


State 135

  110 designation: designator_list ASSIGNMENT •

    $default  reduce using rule 110 (designation)


State 136

  112 designator_list: designator_list designator •

    $default  reduce using rule 112 (designator_list)


State 137

    7 postfix_expression: postfix_expression LEFT_SQUARE_BRACKET expression • RIGHT_SQUARE_BRACKET
   60 expression: expression • COMMA assignment_expression

    COMMA                 shift, and go to state 125
    RIGHT_SQUARE_BRACKET  shift, and go to state 188


State 138

    8 postfix_expression: postfix_expression LEFT_PARENTHESES argument_expression_list_opt • RIGHT_PARENTHESES

    RIGHT_PARENTHESES  shift, and go to state 189


State 139

   12 argument_expression_list_opt: argument_expression_list •  [RIGHT_PARENTHESES]
   15 argument_expression_list: argument_expression_list • COMMA assignment_expression

    COMMA  shift, and go to state 190

    $default  reduce using rule 12 (argument_expression_list_opt)


State 140

   14 argument_expression_list: assignment_expression •

    $default  reduce using rule 14 (argument_expression_list)


State 141

    9 postfix_expression: postfix_expression ARROW IDENTIFIER •

    $default  reduce using rule 9 (postfix_expression)


State 142

   57 assignment_expression: unary_expression assignment_operator assignment_expression •

    $default  reduce using rule 57 (assignment_expression)


State 143

   28 multiplicative_expression: multiplicative_expression SLASH cast_expression •

    $default  reduce using rule 28 (multiplicative_expression)


State 144

   27 multiplicative_expression: multiplicative_expression ASTERISK cast_expression •

    $default  reduce using rule 27 (multiplicative_expression)


State 145

   29 multiplicative_expression: multiplicative_expression MODULO cast_expression •

    $default  reduce using rule 29 (multiplicative_expression)


State 146

   27 multiplicative_expression: multiplicative_expression • ASTERISK cast_expression
   28                          | multiplicative_expression • SLASH cast_expression
   29                          | multiplicative_expression • MODULO cast_expression
   31 additive_expression: additive_expression PLUS multiplicative_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, PLUS, MINUS, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    SLASH     shift, and go to state 98
    ASTERISK  shift, and go to state 99
    MODULO    shift, and go to state 100

    $default  reduce using rule 31 (additive_expression)


State 147

   27 multiplicative_expression: multiplicative_expression • ASTERISK cast_expression
   28                          | multiplicative_expression • SLASH cast_expression
   29                          | multiplicative_expression • MODULO cast_expression
   32 additive_expression: additive_expression MINUS multiplicative_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, PLUS, MINUS, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    SLASH     shift, and go to state 98
    ASTERISK  shift, and go to state 99
    MODULO    shift, and go to state 100

    $default  reduce using rule 32 (additive_expression)


State 148

   35 relational_expression: relational_expression LESS_THAN shift_expression •

    $default  reduce using rule 35 (relational_expression)


State 149

   36 relational_expression: relational_expression GREATER_THAN shift_expression •

    $default  reduce using rule 36 (relational_expression)


State 150

   37 relational_expression: relational_expression LESS_EQUAL_THAN shift_expression •

    $default  reduce using rule 37 (relational_expression)


State 151

   38 relational_expression: relational_expression GREATER_EQUAL_THAN shift_expression •

    $default  reduce using rule 38 (relational_expression)


State 152

   35 relational_expression: relational_expression • LESS_THAN shift_expression
   36                      | relational_expression • GREATER_THAN shift_expression
   37                      | relational_expression • LESS_EQUAL_THAN shift_expression
   38                      | relational_expression • GREATER_EQUAL_THAN shift_expression
   40 equality_expression: equality_expression EQUALS relational_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LESS_THAN           shift, and go to state 103
    GREATER_THAN        shift, and go to state 104
    LESS_EQUAL_THAN     shift, and go to state 105
    GREATER_EQUAL_THAN  shift, and go to state 106

    $default  reduce using rule 40 (equality_expression)


State 153

   35 relational_expression: relational_expression • LESS_THAN shift_expression
   36                      | relational_expression • GREATER_THAN shift_expression
   37                      | relational_expression • LESS_EQUAL_THAN shift_expression
   38                      | relational_expression • GREATER_EQUAL_THAN shift_expression
   41 equality_expression: equality_expression NOT_EQUALS relational_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LESS_THAN           shift, and go to state 103
    GREATER_THAN        shift, and go to state 104
    LESS_EQUAL_THAN     shift, and go to state 105
    GREATER_EQUAL_THAN  shift, and go to state 106

    $default  reduce using rule 41 (equality_expression)


State 154

   40 equality_expression: equality_expression • EQUALS relational_expression
   41                    | equality_expression • NOT_EQUALS relational_expression
   43 AND_expression: AND_expression BITWISE_AND equality_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_AND, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR]

    EQUALS      shift, and go to state 107
    NOT_EQUALS  shift, and go to state 108

    $default  reduce using rule 43 (AND_expression)


State 155

   43 AND_expression: AND_expression • BITWISE_AND equality_expression
   45 exclusive_OR_expression: exclusive_OR_expression BITWISE_XOR AND_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR]

    BITWISE_AND  shift, and go to state 109

    $default  reduce using rule 45 (exclusive_OR_expression)


State 156

   45 exclusive_OR_expression: exclusive_OR_expression • BITWISE_XOR AND_expression
   47 inclusive_OR_expression: inclusive_OR_expression BITWISE_OR exclusive_OR_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, BITWISE_OR, LOGICAL_AND, LOGICAL_OR]

    BITWISE_XOR  shift, and go to state 110

    $default  reduce using rule 47 (inclusive_OR_expression)


State 157

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   51 logical_AND_expression: logical_AND_expression LOGICAL_AND M • inclusive_OR_expression

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 96
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 191


State 158

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   53 logical_OR_expression: logical_OR_expression LOGICAL_OR M • logical_AND_expression

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 96
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 66
    logical_AND_expression     go to state 192


State 159

   48 M: ε •
   55 conditional_expression: logical_OR_expression N QUESTION_MARK • M expression N COLON M conditional_expression

    $default  reduce using rule 48 (M)

    M  go to state 193


State 160

  134 iteration_statement: FOR • LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  135                    | FOR • LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement

    LEFT_PARENTHESES  shift, and go to state 194


State 161

  132 selection_statement: IF • LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  133                    | IF • LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement

    LEFT_PARENTHESES  shift, and go to state 195


State 162

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: • logical_AND_expression
   53                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   54 conditional_expression: • logical_OR_expression
   55                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   56 assignment_expression: • conditional_expression
   57                      | • unary_expression assignment_operator assignment_expression
   59 expression: • assignment_expression
   60           | • expression COMMA assignment_expression
  130 expression_opt: • expression
  131               | ε •  [SEMI_COLON]
  136 jump_statement: RETURN • expression_opt SEMI_COLON

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    $default  reduce using rule 131 (expression_opt)

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 56
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 66
    logical_AND_expression     go to state 67
    logical_OR_expression      go to state 68
    conditional_expression     go to state 69
    assignment_expression      go to state 80
    expression                 go to state 165
    expression_opt             go to state 196


State 163

    1 primary_expression: IDENTIFIER •  [LEFT_SQUARE_BRACKET, SLASH, QUESTION_MARK, ASSIGNMENT, COMMA, LEFT_PARENTHESES, ARROW, ASTERISK, PLUS, MINUS, MODULO, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, SEMI_COLON, BITWISE_AND, EQUALS, BITWISE_XOR, BITWISE_OR, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]
  120 labeled_statement: IDENTIFIER • COLON statement

    COLON  shift, and go to state 197

    $default  reduce using rule 1 (primary_expression)


State 164

  121 change_block: ε •
  122 compound_statement: LEFT_CURLY_BRACKET • change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET

    $default  reduce using rule 121 (change_block)

    change_block  go to state 198


State 165

   60 expression: expression • COMMA assignment_expression
  130 expression_opt: expression •  [SEMI_COLON, RIGHT_PARENTHESES]

    COMMA  shift, and go to state 125

    $default  reduce using rule 130 (expression_opt)


State 166

  127 block_item: declaration •

    $default  reduce using rule 127 (block_item)


State 167

  128 block_item: statement •

    $default  reduce using rule 128 (block_item)


State 168

  114 statement: labeled_statement •

    $default  reduce using rule 114 (statement)


State 169

  115 statement: compound_statement •

    $default  reduce using rule 115 (statement)


State 170

  141 function_definition: declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt • RIGHT_CURLY_BRACKET

    RIGHT_CURLY_BRACKET  shift, and go to state 199


State 171

   48 M: ε •  [CHARTYPE, FOR, IF, INLINE, INTTYPE, RETURN, VOIDTYPE, IDENTIFIER, INTEGER_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, SEMI_COLON, BITWISE_AND]
  123 block_item_list_opt: block_item_list •  [RIGHT_CURLY_BRACKET]
  126 block_item_list: block_item_list • M block_item

    RIGHT_CURLY_BRACKET  reduce using rule 123 (block_item_list_opt)
    $default             reduce using rule 48 (M)

    M  go to state 200


State 172

  125 block_item_list: block_item •

    $default  reduce using rule 125 (block_item_list)


State 173

  116 statement: expression_statement •

    $default  reduce using rule 116 (statement)


State 174

  129 expression_statement: expression_opt • SEMI_COLON

    SEMI_COLON  shift, and go to state 201


State 175

  117 statement: selection_statement •

    $default  reduce using rule 117 (statement)


State 176

  118 statement: iteration_statement •

    $default  reduce using rule 118 (statement)


State 177

  119 statement: jump_statement •

    $default  reduce using rule 119 (statement)


State 178

   98 parameter_declaration: declaration_specifiers declarator •

    $default  reduce using rule 98 (parameter_declaration)


State 179

   89 direct_declarator: direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES •

    $default  reduce using rule 89 (direct_declarator)


State 180

   65 declaration_specifiers: • type_specifier declaration_specifiers_opt
   66                       | • function_specifier declaration_specifiers_opt
   73 type_specifier: • VOIDTYPE
   74               | • CHARTYPE
   75               | • INTTYPE
   79 function_specifier: • INLINE
   97 parameter_list: parameter_list COMMA • parameter_declaration
   98 parameter_declaration: • declaration_specifiers declarator
   99                      | • declaration_specifiers

    CHARTYPE  shift, and go to state 1
    INLINE    shift, and go to state 2
    INTTYPE   shift, and go to state 3
    VOIDTYPE  shift, and go to state 4

    declaration_specifiers  go to state 119
    type_specifier          go to state 7
    function_specifier      go to state 8
    parameter_declaration   go to state 202


State 181

  101 identifier_list: identifier_list COMMA IDENTIFIER •

    $default  reduce using rule 101 (identifier_list)


State 182

   60 expression: expression COMMA assignment_expression •

    $default  reduce using rule 60 (expression)


State 183

   10 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET • initialiser_list RIGHT_CURLY_BRACKET
   11                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET • initialiser_list COMMA RIGHT_CURLY_BRACKET
  106 initialiser_list: • designation_opt initialiser
  107                 | • initialiser_list COMMA designation_opt initialiser
  108 designation_opt: • designation
  109                | ε •  [IDENTIFIER, INTEGER_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, BITWISE_AND]
  110 designation: • designator_list ASSIGNMENT
  111 designator_list: • designator
  112                | • designator_list designator
  113 designator: • LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET

    LEFT_SQUARE_BRACKET  shift, and go to state 85

    $default  reduce using rule 109 (designation_opt)

    initialiser_list  go to state 203
    designation_opt   go to state 87
    designation       go to state 88
    designator_list   go to state 89
    designator        go to state 90


State 184

   25 cast_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression •

    $default  reduce using rule 25 (cast_expression)


State 185

  113 designator: LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 113 (designator)


State 186

  105 initialiser: LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET •

    $default  reduce using rule 105 (initialiser)


State 187

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: • logical_AND_expression
   53                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   54 conditional_expression: • logical_OR_expression
   55                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   56 assignment_expression: • conditional_expression
   57                      | • unary_expression assignment_operator assignment_expression
  103 initialiser: • assignment_expression
  104            | • LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
  105            | • LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
  107 initialiser_list: initialiser_list COMMA designation_opt • initialiser

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    LEFT_CURLY_BRACKET  shift, and go to state 47
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 56
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 66
    logical_AND_expression     go to state 67
    logical_OR_expression      go to state 68
    conditional_expression     go to state 69
    assignment_expression      go to state 70
    initialiser                go to state 204


State 188

    7 postfix_expression: postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 7 (postfix_expression)


State 189

    8 postfix_expression: postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES •

    $default  reduce using rule 8 (postfix_expression)


State 190

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   15 argument_expression_list: argument_expression_list COMMA • assignment_expression
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: • logical_AND_expression
   53                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   54 conditional_expression: • logical_OR_expression
   55                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   56 assignment_expression: • conditional_expression
   57                      | • unary_expression assignment_operator assignment_expression

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 56
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 66
    logical_AND_expression     go to state 67
    logical_OR_expression      go to state 68
    conditional_expression     go to state 69
    assignment_expression      go to state 205


State 191

   47 inclusive_OR_expression: inclusive_OR_expression • BITWISE_OR exclusive_OR_expression
   51 logical_AND_expression: logical_AND_expression LOGICAL_AND M inclusive_OR_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, LOGICAL_AND, LOGICAL_OR]

    BITWISE_OR  shift, and go to state 111

    $default  reduce using rule 51 (logical_AND_expression)


State 192

   51 logical_AND_expression: logical_AND_expression • LOGICAL_AND M inclusive_OR_expression
   53 logical_OR_expression: logical_OR_expression LOGICAL_OR M logical_AND_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, LOGICAL_OR]

    LOGICAL_AND  shift, and go to state 112

    $default  reduce using rule 53 (logical_OR_expression)


State 193

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: • logical_AND_expression
   53                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   54 conditional_expression: • logical_OR_expression
   55                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   55                       | logical_OR_expression N QUESTION_MARK M • expression N COLON M conditional_expression
   56 assignment_expression: • conditional_expression
   57                      | • unary_expression assignment_operator assignment_expression
   59 expression: • assignment_expression
   60           | • expression COMMA assignment_expression

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 56
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 66
    logical_AND_expression     go to state 67
    logical_OR_expression      go to state 68
    conditional_expression     go to state 69
    assignment_expression      go to state 80
    expression                 go to state 206


State 194

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: • logical_AND_expression
   53                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   54 conditional_expression: • logical_OR_expression
   55                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   56 assignment_expression: • conditional_expression
   57                      | • unary_expression assignment_operator assignment_expression
   59 expression: • assignment_expression
   60           | • expression COMMA assignment_expression
   62 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   65 declaration_specifiers: • type_specifier declaration_specifiers_opt
   66                       | • function_specifier declaration_specifiers_opt
   73 type_specifier: • VOIDTYPE
   74               | • CHARTYPE
   75               | • INTTYPE
   79 function_specifier: • INLINE
  130 expression_opt: • expression
  131               | ε •  [SEMI_COLON]
  134 iteration_statement: FOR LEFT_PARENTHESES • expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  135                    | FOR LEFT_PARENTHESES • declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement

    CHARTYPE            shift, and go to state 1
    INLINE              shift, and go to state 2
    INTTYPE             shift, and go to state 3
    VOIDTYPE            shift, and go to state 4
    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    $default  reduce using rule 131 (expression_opt)

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 56
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 66
    logical_AND_expression     go to state 67
    logical_OR_expression      go to state 68
    conditional_expression     go to state 69
    assignment_expression      go to state 80
    expression                 go to state 165
    declaration                go to state 207
    declaration_specifiers     go to state 32
    type_specifier             go to state 7
    function_specifier         go to state 8
    expression_opt             go to state 208


State 195

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: • logical_AND_expression
   53                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   54 conditional_expression: • logical_OR_expression
   55                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   56 assignment_expression: • conditional_expression
   57                      | • unary_expression assignment_operator assignment_expression
   59 expression: • assignment_expression
   60           | • expression COMMA assignment_expression
  132 selection_statement: IF LEFT_PARENTHESES • expression RIGHT_PARENTHESES M statement N
  133                    | IF LEFT_PARENTHESES • expression RIGHT_PARENTHESES M statement N ELSE M statement

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 56
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 66
    logical_AND_expression     go to state 67
    logical_OR_expression      go to state 68
    conditional_expression     go to state 69
    assignment_expression      go to state 80
    expression                 go to state 209


State 196

  136 jump_statement: RETURN expression_opt • SEMI_COLON

    SEMI_COLON  shift, and go to state 210


State 197

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: • logical_AND_expression
   53                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   54 conditional_expression: • logical_OR_expression
   55                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   56 assignment_expression: • conditional_expression
   57                      | • unary_expression assignment_operator assignment_expression
   59 expression: • assignment_expression
   60           | • expression COMMA assignment_expression
  114 statement: • labeled_statement
  115          | • compound_statement
  116          | • expression_statement
  117          | • selection_statement
  118          | • iteration_statement
  119          | • jump_statement
  120 labeled_statement: • IDENTIFIER COLON statement
  120                  | IDENTIFIER COLON • statement
  122 compound_statement: • LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  129 expression_statement: • expression_opt SEMI_COLON
  130 expression_opt: • expression
  131               | ε •  [SEMI_COLON]
  132 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  133                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  134 iteration_statement: • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  135                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  136 jump_statement: • RETURN expression_opt SEMI_COLON

    FOR                 shift, and go to state 160
    IF                  shift, and go to state 161
    RETURN              shift, and go to state 162
    IDENTIFIER          shift, and go to state 163
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    LEFT_CURLY_BRACKET  shift, and go to state 164
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    $default  reduce using rule 131 (expression_opt)

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 56
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 66
    logical_AND_expression     go to state 67
    logical_OR_expression      go to state 68
    conditional_expression     go to state 69
    assignment_expression      go to state 80
    expression                 go to state 165
    statement                  go to state 211
    labeled_statement          go to state 168
    compound_statement         go to state 169
    expression_statement       go to state 173
    expression_opt             go to state 174
    selection_statement        go to state 175
    iteration_statement        go to state 176
    jump_statement             go to state 177


State 198

   82 change_scope: ε •
  122 compound_statement: LEFT_CURLY_BRACKET change_block • change_scope block_item_list_opt RIGHT_CURLY_BRACKET

    $default  reduce using rule 82 (change_scope)

    change_scope  go to state 212


State 199

  141 function_definition: declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET •

    $default  reduce using rule 141 (function_definition)


State 200

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: • logical_AND_expression
   53                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   54 conditional_expression: • logical_OR_expression
   55                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   56 assignment_expression: • conditional_expression
   57                      | • unary_expression assignment_operator assignment_expression
   59 expression: • assignment_expression
   60           | • expression COMMA assignment_expression
   62 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   65 declaration_specifiers: • type_specifier declaration_specifiers_opt
   66                       | • function_specifier declaration_specifiers_opt
   73 type_specifier: • VOIDTYPE
   74               | • CHARTYPE
   75               | • INTTYPE
   79 function_specifier: • INLINE
  114 statement: • labeled_statement
  115          | • compound_statement
  116          | • expression_statement
  117          | • selection_statement
  118          | • iteration_statement
  119          | • jump_statement
  120 labeled_statement: • IDENTIFIER COLON statement
  122 compound_statement: • LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  126 block_item_list: block_item_list M • block_item
  127 block_item: • declaration
  128           | • statement
  129 expression_statement: • expression_opt SEMI_COLON
  130 expression_opt: • expression
  131               | ε •  [SEMI_COLON]
  132 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  133                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  134 iteration_statement: • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  135                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  136 jump_statement: • RETURN expression_opt SEMI_COLON

    CHARTYPE            shift, and go to state 1
    FOR                 shift, and go to state 160
    IF                  shift, and go to state 161
    INLINE              shift, and go to state 2
    INTTYPE             shift, and go to state 3
    RETURN              shift, and go to state 162
    VOIDTYPE            shift, and go to state 4
    IDENTIFIER          shift, and go to state 163
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    LEFT_CURLY_BRACKET  shift, and go to state 164
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    $default  reduce using rule 131 (expression_opt)

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 56
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 66
    logical_AND_expression     go to state 67
    logical_OR_expression      go to state 68
    conditional_expression     go to state 69
    assignment_expression      go to state 80
    expression                 go to state 165
    declaration                go to state 166
    declaration_specifiers     go to state 32
    type_specifier             go to state 7
    function_specifier         go to state 8
    statement                  go to state 167
    labeled_statement          go to state 168
    compound_statement         go to state 169
    block_item                 go to state 213
    expression_statement       go to state 173
    expression_opt             go to state 174
    selection_statement        go to state 175
    iteration_statement        go to state 176
    jump_statement             go to state 177


State 201

  129 expression_statement: expression_opt SEMI_COLON •

    $default  reduce using rule 129 (expression_statement)


State 202

   97 parameter_list: parameter_list COMMA parameter_declaration •

    $default  reduce using rule 97 (parameter_list)


State 203

   10 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list • RIGHT_CURLY_BRACKET
   11                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list • COMMA RIGHT_CURLY_BRACKET
  107 initialiser_list: initialiser_list • COMMA designation_opt initialiser

    COMMA                shift, and go to state 214
    RIGHT_CURLY_BRACKET  shift, and go to state 215


State 204

  107 initialiser_list: initialiser_list COMMA designation_opt initialiser •

    $default  reduce using rule 107 (initialiser_list)


State 205

   15 argument_expression_list: argument_expression_list COMMA assignment_expression •

    $default  reduce using rule 15 (argument_expression_list)


State 206

   49 N: ε •  [COLON]
   55 conditional_expression: logical_OR_expression N QUESTION_MARK M expression • N COLON M conditional_expression
   60 expression: expression • COMMA assignment_expression

    COMMA  shift, and go to state 125

    $default  reduce using rule 49 (N)

    N  go to state 216


State 207

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: • logical_AND_expression
   53                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   54 conditional_expression: • logical_OR_expression
   55                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   56 assignment_expression: • conditional_expression
   57                      | • unary_expression assignment_operator assignment_expression
   59 expression: • assignment_expression
   60           | • expression COMMA assignment_expression
  130 expression_opt: • expression
  131               | ε •  [SEMI_COLON]
  135 iteration_statement: FOR LEFT_PARENTHESES declaration • expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    $default  reduce using rule 131 (expression_opt)

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 56
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 66
    logical_AND_expression     go to state 67
    logical_OR_expression      go to state 68
    conditional_expression     go to state 69
    assignment_expression      go to state 80
    expression                 go to state 165
    expression_opt             go to state 217


State 208

  134 iteration_statement: FOR LEFT_PARENTHESES expression_opt • SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement

    SEMI_COLON  shift, and go to state 218


State 209

   60 expression: expression • COMMA assignment_expression
  132 selection_statement: IF LEFT_PARENTHESES expression • RIGHT_PARENTHESES M statement N
  133                    | IF LEFT_PARENTHESES expression • RIGHT_PARENTHESES M statement N ELSE M statement

    COMMA              shift, and go to state 125
    RIGHT_PARENTHESES  shift, and go to state 219


State 210

  136 jump_statement: RETURN expression_opt SEMI_COLON •

    $default  reduce using rule 136 (jump_statement)


State 211

  120 labeled_statement: IDENTIFIER COLON statement •

    $default  reduce using rule 120 (labeled_statement)


State 212

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: • logical_AND_expression
   53                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   54 conditional_expression: • logical_OR_expression
   55                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   56 assignment_expression: • conditional_expression
   57                      | • unary_expression assignment_operator assignment_expression
   59 expression: • assignment_expression
   60           | • expression COMMA assignment_expression
   62 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   65 declaration_specifiers: • type_specifier declaration_specifiers_opt
   66                       | • function_specifier declaration_specifiers_opt
   73 type_specifier: • VOIDTYPE
   74               | • CHARTYPE
   75               | • INTTYPE
   79 function_specifier: • INLINE
  114 statement: • labeled_statement
  115          | • compound_statement
  116          | • expression_statement
  117          | • selection_statement
  118          | • iteration_statement
  119          | • jump_statement
  120 labeled_statement: • IDENTIFIER COLON statement
  122 compound_statement: • LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  122                   | LEFT_CURLY_BRACKET change_block change_scope • block_item_list_opt RIGHT_CURLY_BRACKET
  123 block_item_list_opt: • block_item_list
  124                    | ε •  [RIGHT_CURLY_BRACKET]
  125 block_item_list: • block_item
  126                | • block_item_list M block_item
  127 block_item: • declaration
  128           | • statement
  129 expression_statement: • expression_opt SEMI_COLON
  130 expression_opt: • expression
  131               | ε •  [SEMI_COLON]
  132 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  133                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  134 iteration_statement: • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  135                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  136 jump_statement: • RETURN expression_opt SEMI_COLON

    CHARTYPE            shift, and go to state 1
    FOR                 shift, and go to state 160
    IF                  shift, and go to state 161
    INLINE              shift, and go to state 2
    INTTYPE             shift, and go to state 3
    RETURN              shift, and go to state 162
    VOIDTYPE            shift, and go to state 4
    IDENTIFIER          shift, and go to state 163
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    LEFT_CURLY_BRACKET  shift, and go to state 164
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    SEMI_COLON  reduce using rule 131 (expression_opt)
    $default    reduce using rule 124 (block_item_list_opt)

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 56
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 66
    logical_AND_expression     go to state 67
    logical_OR_expression      go to state 68
    conditional_expression     go to state 69
    assignment_expression      go to state 80
    expression                 go to state 165
    declaration                go to state 166
    declaration_specifiers     go to state 32
    type_specifier             go to state 7
    function_specifier         go to state 8
    statement                  go to state 167
    labeled_statement          go to state 168
    compound_statement         go to state 169
    block_item_list_opt        go to state 220
    block_item_list            go to state 171
    block_item                 go to state 172
    expression_statement       go to state 173
    expression_opt             go to state 174
    selection_statement        go to state 175
    iteration_statement        go to state 176
    jump_statement             go to state 177


State 213

  126 block_item_list: block_item_list M block_item •

    $default  reduce using rule 126 (block_item_list)


State 214

   11 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA • RIGHT_CURLY_BRACKET
  107 initialiser_list: initialiser_list COMMA • designation_opt initialiser
  108 designation_opt: • designation
  109                | ε •  [IDENTIFIER, INTEGER_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, BITWISE_AND]
  110 designation: • designator_list ASSIGNMENT
  111 designator_list: • designator
  112                | • designator_list designator
  113 designator: • LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET

    LEFT_SQUARE_BRACKET  shift, and go to state 85
    RIGHT_CURLY_BRACKET  shift, and go to state 221

    $default  reduce using rule 109 (designation_opt)

    designation_opt  go to state 187
    designation      go to state 88
    designator_list  go to state 89
    designator       go to state 90


State 215

   10 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET •

    $default  reduce using rule 10 (postfix_expression)


State 216

   55 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N • COLON M conditional_expression

    COLON  shift, and go to state 222


State 217

  135 iteration_statement: FOR LEFT_PARENTHESES declaration expression_opt • SEMI_COLON expression_opt RIGHT_PARENTHESES statement

    SEMI_COLON  shift, and go to state 223


State 218

   48 M: ε •
  134 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON • M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement

    $default  reduce using rule 48 (M)

    M  go to state 224


State 219

   48 M: ε •
  132 selection_statement: IF LEFT_PARENTHESES expression RIGHT_PARENTHESES • M statement N
  133                    | IF LEFT_PARENTHESES expression RIGHT_PARENTHESES • M statement N ELSE M statement

    $default  reduce using rule 48 (M)

    M  go to state 225


State 220

  122 compound_statement: LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt • RIGHT_CURLY_BRACKET

    RIGHT_CURLY_BRACKET  shift, and go to state 226


State 221

   11 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET •

    $default  reduce using rule 11 (postfix_expression)


State 222

   48 M: ε •
   55 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N COLON • M conditional_expression

    $default  reduce using rule 48 (M)

    M  go to state 227


State 223

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: • logical_AND_expression
   53                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   54 conditional_expression: • logical_OR_expression
   55                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   56 assignment_expression: • conditional_expression
   57                      | • unary_expression assignment_operator assignment_expression
   59 expression: • assignment_expression
   60           | • expression COMMA assignment_expression
  130 expression_opt: • expression
  131               | ε •  [RIGHT_PARENTHESES]
  135 iteration_statement: FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON • expression_opt RIGHT_PARENTHESES statement

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    $default  reduce using rule 131 (expression_opt)

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 56
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 66
    logical_AND_expression     go to state 67
    logical_OR_expression      go to state 68
    conditional_expression     go to state 69
    assignment_expression      go to state 80
    expression                 go to state 165
    expression_opt             go to state 228


State 224

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: • logical_AND_expression
   53                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   54 conditional_expression: • logical_OR_expression
   55                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   56 assignment_expression: • conditional_expression
   57                      | • unary_expression assignment_operator assignment_expression
   59 expression: • assignment_expression
   60           | • expression COMMA assignment_expression
  130 expression_opt: • expression
  131               | ε •  [SEMI_COLON]
  134 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M • expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    $default  reduce using rule 131 (expression_opt)

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 56
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 66
    logical_AND_expression     go to state 67
    logical_OR_expression      go to state 68
    conditional_expression     go to state 69
    assignment_expression      go to state 80
    expression                 go to state 165
    expression_opt             go to state 229


State 225

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: • logical_AND_expression
   53                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   54 conditional_expression: • logical_OR_expression
   55                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   56 assignment_expression: • conditional_expression
   57                      | • unary_expression assignment_operator assignment_expression
   59 expression: • assignment_expression
   60           | • expression COMMA assignment_expression
  114 statement: • labeled_statement
  115          | • compound_statement
  116          | • expression_statement
  117          | • selection_statement
  118          | • iteration_statement
  119          | • jump_statement
  120 labeled_statement: • IDENTIFIER COLON statement
  122 compound_statement: • LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  129 expression_statement: • expression_opt SEMI_COLON
  130 expression_opt: • expression
  131               | ε •  [SEMI_COLON]
  132 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  132                    | IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M • statement N
  133                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  133                    | IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M • statement N ELSE M statement
  134 iteration_statement: • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  135                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  136 jump_statement: • RETURN expression_opt SEMI_COLON

    FOR                 shift, and go to state 160
    IF                  shift, and go to state 161
    RETURN              shift, and go to state 162
    IDENTIFIER          shift, and go to state 163
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    LEFT_CURLY_BRACKET  shift, and go to state 164
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    $default  reduce using rule 131 (expression_opt)

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 56
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 66
    logical_AND_expression     go to state 67
    logical_OR_expression      go to state 68
    conditional_expression     go to state 69
    assignment_expression      go to state 80
    expression                 go to state 165
    statement                  go to state 230
    labeled_statement          go to state 168
    compound_statement         go to state 169
    expression_statement       go to state 173
    expression_opt             go to state 174
    selection_statement        go to state 175
    iteration_statement        go to state 176
    jump_statement             go to state 177


State 226

  122 compound_statement: LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET •

    $default  reduce using rule 122 (compound_statement)


State 227

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: • logical_AND_expression
   53                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   54 conditional_expression: • logical_OR_expression
   55                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   55                       | logical_OR_expression N QUESTION_MARK M expression N COLON M • conditional_expression

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 96
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 66
    logical_AND_expression     go to state 67
    logical_OR_expression      go to state 68
    conditional_expression     go to state 231


State 228

  135 iteration_statement: FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt • RIGHT_PARENTHESES statement

    RIGHT_PARENTHESES  shift, and go to state 232


State 229

  134 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt • SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement

    SEMI_COLON  shift, and go to state 233


State 230

   49 N: ε •
  132 selection_statement: IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement • N
  133                    | IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement • N ELSE M statement

    $default  reduce using rule 49 (N)

    N  go to state 234


State 231

   55 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression •

    $default  reduce using rule 55 (conditional_expression)


State 232

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: • logical_AND_expression
   53                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   54 conditional_expression: • logical_OR_expression
   55                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   56 assignment_expression: • conditional_expression
   57                      | • unary_expression assignment_operator assignment_expression
   59 expression: • assignment_expression
   60           | • expression COMMA assignment_expression
  114 statement: • labeled_statement
  115          | • compound_statement
  116          | • expression_statement
  117          | • selection_statement
  118          | • iteration_statement
  119          | • jump_statement
  120 labeled_statement: • IDENTIFIER COLON statement
  122 compound_statement: • LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  129 expression_statement: • expression_opt SEMI_COLON
  130 expression_opt: • expression
  131               | ε •  [SEMI_COLON]
  132 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  133                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  134 iteration_statement: • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  135                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  135                    | FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES • statement
  136 jump_statement: • RETURN expression_opt SEMI_COLON

    FOR                 shift, and go to state 160
    IF                  shift, and go to state 161
    RETURN              shift, and go to state 162
    IDENTIFIER          shift, and go to state 163
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    LEFT_CURLY_BRACKET  shift, and go to state 164
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    $default  reduce using rule 131 (expression_opt)

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 56
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 66
    logical_AND_expression     go to state 67
    logical_OR_expression      go to state 68
    conditional_expression     go to state 69
    assignment_expression      go to state 80
    expression                 go to state 165
    statement                  go to state 235
    labeled_statement          go to state 168
    compound_statement         go to state 169
    expression_statement       go to state 173
    expression_opt             go to state 174
    selection_statement        go to state 175
    iteration_statement        go to state 176
    jump_statement             go to state 177


State 233

   48 M: ε •
  134 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON • M expression_opt N RIGHT_PARENTHESES M statement

    $default  reduce using rule 48 (M)

    M  go to state 236


State 234

  132 selection_statement: IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N •  [CHARTYPE, FOR, IF, INLINE, INTTYPE, RETURN, VOIDTYPE, IDENTIFIER, INTEGER_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, RIGHT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, TILDE, EXCLAMATION, SEMI_COLON, BITWISE_AND]
  133                    | IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N • ELSE M statement

    ELSE  shift, and go to state 237

    $default  reduce using rule 132 (selection_statement)

    Conflict between rule 132 and token ELSE resolved as shift (%right ELSE).


State 235

  135 iteration_statement: FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement •

    $default  reduce using rule 135 (iteration_statement)


State 236

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: • logical_AND_expression
   53                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   54 conditional_expression: • logical_OR_expression
   55                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   56 assignment_expression: • conditional_expression
   57                      | • unary_expression assignment_operator assignment_expression
   59 expression: • assignment_expression
   60           | • expression COMMA assignment_expression
  130 expression_opt: • expression
  131               | ε •  [RIGHT_PARENTHESES]
  134 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M • expression_opt N RIGHT_PARENTHESES M statement

    IDENTIFIER          shift, and go to state 42
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    $default  reduce using rule 131 (expression_opt)

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 56
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 66
    logical_AND_expression     go to state 67
    logical_OR_expression      go to state 68
    conditional_expression     go to state 69
    assignment_expression      go to state 80
    expression                 go to state 165
    expression_opt             go to state 238


State 237

   48 M: ε •
  133 selection_statement: IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE • M statement

    $default  reduce using rule 48 (M)

    M  go to state 239


State 238

   49 N: ε •
  134 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt • N RIGHT_PARENTHESES M statement

    $default  reduce using rule 49 (N)

    N  go to state 240


State 239

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: • logical_AND_expression
   53                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   54 conditional_expression: • logical_OR_expression
   55                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   56 assignment_expression: • conditional_expression
   57                      | • unary_expression assignment_operator assignment_expression
   59 expression: • assignment_expression
   60           | • expression COMMA assignment_expression
  114 statement: • labeled_statement
  115          | • compound_statement
  116          | • expression_statement
  117          | • selection_statement
  118          | • iteration_statement
  119          | • jump_statement
  120 labeled_statement: • IDENTIFIER COLON statement
  122 compound_statement: • LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  129 expression_statement: • expression_opt SEMI_COLON
  130 expression_opt: • expression
  131               | ε •  [SEMI_COLON]
  132 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  133                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  133                    | IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M • statement
  134 iteration_statement: • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  135                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  136 jump_statement: • RETURN expression_opt SEMI_COLON

    FOR                 shift, and go to state 160
    IF                  shift, and go to state 161
    RETURN              shift, and go to state 162
    IDENTIFIER          shift, and go to state 163
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    LEFT_CURLY_BRACKET  shift, and go to state 164
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    $default  reduce using rule 131 (expression_opt)

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 56
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 66
    logical_AND_expression     go to state 67
    logical_OR_expression      go to state 68
    conditional_expression     go to state 69
    assignment_expression      go to state 80
    expression                 go to state 165
    statement                  go to state 241
    labeled_statement          go to state 168
    compound_statement         go to state 169
    expression_statement       go to state 173
    expression_opt             go to state 174
    selection_statement        go to state 175
    iteration_statement        go to state 176
    jump_statement             go to state 177


State 240

  134 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N • RIGHT_PARENTHESES M statement

    RIGHT_PARENTHESES  shift, and go to state 242


State 241

  133 selection_statement: IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement •

    $default  reduce using rule 133 (selection_statement)


State 242

   48 M: ε •
  134 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES • M statement

    $default  reduce using rule 48 (M)

    M  go to state 243


State 243

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator cast_expression
   18 unary_operator: • BITWISE_AND
   19               | • ASTERISK
   20               | • PLUS
   21               | • MINUS
   22               | • TILDE
   23               | • EXCLAMATION
   24 cast_expression: • unary_expression
   25                | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES cast_expression
   26 multiplicative_expression: • cast_expression
   27                          | • multiplicative_expression ASTERISK cast_expression
   28                          | • multiplicative_expression SLASH cast_expression
   29                          | • multiplicative_expression MODULO cast_expression
   30 additive_expression: • multiplicative_expression
   31                    | • additive_expression PLUS multiplicative_expression
   32                    | • additive_expression MINUS multiplicative_expression
   33 shift_expression: • additive_expression
   34 relational_expression: • shift_expression
   35                      | • relational_expression LESS_THAN shift_expression
   36                      | • relational_expression GREATER_THAN shift_expression
   37                      | • relational_expression LESS_EQUAL_THAN shift_expression
   38                      | • relational_expression GREATER_EQUAL_THAN shift_expression
   39 equality_expression: • relational_expression
   40                    | • equality_expression EQUALS relational_expression
   41                    | • equality_expression NOT_EQUALS relational_expression
   42 AND_expression: • equality_expression
   43               | • AND_expression BITWISE_AND equality_expression
   44 exclusive_OR_expression: • AND_expression
   45                        | • exclusive_OR_expression BITWISE_XOR AND_expression
   46 inclusive_OR_expression: • exclusive_OR_expression
   47                        | • inclusive_OR_expression BITWISE_OR exclusive_OR_expression
   50 logical_AND_expression: • inclusive_OR_expression
   51                       | • logical_AND_expression LOGICAL_AND M inclusive_OR_expression
   52 logical_OR_expression: • logical_AND_expression
   53                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   54 conditional_expression: • logical_OR_expression
   55                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   56 assignment_expression: • conditional_expression
   57                      | • unary_expression assignment_operator assignment_expression
   59 expression: • assignment_expression
   60           | • expression COMMA assignment_expression
  114 statement: • labeled_statement
  115          | • compound_statement
  116          | • expression_statement
  117          | • selection_statement
  118          | • iteration_statement
  119          | • jump_statement
  120 labeled_statement: • IDENTIFIER COLON statement
  122 compound_statement: • LEFT_CURLY_BRACKET change_block change_scope block_item_list_opt RIGHT_CURLY_BRACKET
  129 expression_statement: • expression_opt SEMI_COLON
  130 expression_opt: • expression
  131               | ε •  [SEMI_COLON]
  132 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  133                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  134 iteration_statement: • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  134                    | FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M • statement
  135                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  136 jump_statement: • RETURN expression_opt SEMI_COLON

    FOR                 shift, and go to state 160
    IF                  shift, and go to state 161
    RETURN              shift, and go to state 162
    IDENTIFIER          shift, and go to state 163
    INTEGER_CONSTANT    shift, and go to state 43
    CHARACTER_CONSTANT  shift, and go to state 44
    STRING_LITERAL      shift, and go to state 45
    LEFT_PARENTHESES    shift, and go to state 46
    LEFT_CURLY_BRACKET  shift, and go to state 164
    ASTERISK            shift, and go to state 48
    PLUS                shift, and go to state 49
    MINUS               shift, and go to state 50
    TILDE               shift, and go to state 51
    EXCLAMATION         shift, and go to state 52
    BITWISE_AND         shift, and go to state 53

    $default  reduce using rule 131 (expression_opt)

    primary_expression         go to state 54
    postfix_expression         go to state 55
    unary_expression           go to state 56
    unary_operator             go to state 57
    cast_expression            go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    shift_expression           go to state 61
    relational_expression      go to state 62
    equality_expression        go to state 63
    AND_expression             go to state 64
    exclusive_OR_expression    go to state 65
    inclusive_OR_expression    go to state 66
    logical_AND_expression     go to state 67
    logical_OR_expression      go to state 68
    conditional_expression     go to state 69
    assignment_expression      go to state 80
    expression                 go to state 165
    statement                  go to state 244
    labeled_statement          go to state 168
    compound_statement         go to state 169
    expression_statement       go to state 173
    expression_opt             go to state 174
    selection_statement        go to state 175
    iteration_statement        go to state 176
    jump_statement             go to state 177


State 244

  134 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement •

    $default  reduce using rule 134 (iteration_statement)
